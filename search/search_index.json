{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sardine: Python based live coding library with MIDI and OSC support \u2728","text":"<pre><code>            \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n            \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\n            \u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\n            \u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\n            \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n            \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>  <p>Sardine is a Python library tailored for musical live coding. It can turn Python into a fun music instrument and/or stage control tool for electronic musicians. Sardine is working on Windows/MacOS/Linux using Python 3.8+. It can send and receive MIDI, OSC and SuperDirt messages. Sardine is based on the principle of temporal recursion. It allows the execution of recursive functions synchronised with musical time. It means that you can sequence synthesizers, samples, MIDI and OSC signals or even arbitrary Python code with a strict and guaranteed timing! </p>                 <pre><code>@swim\ndef hop(d=0.5, i=0):\n    M(delay=0.3, note='60 46 50 67', \n            velocity=127, channel=0).out(i)\n    cc(channel=0, control=20, value=randint(1,127))\n    anew(hop, d=0.5, i=i+1)\n\n@swim\ndef bam(d=0.5, i=0):\n    S('k:1_10', \n        cutoff='1_10*100 2000 4000!4', \n        speed='1 0.5').out(i)\n    again(bam, d=choice([0.5, 0.25]), i=i+1)\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#why-sardine","title":"Why Sardine?","text":"<p>Sardine is a side-project initially conceived as a demonstration tool made for my PhD dissertation in musicology at the University of Saint-Etienne / Paris 8 University. Sardine is trying to encompass various programming paradigms and techniques used by live coders: declarative and imperative programming, DSLs for pattern processing, clock synchronisation with other tools, live cybernetic performances, etc...</p> <p>Obviously, I'm also trying to develop Sardine for my own usage and for my friends. Programming new tools is fun and rewarding! I am playing music with the Cookie Collective in Paris and with the Creative Code Lyon community. I am a member of TOPLAP and documentation contributor to TidalCycles.</p> <p>I learned programming by live coding music. The next logical step is now to code my own tool so I can share it with others and make people see the incredibly fruitful intersection between code and music.  Since I started live coding a few years ago, I always wished to develop my own tool just to see how things work!</p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>Contributions of any sort are really welcome! I am not a professional developer and am just trying to do my best with Sardine! I might code things in a weird / unefficient way. Everything takes place on the main GitHub repo, website and Python package. Don't be afraid of proposing big breaking changes, I'm here for the fun!</p>"},{"location":"showcase/","title":"Showcase","text":"<p>Sardine is used by musicians and artists to create algorithmic art by manipulating and re-evaluating source code on-the-fly. As an ongoing research project, Sardine is always on the move! Its users are adapting, refining and customizing Sardine for various purposes:</p> <ul> <li> <p>controlling hardware synthesizers (Rack Units, Eurorack).</p> </li> <li> <p>sampling / synthesis and audio mangling.</p> </li> <li> <p>sending and receiving OSC from the local network to control a performance setup.</p> </li> <li> <p>running GUI loops for physical simulations and other weird experiments :)</p> </li> </ul>"},{"location":"showcase/#legacy-footage","title":"Legacy footage","text":"<p>These examples have been recorded during the initial early stages of Sardine development. I grew fond of them as they show where it all started and highlight how the project has evolved since that time. Sardine grew out of an old system called ComputerTalk that I never released.</p>"},{"location":"documentation/reference/","title":"Reference","text":""},{"location":"documentation/reference/#superdirt","title":"SuperDirt","text":"<p>SuperDirt documentation is rather scarce and most of it needs to be inferred by looking at the source code. However, the behavior of most parameters is well known -- usually from experience -- by live coders. Moreover, SuperDirt can be customised freely to add custom effects and synthesizers. I'm working hard on gathering information about each and every parameter I can find :) Some of them are rather arcane. They are probably not meant to be used directly. Keep in mind that not all of them are useful and that you will likely find better options by building your own environment.</p>"},{"location":"documentation/reference/#sampling","title":"Sampling","text":"Parameter Brief description Typical range     <code>amp</code> Sound volume (linear scaling) 0 -&gt; x   <code>gain</code> Sound volume (exponential scaling) 0 -&gt; 1   <code>freq</code> Pitch around given frequency 0 -&gt; x   <code>midinote</code> Pitch around given MIDI note 0 - 127   <code>note</code> Pitch around given note ???   <code>octave</code> Pitch up or down depending on octave number 0 -&gt; x   <code>sound</code> Implicit (first argument of <code>D()</code>) --------------   <code>begin</code> Start position of audio playback 0 -&gt; 1  \u00a0   <code>end</code> End position of audio playback 0 -&gt; 1   <code>speed</code> Sample playback, impacts pitch. Negative will play reverse -x -&gt; 0 -&gt; x   <code>accelerate</code> Rising sample playback speed (pitch glissando) -x -&gt; 0 -&gt; x   <code>cps</code>  Implicit (cycles per second, inherited from Tidal) --------------   <code>loop</code>  ??? ???   <code>delta</code> Unused --------------   <code>cut</code> Cut other sounds playing on same orbit, start playing 0 or 1   <code>legato</code> Play sample for the given duration (without cutting others) 0 -&gt; x   <code>pan</code> Pan sound from left to right speaker (by default) 0 -&gt; 1   <code>orbit</code> Play sound/synth on the given audio effect bus (0 - 11) 0 - 11   <code>latency</code> Add a latency to audio playback (in seconds) 0 -&gt; x   <code>lag</code> Similar to latency/offset 0 -&gt; x   <code>offset</code> Similar to latency/lag 0 -&gt; x"},{"location":"documentation/reference/#audio-effects","title":"Audio effects","text":""},{"location":"documentation/reference/#space","title":"Space","text":""},{"location":"documentation/reference/#reverb","title":"Reverb","text":"Parameter Brief description Typical range     <code>room</code> Size of the room 0 -&gt; x   <code>size</code> Size of the reverb - keep below 1 (inf) 0 -&gt; 1   <code>dry</code> Dry/Wet balance 0 -&gt; 1    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('hh', amp=1,\n            room='s($.S)',\n            dry=0.1,\n            size='s($)')\n    a(test_fx, p=0.25)\n</code></pre>"},{"location":"documentation/reference/#delay","title":"Delay","text":"<p>The <code>delay</code> effect is initially built for Tidal, which is based on a cyclical time representation. However, it has been pre-configured here to work properly with Sardine.</p>    Parameter Brief description Typical range     <code>delay</code> Wet/Dry 0 -&gt; 1   <code>delaytime</code> Delay time 0 -&gt; x   <code>delayfeedback</code> Amount of reinjection of dry signal - don't go over 1 0 -&gt; .99    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('hh',\n            speep='1|2|4',\n            delay=1/2, delaytime=1/(2/3),\n            delayfeedback='0.5+(r/4)',\n            amp=1)\n    a(test_fx, p=0.25)\n</code></pre>"},{"location":"documentation/reference/#phaser","title":"Phaser","text":"<p>Not functioning as it should?</p>    Parameter Brief description Typical range     <code>phaserrate</code> Speed of phaser (in hz) 0 -&gt; x   <code>phaserdepth</code> Modulation amount 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('jvbass',\n            midinote='C|Eb|G|Bb',\n            phaserrate='1:10',\n            phaserdepth='s($*2)', amp=1)\n    a(test_fx, p=0.5)\n</code></pre>"},{"location":"documentation/reference/#leslie","title":"Leslie","text":"<p>This is a simple emulation of a Leslie rotating speaker typically used in music for treating organ sounds, voices, and to add an eary tint to everything that goes through it. This is basically a way to play creatively with doppler effects.</p>    Parameter Brief description Typical range     <code>leslie</code> Dry/Wet 0 -&gt; x   <code>lrate</code> Rate 0 -&gt; x   <code>lsize</code> Wooden cabinet size (in meters) 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('jvbass', amp=1, leslie=0.9,\n            lrate=0.1, lsize='0.1+r*2')\n    a(test_fx, p=0.25)\n</code></pre>"},{"location":"documentation/reference/#tremolo","title":"Tremolo","text":"<p>A simple tremolo effect.</p>    Parameter Brief description Typical range     <code>tremolorate</code> Tremolo speed 0 -&gt; x   <code>tremolodepth</code> Depth of tremolo 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25, i=0):\n    D('amencutup:[1:20]',\n            tremolorate='16|32',\n            tremolodepth='[0:1,0.25]',\n            i=i)\n    a(test_fx, p=0.5, i=i+1)\n</code></pre>"},{"location":"documentation/reference/#granular-weirdness","title":"Granular weirdness","text":"<p>This is a weird granular effect probably intended to serve as a building block for some other effect but you can use it as is nonetheless. It will slice your audio sample into tiny fragments of it while applying some amount of pitch-shifting on every sample.</p>    Parameter Brief description Typical range     <code>psrate</code> Pitch-shift rate 0 -&gt; x   <code>psdisp</code> Pitch-shift dispersion 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25, i=0):\n    D('amencutup:[1:20]',\n            psrate='2',\n            psdisp='[0:1,0.5]',\n            i=i)\n    a(test_fx, p=0.5, i=i+1)\n</code></pre>"},{"location":"documentation/reference/#filters","title":"Filters","text":"Parameter Brief description Typical range     <code>cutoff</code> Low-pass filter cutoff frequency (in hertz) 0 -&gt; x  us. &gt;2Khz   <code>hcutoff</code> High-pass filter cutoff frequency (in hertz) 0 -&gt; x  us. &lt; 500hz   <code>bandf</code> Bandpass filter cutoff frequency (in hertz) 0 -&gt; x   <code>resonance</code> Filter resonance 0 -&gt; 1   <code>bandqf</code> Bandpass resonance 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('jvbass',\n            midinote='C.|C|Eb|G|Bb',\n            cutoff='r*7000', resonance='r/2', amp=1)\n    a(test_fx, p=0.5)\n</code></pre>"},{"location":"documentation/reference/#distortion","title":"Distortion","text":""},{"location":"documentation/reference/#squiz","title":"Squiz","text":"<p>Will distort your signal, combination of multiple effects put together. It works better if you input multiples of two as parameters.</p>    Parameter Brief description Typical range     <code>squiz</code> Amount 0, 2 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('tabla:r*200', cut=1,\n            squiz='0|2|4|8',\n            midinote='C|F|Bb|E5b', amp=1)\n    a(test_fx, p=0.5)\n</code></pre>"},{"location":"documentation/reference/#triode","title":"Triode","text":"<p>Very gentle distortion. I actually have no idea about how the <code>triode</code> parameter works.</p>    Parameter Brief description Typical range     <code>triode</code> Distortion amount 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('tabla:r*200', cut=1,\n            triode='r', # comment me\n            midinote='C|F|Bb|E5b', amp=1)\n    a(test_fx, p=0.5)\n</code></pre>"},{"location":"documentation/reference/#distort","title":"Distort","text":"<p>Heavy distortion that will/can wildly change the spectrum of your sound.</p>    Parameter Brief description Typical range     <code>distort</code> Distortion amount 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25):\n    D('sd:r*200', cut=1,\n            distort='0|0.5',\n            midinote='C|G', amp=1)\n    a(test_fx, p=0.5)\n</code></pre>"},{"location":"documentation/reference/#shaping","title":"Shaping","text":"<p>Shape is an amplifier that can enter distortion territory but with a gentle curve. It will naturally make your sound louder the more you ramp up the value.</p>    Parameter Brief description Typical range     <code>shape</code> Amplification amount 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25, i=0):\n    D('amencutup:[1:20]', shape='[0:1,0.1]', i=i)\n    a(test_fx, p=0.5, i=i+1)\n</code></pre>"},{"location":"documentation/reference/#crush","title":"Crush","text":"<p>A very agressive bit crushing effect. Works only when you input multiples of 2. <code>2</code>\u00a0for extreme crushing, <code>32</code> for non-discernable.</p>    Parameter Brief description Typical range     <code>crush</code> Crushing factor 0 -&gt; x    <pre><code>@swim\ndef test_fx(p=0.25, i=0):\n    D('bd, sn, hh, sn', crush=4, i=i)\n    a(test_fx, p=0.5, i=i+1)\n</code></pre>"},{"location":"documentation/reference/#ring-modulation","title":"Ring Modulation","text":"<p>Can't make it work on the Sardine side.</p>    Parameter Brief description Typical range     <code>ring</code> Ring modulation amount 0 -&gt; x   <code>ringf</code> Ring modulation frequency 0 -&gt; x   <code>ringdf</code> Modulation frequency slide 0 -&gt; x"},{"location":"documentation/reference/#sardine-library","title":"Sardine Library","text":"<p>Sardine is still in an early stage of development. The library is still in an unstable state. The reference will be included after the first stable release. Please refer to the Sardinopedia (code examples) or to the Tutorial section (long-form article) to learn more about Sardine and its usage.</p>"},{"location":"documentation/sardinopedia/","title":"Sardinopedia","text":""},{"location":"documentation/sardinopedia/#demonstration-patterns","title":"Demonstration patterns","text":"<p>These patterns are small songs and/or long patterns that you can copy and paste to familiarise yourself with the syntax. Change some values, comment a few lines here and there. Try to learn how to move and alter Sardine code.</p> <p>Play with the <code>div</code> amount to generate interesting rhythms.</p>"},{"location":"documentation/sardinopedia/#pitch","title":"Pitch","text":""},{"location":"documentation/sardinopedia/#playback-speed-s","title":"Playback speed (S)","text":"<p><pre><code>@swim\ndef hh(d=0.5, i=0):\n    S('hh', speed='[1:8]').out(i)\n    again(hh, d=0.5, i=i+1)\n</code></pre> Changing the speed of audio playback for a given audio sample. Cheap version of tuning.</p>"},{"location":"documentation/sardinopedia/#sample-to-pitch-s","title":"Sample to pitch (S)","text":"<p><pre><code>@swim\ndef hh(d=0.5, i=0):\n    S('hh', midinote='C5!3, E5, G5').out(i)\n    again(hh, d=0.5, i=i+1)\n</code></pre> Pitching an audio sample relatively to a MIDI note.</p>"},{"location":"documentation/sardinopedia/#sample-to-freq-s","title":"Sample to freq (S)","text":"<p><pre><code>@swim\ndef hh(d=0.5, i=0):\n    S('hh', freq='100 + (r*2000)').out(i)\n    again(hh, d=0.5, i=i+1)\n</code></pre> Pitching an audio sample relatively to a given frequency (in <code>hertz</code>).</p>"},{"location":"documentation/survival_kit/","title":"Survival Kit","text":"<p>You can copy-paste this file and/or get a copy of it in the repository itself. This file is a grand tour of everything you can do with a basic installation of Sardine. I'll also shoot a video pretty soon where I'll browse through the file commenting some selected examples.</p>"},{"location":"documentation/survival_kit/#tutorial-file","title":"Tutorial file","text":"<pre><code># This is a condensed Sardine tutorial. Copy and paste this file in a working buffer.\n#\u00a0You can evaluate pretty much every example and follow along. By the end of this file,\n#\u00a0you should have a better understanding of Sardine.\n#\u00a0Make sure that you have the same configuration as me.\n#\u00a0I have toggled pretty much everything in sardine-conf.\n#\u00a0BPM: 120.0,BEATS: 4 SC: [X], DEFER: [X] MIDI: Sardine\n\n#\u00a0You can now evaluate every code example I'm providing. \n# Let's start with a basic hello world!\n\n@swim\ndef hello_world():\n    print('Hello World!')\n    again(hello_world)\n\nsilence() #\u00a0Silence will stop everything.\npanic() # Panic will kill everything (useful when you lost control).\n\n#\u00a0Let's break it down. This is just a normal Python function.\n\ndef hello_world():\n    print('Hello World!')\n\n# However, we are adding the swimming decorator. It allows the\n#\u00a0function to loop automatically and will allow you to reevaluate\n#\u00a0it whenever you want.\n\n@swim\ndef hello_world():\n    print('Hello World!')\n\n#\u00a0This is not enough, because we need to explicitely tell our \n# function to come back around :)\n\n@swim\ndef hello_world():\n    print('Hello World!')\n    again(hello_world)\n\n#\u00a0We call this pattern a 'temporally recursive function' or a \n#\u00a0'swimming function' because fishes are funnier.\n#\u00a0Now we are going to replace printing by sounds.\n\n@swim\ndef hello_world():\n    D('bd')\n    again(hello_world)\n\n#\u00a0We now have a kick. Let's change the recursion speed.\n\n@swim\ndef hello_world(p=0.5):\n    D('bd')\n    again(hello_world, p=0.5)\n\n# This is twice as fast. Let's add more complex rhythms.\n\n@swim\ndef hello_world(p=0.5, i=0):\n    rhythm = Pat('0.5, 0.25, 1', i)\n    D('bd')\n    again(hello_world, p=rhythm, i=i+1)\n\n# There is quite a lot of complexity already! Let's break it\n#\u00a0down by falling back to something simpler.\n\n@swim\ndef hello_world(p=0.5, i=0):\n    D('bd, drum:8, cp, drum:8', i=i)\n    again(hello_world, p=0.5, i=i+1)\n\n# This is a four on the floor. Note that we are using iterators\n#\u00a0quite a lot. They are super important in Sardine. In the last\n#\u00a0example, we are moving forward in the pattern by incrementing\n#\u00a0the i variable everytime we loop around.\n\n\n@swim\ndef hello_world(p=0.5, i=0):\n    D('bd, drum:8, cp, drum:8', i=i)\n    D('jvbass:[0:10]', i=i)\n    again(hello_world, p=0.5, i=i+1)\n\n# Super cool! Let's try to add a random number to the i=i argument.\n\nfrom random import randint\n\n@swim\ndef hello_world(p=0.5, i=0):\n    D('bd, drum:8, cp, drum:8', i=randint(1,10))\n    D('jvbass:[0:10]', i=randint(1,1000))\n    again(hello_world, p=0.5, i=i+1)\n\n#\u00a0We are now randomly peeking in the pattern. Let's now play the \n#\u00a0pattern in reverse.\n\n@swim\ndef hello_world(p=0.5, i=0):\n    D('bd, drum:8, cp, drum:8', i=-i)\n    D('jvbass:[0:10]', i=-i)\n    again(hello_world, p=0.5, i=i+1)\n\n# Negative iteration, we are going in the other direction!\n#\u00a0What if we play directly with i=i+1?\n\n@swim\ndef hello_world(p=0.5, i=0):\n    D('bd, drum:8, cp, drum:8', i=i)\n    D('jvbass:[0:10]', i=i)\n    again(hello_world, p=0.5, i=i+2)\n\n#\u00a0Now we are skipping some pattern elements! This is yet another easy\n#\u00a0variation on our last pattern. \n\n@swim\ndef hello_world(p=0.5, i=0):\n    rhythm = Pat('1/3, 2/3', i)\n    D('bd, drum:8, cp, drum:8', i=i)\n    D('jvbass:[0:10]', i=i)\n    again(hello_world, p=rhythm, i=i+2)\n\n# I am using the Pat(pattern, iterator) object to add some rhythm to\n#\u00a0my recursions. Yet another layer of complexity, but you know what?\n\nsilence()\n\nPa &gt;&gt; d('bd, drum:8, cp, drum:8', p='1/3,2/3')\nPb &gt;&gt; d('jvbass:[0:10]', p='1/3,2/3')\n\n#\u00a0You can also write things like this. We call these 'surfboards'\n#\u00a0because they feel great for surfing around in the system.\n\nPa &gt;&gt; None\nPb &gt;&gt; None\n\n#\u00a0To stop these, you can just assign None to them using the &gt;&gt; special\n#\u00a0operator. You can also make them faster or slower by using span=\n\nPa &gt;&gt; d('bd, drum:8, cp, drum:8', p='1/3,2/3', span=0.5)\nPb &gt;&gt; d('jvbass:[0:10]', p='1/3,2/3', span=0.5)\n\n\nPa &gt;&gt; d('bd, drum:8, cp, drum:8', p='1/3,2/3', span=2)\nPb &gt;&gt; d('jvbass:[0:10]', p='1/3,2/3', span=2)\n\n#\u00a0It can get weird very easily, especially when you start playing with\n#\u00a0the period argument (p). I'll let you try and see for yourself!\n\nPa, Pb, Pc, Pd, Pe, Pf, Pg, Ph, ...\nPA, PB, PC, PD, PE, PF, PG, PH, ...\n\n#\u00a0There is 48 'Players' to get you running with surfboards. Note that\n#\u00a0we were previously using D, but we use d for surfboards.\n\nsilence()\n# -------------------------------------------------------------------\n#\u00a0Let's pause for a moment and speak about patterns!\n# Let's fallback to our kick pattern\n\n@swim\ndef pattern101(p=0.5, i=0):\n    D('bd')\n    again(pattern101, p=0.5, i=i+1)\n\n#\u00a0Everytime you specify an argument using a string, this is a pattern.\n\n@swim\ndef pattern101(p=0.5, i=0):\n    D('bd', speed='1,2,3,4', i=i)\n    again(pattern101, p=0.5, i=i+1)\n\n#\u00a0You can have multiple patterns in one D() call. A call is like a big\n#\u00a0pattern sandwich.\n\n@swim\ndef pattern101(p=0.5, i=0):\n    D('bd', speed='1,2,3,4', shape='0.1,0.3', room='0.0, 0.2', i=i)\n    again(pattern101, p=0.5, i=i+1)\n\n# Keyword arguments are used to change parameters of the sound or \n#\u00a0event you want to play with!\n\n@swim\ndef pattern101(p=0.5, i=0):\n    D('bd', \n      midinote='C,E,G',\n      speed='[1:4]', \n      shape='0.1,0.3', \n      room='0.0, 0.2', i=i)\n    again(pattern101, p=0.5, i=i+1)\n\n# Any keyword parameter is accepted by only some will have an effect.\n#\u00a0For a complete list of parameters used by D(), check the reference\n#\u00a0page!\n\n@swim\ndef pattern101(p=0.5, i=0):\n    D('bd', \n      midinote='C,E,G',\n      speed='[1:4]', \n      shape='0.1~0.3', \n      room='sin($)', i=i)\n    again(pattern101, p=0.5, i=i+1)\n\n#\u00a0The patterns are written using a small programming language that has\n#\u00a0been specificaly designed for Sardine! There are many things you can\n#\u00a0do with patterns.\n\n@swim\ndef pattern101(p=0.25, i=0):\n    D('jvbass', midinote='adisco(C,Eb,G), C, Eb, F', i=i)\n    again(pattern101, p=0.25, i=i+1)\n\n# Here, we are applying the anti-disco function to part of our note.\n#\u00a0pattern. Oh, and we can write notes as well. If you wish, you can\n#\u00a0also use french names for notes.\n\n@swim\ndef pattern101(p=0.25, i=0):\n    D('jvbass', midinote='adisco(Do,Mib,Sol), Do, Mib, Fa', i=i)\n    again(pattern101, p=0.25, i=i+1)\n\n#\u00a0Check out the 'Language' section on the website to learn more about\n#\u00a0the pattern language. I'll just browse through some selected\n#\u00a0features now!\n\n\n@swim\ndef pattern101(p=0.25, i=0):\n    D('jvbass:[0:10]', i=i)\n    again(pattern101, p=0.25, i=i+1)\n\n#\u00a0[x:y] can be used to create a consecutive list of integers or \n#\u00a0floating point numbers. The pattern above is actually:\n#\u00a0jvbass:0 jvbass:1 jvbass:2 jvbass:3 jvbass:4, etc...\n#\u00a0Here is what it sounds like with notes!\n\n@swim\ndef pattern101(p=0.25, i=0):\n    D('jvbass', midinote='60+[0:24]', i=i)\n    again(pattern101, p=0.25, i=i+1)\n\n#\u00a0You can actually print these patterns if you are more comfortable\n#\u00a0reading through this!\n\n@swim\ndef pattern101(p=0.25, i=0):\n    print(Pat('[0:10]', i)) # lovely silence\n    again(pattern101, p=0.25, i=i+1)\n\n# It would be too long to explain all the things you can do with that pattern language. \n#\u00a0Be ready, here is a big pattern sandwich you can explore!\n#\u00a0Comment out various parts to check the output of each pattern\n\n@swim\ndef pattern101(p=0.25, i=0):\n    print(Pat('[0:10]', i)) # lists\n    print(Pat('[0:10,0.5]', i)) # custom step\n    print(Pat('r', i)) # random number between 0.0 and 1.0\n    print(Pat('r*20', i)) # but you can do math with it\n    print(Pat('sin(r)', i)) # there are functions as well\n    print(Pat('1~10', i)) # random integer in range\n    print(Pat('1.0~10.0', i)) # random float in range\n    print(Pat('1, 1+1, 1*2, 1/3, 1%4, 1+(2+(5/2))', i))\n    #\u00a0Look at me, I can do basic arithmetic!\n    again(pattern101, p=0.25, i=i+1)\n\nsilence()\n\n#\u00a0These are very basic tokens you can use but they can bring you \n#\u00a0really far when you start to apply them to MIDI or audio samples.\n#\u00a0Let's focus a bite more about note-specific tokens!\n\n@swim\ndef pattern101(p=0.25, i=0):\n    print(Pat('C,E,G', i)) # C Major arpeggio\n    print(Pat('rev(C,E,G)', i)) # reversing the pattern\n    print(Pat('Do, Mi, Sol', i)) # French note names\n    print(Pat('Db, Fa, Lab', i)) # Flat note\n    print(Pat('Mi,Sol#,Si', i)) # Sharp note\n    print(Pat('Mib5', i)) # You can specify octave numbers\n    print(Pat('[Do, Mib, Sol]+[1,2,3]', i)) # list arithmetic\n    print(Pat('C@minor', i)) # C minor scale!\n    print(Pat('C@fifths', i)) # Consecutive fifths!\n    #\u00a0Look at me, I can do basic arithmetic!\n    again(pattern101, p=0.25, i=i+1)\n\nsilence()\n\n# Note that note names are in reality... numbers. They are automa-\n#\u00a0tically converted to numbers whenever they are parsed by the \n#\u00a0internal language. You can also use numbers if you prefer!\n\n# Sample names are rather weird as well. There is a lot you can do!\n\n@swim\ndef pattern101(p=0.25, i=0):\n    print(Pat('baba:1', i)) # First sample in 'baba' folder\n    print(Pat('baba:1~5', i)) # Random picking in 'baba' folder\n    print(Pat('baba:[0:10]', i)) # List of samples from 0 to 10\n    print(Pat('baba:r*8', i)) # Yet another random picking method\n    again(pattern101, p=0.25, i=i+1)\n</code></pre>"},{"location":"documentation/tutorial/","title":"Old School Tutorial","text":"<p>The tutorial is not up to date</p> <p>Sardine was updated quite a lot recently. The tutorial has not been fully updated to reflect changes. Please rely on the Sardinopedia for now, until I fix this long-form article :)</p>  <p>At last! You have now installed and configured Sardine. You are up and running but you still don't know how to use Sardine! You might not really understand what it is either. This tutorial will hopefully help you to understand what Sardine is and what it does. I will not dive deep into technical details but this will serve as an in-depth exploration of the different components of Sardine.</p>"},{"location":"documentation/tutorial/#practical-philosophy","title":"Practical Philosophy","text":"<p> This is Epictetus, no links with Sardine but he was teaching practical philosophy too...</p>"},{"location":"documentation/tutorial/#what-you-can-do","title":"What you can do","text":"<p>To be clear once and for all, Sardine is:</p> <ul> <li>strictly speaking, a music live coding library (eg. TidalCycles, FoxDot, Gibber)</li> </ul> <p>but more trivially, it is:</p> <ul> <li> <p>a musical instrument that you gradually learn to master and to tune to your liking</p> </li> <li> <p>a control tool for external audio/video devices, instruments and softwares</p> </li> <li> <p>an environment for improvising algorithmic music live by coding with Python</p> </li> <li> <p>a blank canevas for exploring musical ideas (rhythms, textures and pitch) on-the-fly</p> </li> </ul> <p>On the contrary, Sardine is not (or not really):</p> <ul> <li> <p>a Digital Audio Workstation: no timeline, no click and play process, no ready-to-use patterns or presets, no way to save and recall sessions with pre-configured parameters, no way to record, process and master songs, tracks or beats. Sardine is meant to be used in parallel with such tools :)</p> </li> <li> <p>a compositional environment to write scores or to deal programatically with traditional score notation (\u00e0 la Finale, Sibelius, Lilypond, etc...). Sardine is not meant for writing, but for playing. This would be the same thing as to ask a piano to print a musical score while you play.</p> </li> </ul> <p>This doesn't mean that you can't compose things with Sardine to play them later. It just means that it doesn't deal with the traditional scoring system. If your intent is to prepare for an art installation, a techno/house gig or an experimental music recital, you can do it just fine!</p>"},{"location":"documentation/tutorial/#how-you-do-it","title":"How you do it","text":"<p>Sardine is an instrument/tool that you control by programming live. Your keyboard will be your main musical interface, which is pretty unusual compared to other musical practices. Sardine is a tool made to explore various live coding techniques, and a tool made to integrate with other live coding softwares and environments. For people unfamiliar with it, live coding could be said to be three distinct things:</p> <ul> <li> <p>a programming technique: the art of manipulating, redefining or altering software while it runs. A technique exploring processes of hot swapping, reloading or re-compiling parts of a software stack without interruption, as part of the way the software is meant to be used.</p> </li> <li> <p>an artistic practice: promoting artistic expression throughout the use of computer code. Turning programming into a gestural and expressive act, usually meant to be shared with an audience.</p> </li> <li> <p>a subculture: a niche in the larger world of computer and electronic music. Live coding has always been there. You can trace its origins way back to the 70s if you are really looking for it :) Nowadays, live coding is mostly promoted by algoravers or by the TOPLAP collective.</p> </li> </ul> <p>Try to read about it. It's a fascinating world of people happily hacking and sharing software, usually free and open source. The goal is to find the right tool for the nail you want to hammer, and build from there, turning your computer into an environment for personal artistic expression. For our case, it means that Sardine is meant to be extended, modified, specialised for what you need to do :)</p>"},{"location":"documentation/tutorial/#sardine-clock","title":"Sardine Clock","text":""},{"location":"documentation/tutorial/#midi-clock","title":"MIDI Clock","text":"<p>The most crucial information to know about Sardine is that everything happens because of the clock. When Sardine is imported using the command <code>from sardine import *</code>, an instance of the <code>Clock</code> class will automatically start to run in the background and will be referenced by the variable <code>c</code>. <code>Clock</code> is the main MIDI Clock. By default, if you haven't touched to the configuration, the clock will be running in <code>active</code> mode: it will send a MIDI clock signal for every tick on the default MIDI port. The default MIDI port will either be a virtual port named <code>Sardine</code> if your OS supports virtual MIDI ports or the first available MIDI Port declared by your OS. It can also be <code>passive</code> and made to listen to the default MIDI port if you prefer. Never override the <code>c</code> variable. You won't have to worry a lot about the internals. Never override any variable that is one letter long! You will likely find the following commands interesting:</p> <ul> <li><code>c.bpm</code>: current tempo in beats per minute.</li> <li><code>c.ppqn</code>: current PPQN (Pulses per Quarter Note, used by MIDI gear).</li> <li>be careful. The tempo might fluctuate based on the PPQN you choose. Assume that 24 is a default sane PPQN for most synthesizers/drum machines.</li> <li><code>c.accel</code>: an acceleration factor for the clock, from <code>0</code> to <code>100</code> (double tempo) %. </li> <li><code>c.nudge</code>: nudge the clock forward in time by the given amount. Usually pinged randomly until you fall back on the external click track you wish to follow. </li> </ul>"},{"location":"documentation/tutorial/#ableton-link-clock","title":"Ableton Link Clock","text":"<p>The Link protocol is a novel open source protocol released by Ableton which allows users to synchronise their musical tempo seamlessly on a local network. While still pretty new, this method of synchronisation is now supported by a fair amount of by music software and apps, including other live coding libraries.</p> <p>Sardine can be made to start or follow an Ableton Link Clock that will be shared by all users on the local network. To do so, you will need to join/start a session using the <code>c.link()</code> method. Be mindful that the regular behavior of the clock will be altered and that you won't be able to change the tempo or alter time the way you want. Link is a collaborative clocking protocol, and there is no \"main\" tempo originating somewhere and followed by everyone, unlike MIDI. To resume the regular behavior of the clock, use the command <code>c.unlink()</code>. The <code>c.link_log()</code> function can be used to monitor the Ableton Link Clock state. </p>  <p>Weirdness of Link Clock</p> <p>The Link Clock is a bit weird. It will disrupt the regular behavior of the Sardine Clock. It will stop emitting a MIDI clock signal because it cannot ensure that the clock signal will be steady. MIDI Clocks and Link Clock does not go hand in hand. It is preferable to kill every running pattern before attempting the switch from regular time to Link time.</p>"},{"location":"documentation/tutorial/#latency-and-sync","title":"Latency and sync","text":"<p>There are many possible reasons that could explain why your computer is not perfectly in sync with another one. To tackle this issue, Sardine is proposing a set of variables you can play with to finetune the latency of various parts of the system. If you ever encounter a synchronisation issue, try to play an event on the first beat of the bar on each computer and to play around with the following values:</p> <ul> <li> <p><code>c.midi_nudge</code>: in miliseconds. Nudge value for the MIDI Sender (MIDI).</p> </li> <li> <p><code>c.superdirt_nudge</code>: in milliseconds. Nudge value for the SuperDirt Sender (Sound).</p> </li> <li> <p><code>c.nudge</code>: in milliseconds. General nudge for the Sardine clock.</p> </li> </ul> <p>There is also an additional nudge value you can configure directly in your SuperDirt configuration. Finding the right configuration is usually just a matter of exploring and finding the right values for you and the other computer you are trying to synchronise with. Be careful not to override hard limits. Your computer needs some time to process information.</p>"},{"location":"documentation/tutorial/#more-info-about-clocks","title":"More info about clocks","text":"<ul> <li> <p>Sardine will not behave nicely if no external clock is running while in <code>passive</code> mode. Time is simply frozen and events will not trigger, suspended somewhere in time.</p> </li> <li> <p>You can introspect the current state of the clock using clock attributes or using the very verbose <code>debug</code> mode. Be careful, your terminal will be flooded by messages. After running <code>c.debug = True</code>, you should see something that looks like:</p> </li> </ul> <pre><code>...\nBPM: 130.0, PHASE: 15, DELTA: 0.001726 || TICK: 495 BAR:2 3/4\nBPM: 130.0, PHASE: 16, DELTA: 0.001729 || TICK: 496 BAR:2 3/4\nBPM: 130.0, PHASE: 17, DELTA: 0.001475 || TICK: 497 BAR:2 3/4\nBPM: 130.0, PHASE: 18, DELTA: 0.000634 || TICK: 498 BAR:2 3/4\nBPM: 130.0, PHASE: 19, DELTA: 0.000614 || TICK: 499 BAR:2 3/4\nBPM: 130.0, PHASE: 20, DELTA: 0.001333 || TICK: 500 BAR:2 3/4\n...\n</code></pre> <ul> <li>Some interesting clock attributes can be accessed:<ul> <li><code>c.beat</code>: current clock beat since start.</li> <li><code>c.tick</code>: current clock tick since start.</li> <li><code>c.bar</code>: current clock bar since start (<code>4/4</code> bars by default).</li> <li><code>c.phase</code>: current phase.</li> </ul> </li> </ul> <p>These clock attributes are used everywhere in Sardine as they provide the most basic interface to the clock for every component in the system. You can use them if you wish to compose more complex pieces and sequences. They are still really useful tools to craft conditionals and random number generators even though there are better and more controlled ways to access them (for instance, via the patterning system).</p>"},{"location":"documentation/tutorial/#the-meaning-of-sleep","title":"The meaning of sleep","text":"<p>If you are already familiar with Python, you might have heard about or used the <code>sleep()</code> function. This function will halt the execution of a program for a given amount of time and resume immediately after. Sardine does not rely on Python's <code>sleep</code> because it is unreliable for musical purposes! Your OS can decide to introduce micro-delays, to resume the execution too late or even not sleep for the precise duration you wanted. </p> <p>Sardine proposes an alternative to regular Python <code>sleep</code>, backed by the clock system previously described, crafted by @thegamecracks. The <code>sleep()</code> function has been overriden to allow you to have a safe and sane, similarly working alternative for musical contexts. You can use it to stop and resume a swimming function while keeping synchronization and timing accuracy.</p> <pre><code>@swim\ndef sleeping_demo(d=1):\n    print(\"Doing something...\")\n    sleep(1)\n    print(\"Doing something else...\")\n    sleep(1)\n    again(sleeping_demo, d=2)\n\n@swim\ndef limping(d=4):\n    S('hh').out()\n    sleep(3)\n    S('bd').out()\n    again(limping, d=4)\n</code></pre> <p>The swimming function <code>sleeping_demo()</code> will recurse after a delay of <code>2</code>. Think of the time you have in-between a recursion as spare time you can use and consume using <code>sleep()</code>. You can use that time sending the instructions that compose your swimming function. You can also do nothing for most of your time just like in <code>limping()</code>. You can write code in an imperative fashion, something that you might have already encountered in live coding systems such as\u00a0Sonic Pi or SuperCollider <code>Tdefs</code>.</p>  <p>Oversleeping is a thing</p> <p>Be careful! You can oversleep and trigger a recursion while your function is still running, effectively overlapping different versions of your swimming functions:   </p> <pre><code>@swim\ndef oversleep(d=4):\n    S('hh').out()\n    sleep(3)\n    S('bd').out()\n    again(oversleep, d=0.5) # Changed the value to oversleep\n</code></pre>  <p>If you are not yet familiar with the concept of recursion, or with the meaning of some of the facts presented here, keep patience. The meaning of all this will become clear after a few sections and some tests on your side :)</p>"},{"location":"documentation/tutorial/#swimming-functions","title":"Swimming functions","text":"<p> To understand recursion, you must understand recursion says the old and not so funny joke...</p> <p>We have already used the term swimming function in the sections above without taking enough time to explain what it means precisely! In Sardine parlance, a swimming function is a function that is scheduled to be repeated by recursion. The function will call itself when it ends, and again and again. Usually, in computer science manuals, you learn that recursion always needs to end, that there must be a case where the function will exit. We have this in Sardine too but we usually want the function to continue indefinitely, as a way to generate rhythms and to build a musical groove.</p> <p>A swimming function will call itself, and again, and again... This is a way computer scientists and sardinists alike like to think about loops and structures like lists. To define a function as a swimming function, use the <code>@swim</code> decorator. The opposite of the <code>@swim</code> decorator is the <code>@die</code> decorator that will release a function from this dreadful recursive temporal loop.</p> <pre><code>@swim # replace me by 'die'\ndef bd(d=1):\n    \"\"\"Loud bassdrum\"\"\"\n    S('bd', amp=2).out()\n    again(bd, d=1) #\u00a0again == anew == cs\n</code></pre> <p>If you don't manually add the recursion to the designated swimming function, the function will run once and stop. Recursion must be explicit and you should not forget about it! Forgetting the recursion loop call is another way to make a swimming function stop but not the recommended one!</p> <pre><code>#\u00a0Boring\n@swim \ndef bd(d=1):\n    S('bd', amp=2).out()\n</code></pre> <p>The recursion can (and should) be used to update your arguments between each call of the swimming function. Here is an example of a very simple iterator:</p> <pre><code>@swim #\u00a0or die \nasync def iter(d=1, nb=0):\n    \"\"\"A simple recursive iterator\"\"\"\n    print(f\"{nb}\")\n    again(iter, d=1, nb=nb+1)\n# 0\n# 1\n# 2\n# 3\n#\u00a04\n</code></pre> <p>This is an incredibly useful feature to keep track of state between each call of your function. Swimming functions and its handling of arguments are the most basic thing you have to learn in order to use Sardine proficiently. This is the base to improvise music with variation, nuance and finesse. Temporal recursion makes it very easy to manually code LFOs, musical sequences, randomisation, etc... It will gradually become like a second nature for you to write them.</p> <p>Swimming functions are great but they have one BIG difference compared to a classic recursion: they are temporal recursive. They must be given a <code>delay</code> argument. The <code>delay</code> argument is actually <code>d</code> (shorter is better). If you don't provide it, Sardine will assume that your function uses <code>d=1</code>. If you forget it on one side while using it on the other side, Sardine will jump up to your neck and try to kill you. If you ever try to give a delay of <code>0</code>, your function will immediately stop and an error message will be printed in your terminal. Not waiting is simply not an option, otherwise we would equally be able to travel back in time :)</p>"},{"location":"documentation/tutorial/#making-sound-sending-information","title":"Making sound / sending information","text":""},{"location":"documentation/tutorial/#sender-objects","title":"Sender objects","text":"<p>Sender objects are the most frequent objects you will be interacting with while playing with Sardine. Senders are objects that compose a single message that can be sent out using the <code>.out(iter=0)</code> method. They are your main interface to the outside world (SuperCollider/SuperDirt, MIDI or OSC). These objects can receive various and/or arbitrary parameters depending on their purpose and specialty. These arguments can be integers (<code>1</code>, <code>2</code>), floats (<code>1.23</code>, <code>0.123123</code>) or strings (<code>\"baba\"</code>, <code>\"dada/43/baba/\"</code>):</p> <ul> <li>int/float: parameters are sent as is, they are numbers!</li> <li>string : interpreted by Sardine and transformed into a pattern of values.</li> </ul> <p>When you import Sardine, <code>MIDISender</code>, <code>SuperDirtSender</code> and <code>OSCSender</code> will already be available under the name <code>M()</code> (for MIDI),  <code>S()</code> (for sound or SuperDirt) and <code>O()</code> (for OSC). These objects are preconfigured objects that must be prefered to custom senders you can declare yourself (more on this later). <code>M</code>, <code>O</code> and <code>S</code> are three ways of interacting with the synthesis engine, your synths or other equipment/softwares.</p>"},{"location":"documentation/tutorial/#superdirt-output","title":"SuperDirt output","text":"<p>The easiest way to trigger a sound with Sardine is to send an OSC message to SuperDirt. SuperDirt is designed as a tool that will convert control messages into the an appropriate action without having to deal with SuperCollider itself. Most people will use the SuperDirt output instead of plugging multiple synthesizers along with Sardine, or craft musical patches listening to OSC messages. The interface to SuperDirt is crude but fully functional. People already familiar with TidalCycles will feel at home using the <code>S()</code> (for <code>SuperDirt</code>) object. The syntax is extremely similar for the purpose is similar, and names often match between the two systems:  </p> <pre><code>#\u00a0A bassdrum (sample 0 from folder 'bd')\nS('bd').out() \n#\u00a0Fourth sample, way louder!\nS('bd', n=3, amp=2).out() \n# Patterning a parameter (read the appropriate section)\u00a0\nS('bd', n=3, amp=1, speed='1,0.5').out(i) \n#\u00a0Introducing some Python in our parameters\nfrom random import random, randint\nS('bd' if random() &gt; 0.5 else 'hh', speed=randint(1,5)) \n</code></pre>"},{"location":"documentation/tutorial/#delayed-messages","title":"Delayed messages","text":"<p>You can pre-declare a sound before sending it out. This allows you to build your messages incrementely before sending them out using the <code>.out()</code> method.</p> <pre><code>@swim\ndef delayed(d=0.5):\n    sound = S('bd')\n    if sometimes():\n        sound.shape(0.5)\n    else:\n        sound.speed(4)\n    sound.out()\n    again(delayed)\n</code></pre> <p>Do not use the assign operator (<code>=</code>). Call the attribute directly (eg: <code>amp()</code>). Any attribute can be set but they are not checked for validity. This is an useful feature if you prefer to write your code in an imperative fashion. There are other things to know about delayed composition:</p> <ul> <li>attributes can be chained: <code>S('cp').speed('1 2').room(0.5).out()</code></li> <li>attributes will be parsed. You can write patterns just like you do when you send the objet out directly.</li> </ul> <p>Attributes are not checked for validity. You can really write anything so be careful: spell out the SuperDirt attribute names correctly.</p> <p>This technique is also really interesting if you like to pre-compose things before playing them. You can write some additional code to store libraries of prepared audio samples matching with some custom parameters.</p>"},{"location":"documentation/tutorial/#orbits","title":"Orbits","text":"<p>You will soon find out that you can assign effects to audio samples played using <code>S()</code> such as a reverb, a low-pass filter or a bitcrusher. Some of these effects are local. They only affect the sound you are currently playing. Some other effects are global. They will affect all the sounds running through the same audio bus. This is an important distinction to keep in mind! To specify which bus you would like to use for a given sound, use the <code>orbit</code> argument.</p> <p><code>orbit</code> is a very important argument. Actually, it is the only argument that is specified by default. You can run a sound through a very heavy and long-tailed reverb while having, concurrently, another dry sound by switching orbits: <pre><code>S('clap', room=0.9, dry=0.1, size=0.9, orbit=0).out()\nS('bd', orbit=3).out()\n</code></pre></p> <p>The number of orbits at your disposition is declared on the SuperDirt side in your configuration file. More on this later on! In the meantime, check out the SuperDirt GitHub repository if you would like to learn more about it.</p>"},{"location":"documentation/tutorial/#midi-output","title":"MIDI Output","text":"<p>The <code>MIDISender</code> object is structurally similar to the <code>SuperDirtSender</code> object. It is specialized in writing/sending MIDI notes and MIDI notes only. Other MIDI events are handled differently by specific methods such as <code>cc()</code> (for control changes) or <code>pgch()</code> (for program changes). MIDI Notes messages need a duration, a velocity, a note number and a channel:</p> <ul> <li>duration (<code>seconds</code>): time between a note-on and note-off event (pressing a key on an imaginary keyboard).</li> <li>velocity (<code>0-127</code>): think of it as the volume amplitude of a note.</li> <li>channel (<code>0-16</code>): the MIDI channel to send that note to on your default MIDI port.</li> <li>note (<code>0-127</code>): note from the lowest possible octave on a keyboard to the highest.</li> </ul> <pre><code>M(delay=0.2, note=60, velocity=120, channel=0)\n</code></pre> <p>The <code>.out()</code> method is still used to carry a note out and to inform the sender of the value you would like to select in a pattern (see patterning). All of these values have a given default. If you don't specify anything (<code>M()</code>), you will hear a very loud middle-C on channel 0. See the <code>MIDI</code> section to learn more about sending out other message types such as control changes or program changes.</p>"},{"location":"documentation/tutorial/#osc-output","title":"OSC output","text":"<p>The <code>OSCSender</code> is the weirdest of all the senders. It behaves and works just like the other ones but will require more work from your part. By default, the object cannot assume what OSC connexion you would like to use. For that reason, you will need to feed him one with an aditional parameter. Likewise, the sender cannot assume what address you would like to carry your message to. You will need to feed the object an address everytime you wish to send a message out. There is no default OSC connexion (except for the one used by SuperDirt and Sardine internally).</p> <p>To use the <code>OSCSender</code> object, you will have to open manually an OSC connexion before feeding it into the object: <pre><code>my_osc = OSC(ip=\"127.0.0.1\", port= 12000, name=\"super_connexion\", ahead_amount=0.25)\nO(my_osc, 'loulou', value='1,2,3,4').out()\n</code></pre></p> <p>Argument names do not matter when composing OSC messages. You can name arguments, but this will only make it easier for you to name and find values in your code. The message being caried out will not feature the name of the argument you specified. I'm still pondering if that is a nice thing or if I should find another system. If you have an opinion about it, please voice it!</p>"},{"location":"documentation/tutorial/#composing-patterns","title":"Composing patterns","text":"<p>Sardine features an embedded programming language dedicated to the generation of musical patterns. Python code and pattern code go hand in hand to compose a successful and musical swimming function. This is, by far, the most intriguing aspect of Sardine. These patterns can be used to generate rhythms, streams of notes, OSC addresses, numbers, random values, etc... They can be used just anywhere a regular Python value would be expected. They replace fixed values with dynamic values, regular variables by mutating variables, etc... </p> <p>Think of this pattern-oriented programming language as a glorified time-dependant calculator that can also do some arithmetics on lists, with new operators such as <code>_</code>, <code>!</code> or <code>:</code>. The pattern syntax can be used for things like summoning musical scales, musical chords and applying some funny musical transformations (such as <code>.disco</code> or <code>.explosion</code>). All of this is ma\u00efeutic, aka meant to fuel your imagination and let you explore a world of dynamic algorithmic musical patterns.</p>  <p>Important</p> <p>To be precise, the pattern syntax is a fully-fleged programming language. It is distinct from Python. This programming language is embedded within Sardine. It has its own rules, its own operations, its own syntax. However, you will soon see that the syntax is much simpler than the one used by Python.</p>  <p>There is a certain amount of communication and inter-operability between the pattern syntax and the Python code. Some variables and some iterators are shared. Information about the clock can also be accessed both in Python code and in pattern code. You will soon learn that playing around with semi-random values can generate very fruitful musical results.</p>"},{"location":"documentation/tutorial/#composing-a-pattern","title":"Composing a pattern","text":"<p>Patterns as written as strings of values separated by commas: <code>1,2,3,4</code>, <code>dada, baba, lala</code>, <code>synth/freq, synth/mod</code>, <code>[1:2,0.2], 5*4, s(2)</code>, etc... It is recommended to use double quotes for your patterns, because the single quotation mark is an operator used by the pattern syntax.</p>"},{"location":"documentation/tutorial/#patterns-are-lists","title":"Patterns are lists","text":"<p>Fundamentally, a pattern will always yield a list as a result. The most complicated pattern generation expression you can imagine will always result in a goold old Python list that you need to iterate through using an index. Senders can always receive an index, directly as the first argument of their <code>.out()</code> method: <code>S('hh:[1:10], legato='r', pan='r, 1', speed='s($)*4').out(i)</code>.</p> <p>To pattern, you always need an iterator and a pattern. There are multiple ways to generate iterators, whether you want to use shorthand iterators (<code>i.i</code>) or more complex iterators generated by recursion:</p> <pre><code>def iter(d=0.5, i=0):\n    S('bd').out(i)\n    a(iter, d=0.5, i=i+1)\n</code></pre> <p>You will see people leaning more towards a technique or another. It is of paramount importance to master the usage of iterators. You can for instance limit the range of an iterator by using a modulo operation to only iterate over a few chosen values in your pattern:</p> <pre><code>def iter(d=0.5, i=0):\n    S('bd', speed=[1:100]).out(i%8)\n    a(iter, d=0.5, i=i+1)\n</code></pre> <p>You can also suddenly decide to iterate by decrementing and not by incrementing to reverse your pattern:</p> <pre><code>i.i = [0, -1]\ndef iter(d=0.5):\n    S('bd', speed=[1:100]).out(i.i % 8)\n    a(iter, d=0.5)\n</code></pre> <p>You can be really creative with how you handle your iterators, giving you another way to create more complex patterns.</p>"},{"location":"documentation/tutorial/#the-pattern-object","title":"The Pattern Object","text":"<p>There is a method called <code>P()</code>, that can be used to write a pattern outside of a sender. This method will need two arguments: the pattern itself followed by the iterator. You can use it to introduce Sardine patterns in regular Python code. It can be particularly useful to pattern the recursion delay of your swimming functions:</p> <pre><code>def iter(d=0.5):\n    S('bd', speed=[1:100]).out(i.i % 8)\n    a(iter, d=P('0.5!8, 0.25!4', i.p))\n</code></pre> <p>There is nothing more to know about it really. It can be particularly convenient to explore patterns by combining it with a <code>print()</code>\u00a0statement.</p>"},{"location":"documentation/tutorial/#value-types","title":"Value types","text":"<p>The first important thing to learn is what the atomic values are. Atomic values are the absolute basics. They denote something that can be transformed or something upon which you can build a calculation. There are three fundamental basic types of values that can be used to compose a Sardine pattern:</p> <ul> <li> <p>notes : musical notes. Symbolic names referring to a particular pitch.</p> </li> <li> <p>names : names denoting an OSC address or an audio sample file name.</p> </li> <li> <p>numbers: floating-point numbers or integers.</p> <ul> <li>numbers can also be information coming from the clock, shared iterators and shared variables (eg. see the next section).</li> </ul> </li> </ul> <p>All these values, even if not of the same type, can interact with one another, which means that you can write a scale and transpose it by a given factor just by doing math on it: <code>C-&gt;penta + 2</code>. The main design principle Sardine is trying to follow is not to impose any limits to what you can do with values you interact with. Giving the possibility to assign things to other things freely is one way not to hinder  the user and to encourage creativity.</p>"},{"location":"documentation/tutorial/#variable-values","title":"Variable values","text":"<p>There are some values you can summon, which cannot yield a deterministic result. If you wish to add 2 to the current number of beats elapsed in the bar, the result will likely differ depending on the beat number during which the calculation takes place. Likely, you can ask Sardine what is the current value of a variable, or what the current year number is. These values are based on Sardine clock time. Depending on the moment where your recursion takes place, you might see some values recurring because you are not polling continuously but polling just a predictible moment in time.</p> <ul> <li> <p><code>$</code>: tick, the tick number since the clock started.</p> </li> <li> <p><code>r</code>: random, between 0 and 1.</p> </li> <li> <p><code>p</code>: phase, a number between 0 and your c.ppqn.</p> </li> <li> <p><code>m</code>: measure, the measure since the clock started.</p> </li> </ul> <p>There are other temporal values to be accessed, but these will not be referring to Sardine time. They are just extrapolated from the current absolute time on your OS:</p> <ul> <li><code>$.Y</code>: year, the current year.</li> <li><code>$.M</code>: month, the current month.</li> <li><code>$.D</code>: day, the current day.</li> <li><code>$.H</code>: hour, the current hour.</li> <li><code>$.m</code>: minute, the current minute.</li> <li><code>$.S</code>: second, the current second.</li> <li><code>$.\u00b5</code>: microsecond, the current microsecond.</li> </ul> <p>Some other values are variables that can be freely altered both from the Python side and from the pattern side. They can be two things:</p> <ul> <li>iterators: <code>i.a</code> ... <code>i.z</code> and <code>i.A</code> ... <code>i.Z</code>, one for each letter of the latin alphabet both lowercase and uppercase.</li> <li>variables: <code>v.a</code> ... <code>v.z</code> and <code>v.A</code> ... <code>v.Z</code>, one for each letter of the latin alphabet both lowercase and uppercase.</li> </ul> <p>Iterators will yield a different result each time you call them. That is because they are counters. They increment or decrement each time they are activated by a given step. To change the current step of an iterator, you must provide them a new base value and step value as a list : <code>i.a = [0, 5]</code>. This example will make the iterator start from 0 and increment by 5 everytime. Iterators can also be resetted globally or invidually. The method to do so is specific to which side you are currently manipulating them (pattern or Python):</p> <ul> <li>Python: <code>i.reset(\"a\")</code></li> <li>Pattern: <code>i.a.reset</code></li> </ul> <p>You can also set your iterator to a given value:</p> <ul> <li>Python: <code>i.a = 5</code></li> <li>Pattern: <code>i.a = 5</code> </li> </ul> <p>Variables are based on the same principle. The main difference is that they don't increment everytime you call them. They are just good old values you can use and manipulate both on the Python and pattern side. The syntax for their usage is strictly similar to the one used by iterators.</p>"},{"location":"documentation/tutorial/#musical-notes","title":"Musical notes","text":"<p>You can write notes in patterns. Notes will be converted to some MIDI value used by SuperDirt. It means that notes are numbers too and that you can do math on them if you wish to. The syntax to write notes is the following. The steps 2 and 3 can be omitted:</p> <ul> <li>1) capital letter indicating the note name: <code>C</code>,<code>D</code>,<code>E</code>,<code>F</code>,<code>G</code>,<code>A</code>,<code>B</code></li> <li>2) flat or sharp: <code>#</code>, <code>b</code></li> <li>3) octave number: <code>0</code>..<code>9</code></li> </ul>"},{"location":"documentation/tutorial/#regular-names","title":"Regular names","text":"<p>Names are just... good old names. There are some rules to know but it is really easy to remember:</p> <ul> <li>a single letter is not a name.</li> <li>a name cannot start with a number.</li> </ul> <p>Here is a list of some valid names you could use: <code>dada</code>, <code>kqsdlkj321</code> or <code>hellyearhsardineiscool2</code>. Most of the time, these names will correspond to a given sample name in your library. Be sure to name your sample folders accordingly to respect these rules.</p>"},{"location":"documentation/tutorial/#osc-addresses","title":"OSC Addresses","text":"<p>Addresses and names are really similar, but they can also be composite names, aka. two or more names separated by a right-angled slash <code>/</code>. They are used to write OSC addresses, which usually adhere to this principle. Some valid addresses would look like: <code>synth/freq/mod</code> or <code>robot/arm/pinky</code>.</p>"},{"location":"documentation/tutorial/#math-but-funnier","title":"Math but funnier","text":"<p>The pattern syntax started out by being a very simple calculator on integers. It then spreaded out to be able to pattern a lot of things. The pattern syntax is still pretty new and I don't expect it to be final before at least a year or even more. You can safely expect that some things will change in the following days or months. In the meantime, it works and you can do really interesting things with it. It is already pretty capable of being helpful to generate the objects you expect to find in an electronic instrument: LFOs, ramps, melodic generators, etc..</p>"},{"location":"documentation/tutorial/#basic-arithmetics","title":"Basic Arithmetics","text":"<p>The pattern syntax includes some basic arithmetic operations that you expect to find such as <code>+</code>, <code>-</code>,\u00a0<code>*</code>, <code>/</code>, <code>//</code> (floor division)\u00a0, <code>%</code> (modulo). They work on almost any type of values. Of course, names and addresses do not support arithmetics very well, so don't even try to do it, it will likely crash. However, you can do arithmetics on just the numeric part of a name: <code>dada:(2+2)</code>. The result of this operation will be <code>dada:4</code>. While being really useful for a lot of things, arithmetics become particularly fun when you start patterning random or moving values such as the tick number: <code>$/20</code>.</p>"},{"location":"documentation/tutorial/#basic-functions","title":"Basic functions","text":"<p>The typical functions you can access on a scientific calculator are present in Sardine:</p> <ul> <li><code>sin</code> and <code>cos</code>: sinus and cosinus functions used to compute periodc phenomenons (how convenient, just like sound).</li> <li><code>tan</code>: tangent function.</li> </ul> <p>They are extremely useful for generating signal-like patterns, even though the resolution is not the greatest due to how Sardine operates. </p>"},{"location":"documentation/tutorial/#number-ranges","title":"Number ranges","text":"<p>As a shorthand, you can use the <code>1:10</code> syntax to generate a number between <code>1</code> and <code>10</code>. This is also working for floating point numbers! </p>"},{"location":"documentation/tutorial/#number-ramps","title":"Number ramps","text":"<p>You can generate ramps by surrounding two numbers with curly braces: <code>[1:10]</code>. This syntax will yield the following result: <code>[1, 2, 3, 4, 5, ..., 10]</code>. You can generate lists ramping up and down. You can also generate a ramp with a floating point range by specifying it as the third argument: <code>[1:10,0.1]</code>. This is really useful if you are looking to generate linear LFOs.</p>"},{"location":"documentation/tutorial/#repeat-operator","title":"Repeat operator","text":"<p>The <code>!</code> operator inspired by TidalCycles is used to denote the repetition of a value. You can also sometimes use the <code>!!</code> operator from the same family. This operator is a bit special and will be detailed later.</p>"},{"location":"documentation/tutorial/#overflow-protection","title":"Overflow protection","text":"<p>Some values such as notes need to be confined in the usual range of MIDI notes, defined on 8 bytes, from <code>0</code> to <code>127</code>. Math operations on notes that should result in overflowing that limit will be wrapped around. 128 will be changed into 0, etc...  Most arithmetic operations are wrapped around. If you think that it makes no sense, I feel the same too but I am waiting to find a better solution to this problem. I could probably just lock the value to its bounds. More on this in later versions.</p>"},{"location":"documentation/tutorial/#dealing-with-notes","title":"Dealing with notes","text":"<p>The support for traditional notes is still very basic. You can write very basic melodies with Sardine, but there is no good syntax for algorithmic composition like the one you could find in a tool such as SuperCollider. This is likely to change in the future, but dealing with musical objects is always extra difficult just like in any other computer music software. There are many ways to approach this, and it can be hard to decide which one is the right one or even to impose a vision about the way to deal with traditional musical objects such as chords and notes.</p>"},{"location":"documentation/tutorial/#notes-are-integers","title":"Notes are integers","text":"<p>Notes in Sardine are values just any other. It means that the whole range of arithmetic operations is available to you. Internally, a note becomes a number as soon as it is parsed by the system (based on a MIDI Note to integer conversion).</p>"},{"location":"documentation/tutorial/#note-qualifiers","title":"Note qualifiers","text":"<p>A Sardine note can receive a specific quality. Having a quality means being chosen as the base note for building a collection (chord, scale, structure). You can print the list of available qualifiers by using the <code>print_scales()</code> function. To qualify a note, the right arrow operator must be used: <code>-&gt;</code>. The list of available qualities is subject to change and additions. I will not reproduce it here. Here are some examples of the qualification of a note: <code>D3b-&gt;penta</code>, <code>E5#-&gt;fifths</code>, <code>G4-&gt;messiaen1</code>.</p>"},{"location":"documentation/tutorial/#midi","title":"MIDI","text":"<p>Sardine supports all the basic messages one can send and receive through MIDI. It will likely support every possible MIDI message in the future. By default, Sardine is always associated to a default MIDI port. It can both send and receive information from that port. If the clock is <code>active</code>, you already learned that clock messages will be forwarded to the default port and thus to all your connected softwares/gear. You can also open arbitrary MIDI ports as long as you know their precise name on your system. There is no function to facilitate this for now. I will not enter into the topic of finding / creating / managing virtual MIDI ports. This subject is outside the scope of what Sardine offers and you are on your own to deal with this.</p>"},{"location":"documentation/tutorial/#midi-out","title":"MIDI Out","text":"<p>Here is an example of a swimming function sending a constant MIDI Note:</p> <pre><code>@swim\ndef hop(d=0.5, i=0):\n    M(dur=0.3, note=60, \n            velocity=127, channel=0).out()\n    a(hop, d=0.5, i=i+1)\n</code></pre> <p>The default MIDI output is accessible through the <code>M()</code> syntax (contrary to <code>S</code>, it is not an object!). MIDI still need some work to support all messages coming out from the use of the same object. Note that the channel count starts at <code>0</code>, covering a range from <code>0</code> to <code>15</code>. This is unfortunate but that it how MIDI interfaces are built. The duration for each and every note should be written in milliseconds (<code>ms</code>) because MIDI is handling MIDI Notes as two separate messages (one for the <code>note_on</code> and one for the <code>note_off</code>). Following the MIDI standard, note and velocity values are expressed in the range from <code>0</code> to <code>127</code>.</p> <p>Let's go further and make an arpeggio using the pattern system:</p> <pre><code>@swim\ndef hop(d=0.5, i=0):\n    M(dur=0.3, note='C,E,G,B', velocity=127, channel=0).out(i)\n    anew(hop, d=0.5, i=i+1)\n</code></pre> <p>A similar function exists for sending MIDI CC messages. Let's combine it with our arpeggio:</p> <pre><code>@swim\ndef hop(d=0.5, i=0):\n    M(dur=0.3, note='60 46 50 67', \n            velocity=127, channel=0).out(i)\n    cc(channel=0, control=20, value=P('r*127', i.v))\n    a(hop, d=0.5, i=i+1)\n</code></pre>"},{"location":"documentation/tutorial/#midi-in","title":"MIDI In","text":"<p>MIDI Input is supported through the use of a special object, the <code>MidiListener</code> object. This object will open a connexion listening to incoming MIDI messages. There are only a few types of messages you should be able to listen to:</p> <ul> <li>MIDI Notes through the <code>NoteTarget</code> object</li> <li>MIDI CC through the <code>ControlTarget</code> object</li> </ul> <p>Additionally, you can listen to incoming Clock messages (<code>ClockListener</code>) but you must generally let Sardine handle this alone. There are currently no good or valid reasons to do this!</p> <p>Every <code>MidiListener</code> is expecting a target. You must declare one and await on it using the following syntax:</p> <pre><code>a = MidiListener(target=ControlTarget(20, 0))\n@swim\ndef pluck(d=0.25):\n    S('pluck', midinote=a.get()).out()\n    a(pluck, d=0.25)\n</code></pre> <p>In this example, we are listening on CC n\u00b0<code>20</code> on the first midi channel (<code>0</code>), on the default MIDI port. Sardine cannot assert the value of a given MIDI Control before it receives a first message therefore the initial value will be assumed to be <code>0</code>.</p> <p>You can fine tune your listening object by tweaking the parameters:</p> <pre><code>#\u00a0picking a different MIDI Port\na = MidiListener('other_midi_port', target=ControlTarget(40, 4))\n</code></pre>"},{"location":"documentation/tutorial/#osc","title":"OSC","text":"<p>You can send OSC (Open Sound Control) messages by declaring your own OSC connexion and sending custom messages. It is rather easy to do and should work without causing you any trouble.</p>"},{"location":"documentation/tutorial/#manual-method","title":"Manual method","text":"<p>The following example details the simplest way to send an OSC message using Sardine. It is very crude and really not recommended at all to follow this route for there is a better one:</p> <pre><code># Open a new OSC connexion\nmy_osc = OSC(ip=\"127.0.0.1\",\n        port= 23000, name=\"Bibu\",\n        ahead_amount=0.25)\n\n# Recursive function sending OSC\n@swim\ndef custom_osc(d=1):\n    my_osc.send(c, '/coucou', [randint(1,10), randint(1,100)])\n    anew(custom_osc, d=1)\n\n# Closing and getting rid of the connexion\n\ncr(custom_osc)\n\ndel my_osc\n</code></pre> <p>Note that you always need to provide the clock as the first argument of the <code>send()</code> method. It is probably better to write a dedicated function to avoid having to specify the address everytime you want to send something at a specific address:</p> <pre><code>def coucou(*args): my_osc.send(c, '/coucou', list(args))\n</code></pre>"},{"location":"documentation/tutorial/#using-the-oscsender-object","title":"Using the OSCSender object","text":"<p>Prefer the <code>OscSender</code> object, aliased to <code>O()</code>. The syntax is similar but you gain the ability to name your OSC parameters and you can use patterns to play around with them. Compared to <code>S()</code> and <code>M()</code>, <code>O()</code> requires one additional parameter: the <code>OSC</code> connexion previously defined.</p> <pre><code># Open a new OSC connexion\nmy_osc = OSC(ip=\"127.0.0.1\", port=23000, name=\"Bibu\", ahead_amount=0.25)\n\n#\u00a0Simple address\nO(my_osc, 'loulou', value='1, 2, 3, 4').out()\n\nO(my_osc, 'loulou/yves', value='1, 2, 3, 4').out()\n\n@swim\ndef lezgo(d=1, i=0):\n    O(my_osc, 'loulou/blabla', \n        value='1, 2, 3, 4', \n        otherv='1, 2|4, r*2').out(i)\n    anew(lezgo, i=i+1)\n</code></pre>"},{"location":"documentation/tutorial/#what-about-crashes","title":"What about crashes?","text":"<p>If you already know how to program, you know that 90% of your time is usually spent debugging code that doesn't run. You will not be a better programmer when using Sardine. Crashes will happen too, but they are handled and taken care of so that the musical flow is never truly interrupted. If you write something wrong inside a swimming function, the following will happen: </p> <ul> <li>if the function crashes and has never looped, it will not be recovered.</li> <li>if the function is already running and has already looped, the last valid function will be rescheduled and the current error message will be printed so that you can debug.</li> </ul> <p>It means that once you start playing something, it will never stop until you want it to. You can make music without fearing interruption because of a crash. Some mistakes might be harder than other to recover from but most of the time, you shouldn't really hear or feel any interruption in the musical flow. If that is the case, please report the bug along with a way to reproduce it easily.</p>"},{"location":"documentation/demos/PMA5/","title":"Tribute to Jules Cipher","text":""},{"location":"documentation/demos/PMA5/#description","title":"Description","text":"<p>Two songs composed by combining Sardine with the Roland PMA-5. Everything was recorded with two awful mono jack cables connected to a USB audio soundcard linked through Carla (very high signal-to-noise ratio).</p>"},{"location":"documentation/demos/PMA5/#performance","title":"Performance","text":""},{"location":"documentation/demos/PMA5/#source-code","title":"Source code","text":"<pre><code>c.bpm = 125\n\n#LEAD\n\n#marimba\npgch(program=12, channel =0)\n\n#vibraphone\npgch(program=11, channel=0)\n\n@swim\ndef liquide(d=0.5,i=0):\n    #minTheme #disco()                           #div=1\n    #M(note = \"C@maj\", channel = 0).out(i, div = 2)\n    #M(note=\".!7,&lt;C@min7&gt;,.!7,&lt;C@min7&gt;,.!7,&lt;C@maj7&gt;\",\n    #        channel = 0).out(i, div=4)\n    #LeadTHEME  #apal #^[2~6]\n    #M(note=\"pal(&lt;C@maj, C@min7&gt;,68,65,.,67,.)\" , \n    #    velocity = P(\"70~90\",i), \n    #    channel = 0, dur=5000).out(i)\n    #Bass lente\n    #M(note=\"disco(&lt;C@maj, C@min7&gt;,68,65,.,67,.)\" , \n    #    velocity = P(\"80~95\",i), \n    #    channel = 0, dur=50).out(i, div = 2)\n    again(liquide, d=P(\"0.25, 0.5\",i), i=i+1)\n\n\n#BAss TB303\npgch(program=38, channel=1)\ncc(control=0, value =66, channel=1)\n\nPt &gt;&gt; play_midi(note='C2@min | ., C2@min7', channel = 1)\n\ncc(control=1, value =0, channel=1)\n\nPt &gt;&gt; None\n\n#DRUMSET \n\n#TR808\npgch(program=25, channel = 9)\n\n#ROOM2\npgch(program=72, channel = 9)\n\n#TR909\npgch(program=88, channel = 9)\n\nPO &gt;&gt; play_midi(note=\"36,.,36,.\", velocity = 127, channel = 9)\n\nPO &gt;&gt; None\n\nPs &gt;&gt; play_midi(note=\".,.,38,.\", velocity = 100, channel = 9)\n\nPs &gt;&gt; None\n\nPh &gt;&gt; play_midi(note=\"44!7,46\", channel=9)\n\nPh &gt;&gt; None\n</code></pre> <pre><code> #CHANSON NUMERO 2, dowaping in the DOO-wap (nourriture)\n\nc.bpm = 152\n\n#ROOM2\npgch(program=72, channel = 9)\n\nPO &gt;&gt; play_midi(note=\"36,.,..,.,.,.,36,36\",\n        velocity = 130, channel =9)\n\nPO &gt;&gt; None\n\nPs &gt;&gt;  play_midi(note = \".,.,.,38\", velocity = 85,  channel =9)\n\nPs &gt;&gt; None\n\nPh &gt;&gt; play_midi(note=\"44!7,46\", channel = 9)\n\nhush()\n\npgch(program = 33, channel = 1)\ncc(control = 0, value =66, channel = 1)\n\n@swim\ndef dubibass(d=0.5, i=0):\n    M(note=\".,D3\", channel = 1).out(i, div=2, rate=1)\n    M(note = 'D2,.,D2',channel = 1).out(i, div=1, rate=1) \n    again(dubibass, d=1, i=i+1)\n\n\npgch(program=63, channel = 3)\ncc(control=0, value=64, channel=3)\n\n@swim\ndef orgie(d=0.5, i=0):\n    M(note=\"&lt;D4@maj7&gt;\", \n            channel = 3, \n            velocity = P(\"[45:65]\",i), \n            dur = 30).out(i,div=4, rate=1) \n    #M(note=\".!8,adisco(F4@maj7)\", \n    #        channel = 3, \n    #        velocity = P(\"[75:45]\",i), \n    #        dur = 65).out(i,div=4, rate=1)\n    again(orgie, d=0.125, i=i+1)\n\n\n@swim\ndef dowap(d=0.5,i=0):\n    pgch(program = 53, channel=4)\n    if E(2,3,i):\n        pgch(program = 54 , channel = 4)\n    M(note=\"D5,.,disco(D4@maj7),.,F3@hirajoshi | .\", channel = 4).out(i, div = 4, rate = 1)\n    #M(note=\"D6,.,disco(D5@maj7),.,disco(F4@maj7)\", channel=4).out(i, div=4, rate=P(\"1,2,3\",i))\n    again(dowap, d=0.125, i=i+1)\n\n#laisser que le hh\n\n@swim\ndef tempomedler(d=0.5, i=0):\n    if c.bpm &lt; 80 :\n        c.bpm = c.bpm*1.02\n    else :\n        c.bpm = 60\n    again(tempomedler, d=0.5, i=i+1)\n\nhush()\n</code></pre>"},{"location":"documentation/demos/artificial_life/","title":"Artificial Life","text":""},{"location":"documentation/demos/artificial_life/#description","title":"Description","text":"<p>Experimental use of the Taichi numerical simulation and graphics language for live visuals and artificial life simulation.</p> <p>For more info see: https://github.com/Intelligent-Instruments-Lab/iil-python-tools.</p>"},{"location":"documentation/demos/artificial_life/#performance","title":"Performance","text":""},{"location":"documentation/demos/artificial_life/#source-code","title":"Source code","text":"<p>https://github.com/Intelligent-Instruments-Lab/iil-python-tools/tree/master/examples/tulvera</p> <pre><code>from sardine import *\nimport taichi as ti\nimport numpy as np\nimport math\nimport tulvera as tul\n\nti.init(arch=ti.vulkan)\nc.bpm = 250\nc.link()\nresx = 1920\nresy = 1080\nn = 8192\nboids = tul.vera.Boids(resx, resy, n)\nwindow = ti.ui.Window(\"Boids\", (resx, resy))\ncanvas = window.get_canvas()\n\n@swim\ndef gui_loop(d=0.5, i=0):\n    boids.update()\n    canvas.set_image(boids.world.to_numpy().astype(np.uint8))\n    window.show()\n    a(gui_loop, d=1/16, i=i+1)\n\n@swim\ndef param_loop(d=16, i=0):\n    # boids.vis_radius[None] = P('40.0,80.0,150.0',i)\n    # boids.max_speed[None] = P('1.0,2.0,3.0',i)\n    boids.max_speed[None] = P('2*sin($/2)')\n    a(param_loop, d=8, i=i+1)\n\nhush()\n</code></pre>"},{"location":"documentation/demos/dumpster_dive/","title":"dumpsterDive (11/11/2022)","text":""},{"location":"documentation/demos/dumpster_dive/#description","title":"Description","text":"<p>dumpsterDive is a short piece that can be performed with quasi live-coding practices. It uses a set of percussive field recordings made with a  hard marimba mallet on various parts of a public metal dumpster. One sound was made with a plastic scraper. They are particularly resonant sounds that work well together. The Sardine function uses the stacked samples model, where each sample line can be played alone or together with others. </p> <ul> <li>Audio equipment: Tascam DR-100, Rode shotgun mic: NTG4. </li> <li>Software: Sardine</li> <li>Dumpster samples are available via the sardine-sounds repository. </li> </ul>"},{"location":"documentation/demos/dumpster_dive/#performance-composed-quasi-live-coding","title":"Performance: composed quasi live-coding","text":""},{"location":"documentation/demos/dumpster_dive/#source-code","title":"Source code","text":"<p><pre><code># Load audio effect and preset dictionaries first.\n# Play one or both lines from each section (basic, reverse rhythms, melodic patterns, bass, scrape). Explore combinations. \n\nc.bpm=60\n\n@swim\ndef dumpsterDive(d=1, i=0):\n## basic samples - cycle thru the sounds used by all layers \n    S('dumpster:[0,1,4,2,5,3,.!2]', speed=1, amp=.5, **rev1, orbit=0).out(i, div=8) \n    #S('dumpster:[2,0,1,4,3,5]', speed='2', pan=.7, amp=.5, **rev1, orbit=1).out(i, div=2) #**del1\n## reverse rhythms\n    #S('dumpster:1', begin=.065, end=.4, speed='-1', pan='[.14:.84,0.1],[.83:.15,0.1]', amp=.8, **rev0, orbit=2).out(i, div4)\n    #S('dumpster:0!2,.', begin=0, end=.85, speed='1,-1', pan='[.9:.1,0.2],[.1:.9,0.2]', amp=.6, **rev1, orbit=3).out(i, rate=1, div=2) #**del1, \n## melodic patterns\n    #S('dumpster:[1!2,4!2,5!2,4]', begin=.052, end=.088, freq='[414,240,620,.,500,380,820,750]', timescale=1.4, pan='[.1,.9]', amp=.95, **rev2, orbit=4).out(i, rate=1, div=1) \n    #S('dumpster:[0,1,0,3,4,]', begin='0', end='.2',speed='1', amp=.6, pan=.3, **rev1, orbit=5).out(i, rate=1, div=2) \n    #S('dumpster:[6!2,8!3,7!2]', octave='7', cut=1, pan=.3, amp=.9, **rev2, orbit=6).out(i, div=4)\n## bass - choose one or the other\n    #S('dumpster:[2,1,0,.,4,1]', octave=4, amp=.5, **rev1, orbit=7).out(i, rate=1, div=4) \n    #S('dumpster:2', octave='[4.8:5.1,.04],[4.6:4.8,.04]', amp=.95, **rev1, orbit=8).out(i, div=4) \n## scrape\n    #S('dumpster:[5,.,5]', octave='6', cut=1, amp=1.2, **del1, **rev1, orbit=8).out(i, rate=.5, div=4) \n    #S('dumpster:[5,.,5]', octave='[6!3,6.62,5.4]', cut=1, amp=.9, **rev2, orbit=9).out(i, rate=1, div=1) #**del2\n## presets\n    #returnGroove['bass1'].out(i, rate=1, div=4)\n    #returnGroove['melody2'].out(i, rate=1, div=2)\n    #closing['basic2'].out(i, div=2)\n    #closing['basic2a'].out(i, rate=2, div=2) ## div=1\n    #closing['scrape2'].out(i, rate=1, div=2)\n    #c.bpm = P('[60:90,.03]', i) #accelerate tempo at the end\n\n    a(dumpsterDive, d=1/8, i=i+1)\n\n######################################################\n#hush(dumpsterDive)\n\n######################## LOAD THESE FIRST - python dictionarys referenced in dumpsterDive function #################\nc.bpm=60\n## audio effects \nrev0 = {'room':.8, 'size':0.5, 'dry':0.5}\nrev1 = {'room':.9, 'size':0.6, 'dry':0.4}\nrev2 = {'room':1.5, 'size':0.7, 'dry':0.4}\nrev3 = {'room':2, 'size':0.8, 'dry':0.3}\n\ndel0 = {'delay':0.5, 'delaytime':0.3, 'delayfeedback':0.5, 'triode':0}\ndel1 = {'delay':0.5, 'delaytime':0.4, 'delayfeedback':0.6}\ndel2 = {'delay':0.5, 'delaytime':0.25, 'delayfeedback':0.8}\n\n#Presets\nreturnGroove = {'bass1':  S('dumpster:[2,1,0,.,4,1]', octave=4, amp=.5, **rev1, orbit=7), \n    'melody2': S('dumpster:[0,1,0,3,4,]', begin='0', end='.2',speed='1', amp=.4, pan=.3, **rev1, orbit=5) }\nclosing = {'basic2': S('dumpster:[12,0,1,4,3,5]', speed='2', pan=.7, amp=.5, **del1, **rev1, orbit=1), \n    'basic2a': S('dumpster:[0,5,3,4,3,0]', speed='[2.01:1.96,.01],[1.96:2.01,.01]', pan='[.99:.01,0.3],[.01:.99,0.3]', amp=.7, **rev1, **del2, orbit=1), \n    'scrape2': S('dumpster:[5,.,5]', octave='[6!3,6.62,5.4]', cut=1, amp=.9, **del2, **rev2, orbit=9) }\n</code></pre> Thanks to @Bubobubobubobubo for assistance on Sardine usage. </p>"},{"location":"documentation/demos/solstice/","title":"Solstice","text":"<p>2 performances were made with Sardine during the TidalCycles Annual Solstice Stream. The former by Bubobubo, the latter by Ralt144MI.</p>"},{"location":"documentation/demos/solstice/#bubo","title":"Bubo","text":""},{"location":"documentation/demos/solstice/#description","title":"Description","text":"<p>This is a 20 minutes performance that I did for the TidalCycles annual solstice stream. Three of the four tracks were rapidly composed before the stream. I've tried to highlight some of the new features we have worked on for the <code>v.0.2.1</code>. I am sometimes playing additional keyboard on top of the live code.</p>"},{"location":"documentation/demos/solstice/#performance","title":"Performance","text":""},{"location":"documentation/demos/solstice/#source-code","title":"Source code","text":"<pre><code>padcc = { 'timbre': {'control' : 18, 'chan': 2},\n        'time': {'control' : 19, 'chan': 2},\n        'metal': {'control' : 16, 'chan': 2},\n        'fx': {'control' : 17, 'chan': 2}}\nbasscc = { 'timbre': {'control' : 18, 'chan': 0},\n        'time': {'control' : 19, 'chan': 0},\n        'cutoff': {'control' : 16, 'chan': 0},\n        'fx': {'control' : 17, 'chan': 0}}\njupcc = { 'decay': {'control' : 81, 'chan': 1},\n        'time': {'control' : 19, 'chan': 1},\n        'cutoff': {'control' : 74, 'chan': 1},\n        'resonance': {'control' : 71, 'chan': 1}}\ndirt._ahead_amount = 0.4\n\n#######################################################################\n#\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2591\u2588\u2003 \u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2591\u2588\u2003 \u2003\u2588\u2580\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2584\u2580\u2588#\n#\u2588\u2580\u2591\u2003\u2588\u2580\u2584\u2003\u2588\u2588\u2584\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003 \u2003\u2584\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2588#\n#######################################################################\n\nPE &gt;&gt; d('long:3', cut=1, begin=\"[0.0:0.6,0.1]\")\n\nPc &gt;&gt; d('ff:4!3, gg:12', cut=1, p=0.25, orbit=1, shape=0.5)\n\nPb &gt;&gt; d('f!7', cut=0, p=1, orbit=2, shape=0.5)\n\nPd &gt;&gt; d('g:10', p='.5, .5, .25', orbit=2, shape=0.5, speed='2,2,1!2,4')\n\nPb &gt;&gt; None\nPc &gt;&gt; None\nPc &gt;&gt; d('bip:r*20', speed=2, \n        cut=0, p=0.25, orbit=1, shape=0.5, hcutoff='[500:15000,1000]')\n\n# --- \n\nPE &gt;&gt; d('long:3', cut=1, begin=\"[0.0:0.6,0.1]\")\nPc &gt;&gt; d('ff:4!3, gg:12', cut=1, p=0.25, orbit=1, shape=0.5)\nPb &gt;&gt; d('f!7', cut=0, p=1, orbit=2, shape=0.5)\nPd &gt;&gt; d('g:10', p='.5, .5, .25', orbit=2, shape=0.5, speed='2,2,1!2,4')\nPf &gt;&gt; d('bip:r*50', speed=2, midinote='C5,C5,G5,A5',\n        cut=1, p=0.25, orbit=1, shape=0.5)\nPg &gt;&gt; d('bip:r*50', squiz=4, speed=1, midinote='C3,C4,G3,G4,A4,A5', shape=0.5,\n        cut=1, p=0.25, orbit=1)\n\n# --- \n\nPa &gt;&gt; None\nPb &gt;&gt; None\nPc &gt;&gt; None\nPd &gt;&gt; None\n\nPE &gt;&gt; d('long:3', cut=1, begin=\"[0.0:0.6,0.1]\")\nPc &gt;&gt; d('ff:4!3, gg:12', cut=1, p=0.25, orbit=1, shape=0.5)\nPb &gt;&gt; d('f!7', cut=0, p=1, orbit=2, shape=0.5)\nPd &gt;&gt; d('g:10', p='.5, .5, .25', orbit=2, shape=0.5, speed='2,2,1!2,4')\nPf &gt;&gt; d('bip:r*50', speed=2, midinote='C5,C5,G5,G5',\n        cut=1, p=0.25, orbit=1, shape=0.5)\nPg &gt;&gt; d('bip:r*50', squiz=4, speed=1, midinote='C5@fifths', shape=0.5,\n        cut=1, p=0.25, orbit=1)\n\nPa &gt;&gt; None\nPb &gt;&gt; None\nPc &gt;&gt; None\nPd &gt;&gt; None\nPE &gt;&gt; d('long:3', cut=1, begin=\"[0.0:0.6,0.1]\", speed='2!4,4!4')\n\n\nPE &gt;&gt; d('long:3', cut=1, begin=\"[0.0:0.6,0.1]\")\nPc &gt;&gt; d('ff:4!3, gg:12', cut=1, p=0.25, orbit=1, shape=0.5)\nPb &gt;&gt; d('f!7', cut=0, p=1, orbit=2, shape=0.5)\nPd &gt;&gt; d('g:10', p='.5, .5, .25', orbit=2, shape=0.5, speed='2,2,1!2,4')\nPf &gt;&gt; d('bip:r*50', speed=2, midinote='C5,C5,G5,G5',\n        cut=1, p=0.25, orbit=1, shape=0.5)\nPg &gt;&gt; d('bip:r*50', squiz=4, speed=1, midinote='C5@fifths', shape=0.5,\n        cut=1, p=0.25, orbit=1)\n\n###################################################################\n#\u00a0\u2588\u2580\u2580\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2580\u2588\u2580\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2591\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2580#\n#\u00a0\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2584\u2588\u2003\u2591\u2588\u2591\u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003 \u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2580\u2003\u2588\u2588\u2584#\n###################################################################\n\npanic()\n\n@swim \ndef baba(p=0.5, i=0): \n    D('juppad:54, juppad:55', cutoff=2000, begin=0.1, \n      orbit=2, cut=0, legato=1.1, i=i, d=8, r=0.25)\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    D('juppad:54, juppad:55', cutoff=5000, begin=0.1, \n      orbit=2, cut=0, legato=1.1, i=i, d=8, r=0.25)\n    D('boop:r*20', shape=0.4, \n      midinote='G4|G5,Bb5,F6, G4|G5,Bb5,G6', i=i, r=0.25, d=2)\n    D('boop:r*40')\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    #\u00a0D('f', shape=0.4, i=i, d=4)\n    #\u00a0D('f:3', amp='[0:0.4,0.05]', legato='0.01~0.2', i=i)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i, d=1)\n    D('juppad:54, juppad:55', cutoff=5000, begin=0.1, \n      orbit=2, cut=0, legato=1.1, i=i, d=8, r=0.25)\n    D('.., p:6, ., .., p:3, ..', legato=0.5, shape=0.7, i=i)\n    D('bip:r*20', midinote='adisco((G|[G,G|Ab|G5])!2)', i=i, d=2)\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    D('f, f, ..', shape=0.4, i=i, d=4)\n    D('f:4', amp='[0:0.4, 0.05]', legato='0.1~0.5', i=i)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i)\n    D('juppad:54, juppad:55', cutoff=5000, begin=0.1, \n      squiz=2, orbit=2, cut=0, legato=1.1, i=i, d=8, r=0.25)\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    D('f', shape=0.4, i=i, d=4)\n    D('f:8~12', speed='4~8', amp='[0:0.4, 0.05]', legato='0.1~0.5', i=i)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i, d=1)\n    D('laz:r*20', \n            speed=\"1, 2,4\",  hcutoff='3000~6000',\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4, i=i, d=0.25)\n    D('juppad:54, juppad:55', cutoff=5000, begin=0.1, \n      squiz='0!4,2',\n      orbit=2, cut=0, legato=1.1, i=i, d=8, r=1)\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    #\u00a0D('f', shape=0.4, i=i, d=4)\n    #\u00a0D('f:3', speed=4, amp='[0:0.4, 0.05]', legato='0.1~0.5', i=i)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i)\n    D('laz:r*20', \n            speed=\"1, 2,4\",  hcutoff=6000,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4, i=i, d=1, r=0.25)\n    D('juppad:54, juppad:55', cutoff=5000, begin=0.1, \n      pan='r', speed='1|2|4', leslie=1, lesliespeed=8,\n      orbit=2, cut=0, legato=1.1, i=i, d=8, r=0.25)\n    again(baba, p=1/4, i=i+1)\n\n@swim \ndef baba(p=0.5, i=0): \n    D('f', shape=0.4, i=i, d=4)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i)\n    D('conga:r*20', speed=\"[1,2,4]/4\", hcutoff='500~1000', shape=0.4,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.5, i=i, d=1, r=0.25)\n    D('kit2:3', shape=0.5, i=i, d=8)\n    D('., kit2:10, ., kit2:9!2', shape=0.5, i=i, d=2)\n    again(baba, p=1/4, i=i+1)\n\n\n@swim \ndef baba(p=0.5, i=0): \n    D('f', shape=0.4, i=i, d=4)\n    D('.., p:5, .', legato=0.5, shape=0.7, i=i)\n    D('conga:r*20', speed=\"[1,2,4]/4\", hcutoff='500~1000', shape=0.4,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.5, i=i, d=1, r=0.25)\n    D('conga:r*20', speed=\"[1,2,4]/2\", hcutoff='2000', shape=0.4,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.5, i=i, d=2, r=0.5)\n    D('kit2:3', shape=0.5, i=i, d=8)\n    D('., kit2:10, ., kit2:9!2', shape=0.5, i=i, d=2)\n    again(baba, p=1/4, i=i+1)\n\n#\u00a0Ici on joue uniquement avec les percus et on lave les oreilles\n\n@swim \ndef baba(p=0.5, i=0): \n    D('f:3', amp='[0:0.2,0.01]', legato='0.1~0.5', i=i)\n    D('.., p:(5|10), .', legato=0.5, i=i, d=1)\n    D('m|c:[4:9]', legato=0.2, i=i, d='4!12, 3!12')\n    D('jupbass:[1:100]', # -&gt; lost into jupfx\n            cutoff=3000, # -&gt;\n            shape=0.5,\n            pan='sin($/40)', #\u00a0-&gt; X\n            legato=0.2, #\u00a0-&gt;\n            begin='r', i=i)\n    again(baba, p=1/4, i=i+1)\n\n\n@swim \ndef baba(p=0.5, i=0): \n    D('a', shape=0.7, i=i, d=4)\n    D('c', shape=0.7, i=i, d=3)\n    D('d:7', orbit=3, room=0.2, size=0.8, dry=0.2, i=i, d=8)\n    D('hhh:3', amp='[0:0.2, 0.01]', legato='0.1~0.5', i=i)\n    D('f:3', amp='[0:0.2,0.01]', legato='0.1~0.5', i=i)\n    D('.., p:(5|10), .', legato=0.5, i=i, d=1)\n    D('m|c:[4:9]', legato=0.2, i=i, d='4!12, 3!12')\n    D('jupbass:[1:100]', # -&gt; lost into jupfx\n            cutoff=3000, # -&gt;\n            shape=0.5,\n            pan='sin($/40)', #\u00a0-&gt; X\n            legato=0.2, #\u00a0-&gt;\n            begin='r', i=i)\n    again(baba, p=1/4, i=i+1)\n\npanic()\nD('girls:2')\n\n\n#####################################################################\n#\u00a0\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2588\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003 \u2003\u2588\u2591\u2591\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2584\u2591\u2588\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2588#\n#\u00a0\u2588\u2584\u2584\u2003\u2588\u2584\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2584\u2588\u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003 \u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2591\u2580\u2588\u2003\u2591\u2588\u2591\u2003\u2588\u2584\u2588#\n#####################################################################\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"[G6]-[0:12]\", chan=2, vel=120, i=i, r=0.25/2)\n    CC(**jupcc['cutoff'], value=100)\n    CC(**jupcc['decay'], value=80)\n    N(\"[G6]-[0:12]\", chan=1, vel=120, i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"[G6|D5]-[0:12]\", chan=2, vel=120, i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    CC(**padcc['timbre'], value='50~120')\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"[G6]-[0:12]\", chan=2, vel=120, i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"[G6]-[0:12]\", chan=2, vel=120, i=i, r=0.25/2)\n    N(\"[G7]-[0:12]\", chan=2, vel=120, i=i, r=0.25/1)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    CC(**padcc['timbre'], value='(90~100)-10') # go down\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4) # middle voice\n    N(\"Eb4, F4, G4\", chan=2, vel='50~100', i=i, r=0.25/2)\n    N(\"pal(C|C5|C6@minor)\", d=2, \n      chan=2, vel='50~100', i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    CC(**padcc['timbre'], value='(70~110)') # go down\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"Eb4, F4, G4\", chan=2, vel='50~100', i=i, r=0.25/2)\n    N(\"pal(C|C5|C6@minor)\", d=2, \n      chan=2, vel='50~100', i=i, r=0.25/2)\n    CC(**basscc['timbre'], value='r*127')\n    CC(**basscc['fx'], value='80')\n    CC(**basscc['cutoff'], value='[1:127,20]')\n    N(\"disco(pal(C3|C5|C4@minor))\", d=1, \n      chan=0, vel='(50~100)-30', i=i, r=0.25)\n    again(structure, p=0.5, i=i+1)\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"Eb4, F4, G4\", chan=2, vel='50~100', i=i, r=0.25/2)\n    CC(**basscc['cutoff'], value=127, i=i)\n    N(\"pal(C|C5|C6@minor)\", d=2, \n      chan=2, vel='50~100', i=i, r=0.25/2)\n    N(\"disco(pal(C3|C5|C4@minor))\", d=1, \n      chan=0, vel='50~100', i=i, r=0.25)\n    D('ff', d='3, 3, 2', i=i, cutoff=2500)\n    D('s, u, n, d, o, w, n', d='3, 3, 2', i=i, p=0.5)\n    D('kk:2~8, bb:1~9', legato=0.2, d='2, 3, 1!4', i=i, \n      speed='0.25, 0.5!5, 1!8')\n    again(structure, p=0.5, i=i+1)\n\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3\", chan=2, vel=120, i=i)\n    N(\"G5,G4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"Eb4, F4, G4\", chan=2, vel='50~100', i=i, r=0.25/2)\n    CC(**basscc[pick('timbre', 'cutoff')], value='20~120', i=i)\n    CC(**basscc[pick('time')], value='20', i=i)\n    N(\"pal(C|C5|C6@minor)\", d=2, \n      chan=2, vel='50~100', i=i, r=0.25/2)\n    N(\"disco(pal(C4|C6|C5@minor))\", d=1, \n      chan=0, vel='50~100', i=i, r=0.25)\n    D('ff', d='3, 3, 2', i=i, cutoff=2500)\n    D('s, u, n, d, o, w, n', d='3, 3, 2', i=i, p=0.5)\n    D('kk:2~8, bb:1~9', legato=0.2, d='2, 3, 1!4', i=i, \n      speed='0.25, 0.5!5, 1!8')\n    again(structure, p=0.5, i=i+1)\n\nPb &gt;&gt; d('g,o,o,d,b,y,e,t,r,a,c,k', d='1', p=0.5, orbit=2, cut=0)\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"C2,C3, F2, F3\", chan=2, vel=120, i=i)\n    N(\"G5,G4, Ab5, Ab4\", chan=2, vel=120, i=i, r=0.25/4)\n    N(\"Eb4, F4, G4, Eb4, Eb5, Eb4, Eb5\", chan=2, vel='50~100', i=i, r=0.25/2)\n    N(\"pal(F|F5|G6@minor)\", d=2, \n      chan=2, vel='50~100', i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n\nPc &gt;&gt; d('s, u, n, d, o, w, n', d='3, 3, 2', p='0.25!16, 0.5!4', orbit=3, cut=1, speed='2,4')\n\n@swim\ndef structure(p=0.5, i=0):\n    N(\"pal(F|F4|G3@minor)\", d=2, \n      chan=2, vel='100~120', i=i, r=0.25/2)\n    N(\"pal(F|F5|G6@minor)\", d=2, \n      chan=2, vel='100~120', i=i, r=0.25/2)\n    again(structure, p=0.5, i=i+1)\n\n############################################################\n#\u00a0IDEE POUR UN TROISIEME MORCEAU\n############################################################\n\nsilence(structure)\nPc &gt;&gt; None\n@swim(snap=0)\ndef baba(p=0.5, i=0):\n    D('ff', i=i, d=4, shape=0.5)\n    D('s:[1:20]', i=i, d=3, speed='1|1|2|4', legato=0.4, pan='r')\n    D('l:[1:20]', i=i, d=2, speed='1|1|2|4', legato=0.2, pan='r')\n    D('jupfx:[0:20]', midinote='rev(C3, Eb3, G, Bb4|Bb5)',\n      room=0.5, size=0.21, dry=0.12, orbit=3, amp=0.25,\n      i=i, d=2, speed='1|1|2|4', legato=0.08, pan='r')\n    again(baba, p=0.25, i=i+1)\n\n\nPb &gt;&gt; None\n@swim(snap=0)\ndef baba(p=0.5, i=0):\n    D('long', orbit=3, cut=1, begin='r', i=i)\n    D('ff', i=i, d=4)\n    D('kit2:[1,20]', legato=0.1, i=i, d='3!32, 4!16', speed='1,2')\n    again(baba, p=0.25, i=i+1)\n\n\n@swim(snap=0)\ndef baba(p=0.5, i=0):\n    D('ulh:60', orbit=3, cut=1, begin='r', i=i)\n    D('ff', i=i, d=4)\n    D('ff:9', i=i, d=8, orbit=2)\n    if sometimes():\n        D('ff:r*40', i=i, d=2, orbit=2, legato=0.1)\n    else:\n        D('bb|gg:r*40', speed='&lt;1,2&gt;,4', i=i, d=1, orbit=2, legato='0.01~0.2')\n    D('kit2:[1,20]', legato=0.1, i=i, d='3!32, 4!16', speed='1,2')\n    again(baba, p=0.25, i=i+1)\n# Change p to 2, I don't know why but it is working\n\npanic()\n\n\n##################################################################\n#\u00a0\u2588\u2591\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2584\u2580\u2588\u2003\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2003\u2588\u2580\u2003\u2588\u2580\u2580#\n#\u00a0\u2580\u2584\u2580\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2588\u2584\u2003 \u2003\u2588\u2584\u2580\u2003\u2588\u2588\u2584\u2003 \u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2588\u2584\u2003\u2584\u2588\u2003\u2584\u2588\u2003\u2588\u2588\u2584#\n##################################################################\n\nPa &gt;&gt; d('juppad:12|51', begin='r', amp=0.20, speed='1', legato=4,\n        room=0.5, orbit=3, dry=0.2, size=0.8,\n        midinote='Do,Fa,Ab3,Eb4', cutoff=4000)\n\nPb &gt;&gt; d('bip:r*50', begin='0,0.2,0.5', amp=0.45, speed='2', \n        room=0.5, orbit=3, dry=0.2, size=0.8,\n        legato=0.18, midinote='adisco(Do,Fa,Ab3,Eb4)', cutoff=8000, p=0.5)\n\nPd &gt;&gt; d('ff:4', shape=0.5, speed=1, p=0.5, cutoff='[200:2000,100]', amp=0.5)\n\n\nPa &gt;&gt; d('juppad:12|51', begin='r', amp=0.20, speed='1', legato=4,\n        room=0.5, orbit=3, dry=0.2, size=0.8,\n        midinote='Do,Fa,Ab3,Eb4', cutoff=4000)\nPb &gt;&gt; d('bip:r*50', begin='0,0.2,0.5', amp=0.45, speed='2', \n        room=0.5, orbit=3, dry=0.2, size=0.8,\n        legato=0.18, midinote='adisco(Do,Fa,Ab3,Eb4)', cutoff=8000, p=0.5)\nPc &gt;&gt; d('ff', shape=0.5, speed=1, p=1, cutoff='[2000:5000,100]')\nPc &gt;&gt; d('nn:4~8', legato=0.2, \n        shape=0.5, speed='1,2', p=0.5, cutoff='[2000:5000,100]')\nPe &gt;&gt; d('ff', shape=0.5, speed=1, p=2, cutoff='[200:2000,100]')\n\nPc &gt;&gt; d('[f,i,s,h,e,s]:[1:20]', shape=0.5, p=0.5, legato=0.02, pan='r')\nPd &gt;&gt; d('euclid([gg:r*20]!8, 5,8)', shape=0.5, speed=4,\n        p=0.5, cutoff='5000', resonance='0.1,0.2')\n\nPb &gt;&gt; None #\u00a0d('j, a, j, a', orbit=2, p='1,0.5')\nPc &gt;&gt; None #\u00a0d('f, l, o, w, e, e:r*4', shape=0.5)\nPd &gt;&gt; None #\u00a0d('bb:5~6', p='0.25, 0.125', legato=0.05)\n\npanic()\n</code></pre>"},{"location":"documentation/demos/solstice/#ralt144mi","title":"Ralt144MI","text":""},{"location":"documentation/demos/solstice/#description_1","title":"Description","text":"<p>Playing with Sardine with all my gear and visual setup. I'm controlling a lot of synths through MIDI: A Yamaha Electone c35, Marimba MIDI Controller, Korg MS2000R, Yamaha TX7, Behringer Model D, Roland PMA-5, Alesis MIDIVERB 3, Marantz CP130, a circuit bent Panasonic Ave5, bespoke scuba-diving mask repurposed as a microphone, a very special livecodinD keyboard, a shitty Behringer mixing console, lots of audio and composite cables, three webcams and an analog video to digital converter. </p>"},{"location":"documentation/demos/solstice/#performance_1","title":"Performance","text":""},{"location":"documentation/demos/solstice/#source-code_1","title":"Source code","text":"<pre><code>#-------------------------------------------------------------\n#------ooooo  oooooo oo   oooooo oo oo     oo     o   o oo----\n#------oo  oo oo  oo oo     oo   oo oo oo  oo oo  oo oo oo----\n#------ooooo  oooooo oo     oo   oo oooooo oooooo o o o oo----\n#------oo  oo oo  oo oooooo oo   oo    oo     oo  o   o oo----\n#-------------------------------------------------------------\n#-------------------------------------------------------------\n#----------------------------------------- &lt;^[[[&gt;&lt; ------_____\n#------------------------------------------------------_/-----\n#Salut moi c'est Ralt144MI----------___---------------/-_-----\n#----------------------------------[ooo]--------(---3)&gt;[#]----\n#-----------------------------------(-(-------)-)-(--|--------\n#------------------------------------)-)----_-(-(-)-|---------\n#------------------------------------------/-\\)-)-(/----------\n\n\ntx7_params = {\n        \"Algorithme\": lambda x: midi._sysex([67,16,1,6,(int(x)%31)+1]),\n        \"Feedback\": lambda x: midi._sysex([67,16,1,7,(int(x)%7)+1]),\n        #\u00a0FreqCourse\n        \"FreqCourseOp1\": lambda x: midi._sysex([67,16,0,123,int(x)%32]),\n        \"FreqCourseOp2\": lambda x: midi._sysex([67,16,0,102,int(x)%32]),\n        \"FreqCourseOp3\": lambda x: midi._sysex([67,16,0,60, int(x)%32]),\n        \"FreqCourseOp4\": lambda x: midi._sysex([67,16,0,60, int(x)%32]),\n        \"FreqCourseOp5\": lambda x: midi._sysex([67,16,0,39, int(x)%32]),\n        \"FreqCourseOp6\": lambda x: midi._sysex([67,16,0,18, int(x)%32]),\n        #\u00a0FreqFine\n        \"FreqFineOp1\": lambda x: midi._sysex([67,16,0,124,int(x)%127]),\n        \"FreqFineOp2\": lambda x: midi._sysex([67,16,0,103,int(x)%127]),\n        \"FreqFineOp3\": lambda x: midi._sysex([67,16,0,82, int(x)%127]),\n        \"FreqFineOp4\": lambda x: midi._sysex([67,16,0,61, int(x)%127]),\n        \"FreqFineOp5\": lambda x: midi._sysex([67,16,0,40, int(x)%127]),\n        \"FreqFineOp6\": lambda x: midi._sysex([67,16,0,19, int(x)%127]),\n        #\u00a0Detune\n        \"DetuneOp1\": lambda x: midi._sysex([67,16,0,125,int(x)%14]),\n        \"DetuneOp2\": lambda x: midi._sysex([67,16,0,104,int(x)%14]),\n        \"DetuneOp3\": lambda x: midi._sysex([67,16,0,83,int(x)%14]),\n        \"DetuneOp4\": lambda x: midi._sysex([67,16,0,62,int(x)%14]),\n        \"DetuneOp5\": lambda x: midi._sysex([67,16,0,41,int(x)%14]),\n        \"DetuneOp6\": lambda x: midi._sysex([67,16,0,20,int(x)%14]),\n        #\u00a0Level\n        \"LevelOp1\" : lambda x: midi._sysex([67,16,0,121,int(x)%99]),\n        \"LevelOp2\" : lambda x: midi._sysex([67,16,0,100,int(x)%99]),\n        \"LevelOp3\" : lambda x: midi._sysex([67,16,0,79,int(x)%99]),\n        \"LevelOp4\" : lambda x: midi._sysex([67,16,0,58,int(x)%99]),\n        \"LevelOp5\" : lambda x: midi._sysex([67,16,0,37,int(x)%99]),\n        \"LevelOp6\" : lambda x: midi._sysex([67,16,0,16,int(x)%99]),\n        #\u00a0LFO\n        \"LFOWave\":  lambda x: midi._sysex([67,16,1,14,int(x)%6]),\n        \"LFOSpeed\": lambda x: midi._sysex([67,16,1,9,int(x)%99]),\n        \"LFODelay\": lambda x: midi._sysex([67,16,1,10,int(x)%99]),\n        \"LFOPMD\":   lambda x: midi._sysex([67,16,1,11,int(x)%99]),\n        \"LFOAMD\":   lambda x: midi._sysex([67,16,1,12,int(x)%99]),\n        \"LFOSync\":  lambda x: midi._sysex([67,16,1,12,int(x)%1]),\n        \"LFOPMS\":   lambda x: midi._sysex([67,16,1,15,int(x)%5]),\n        #\u00a0Portamento\n        \"Retain/Follow\" : lambda x: midi._sysex([67,16,8,67,int(x)%1]),\n        \"GlissandoOffOn\"          : lambda x: midi._sysex([67,16,8,68,int(x)%1]),\n        \"Time\"                    : lambda x: midi._sysex([67,16,8,69,int(x)%99]),\n        \"Poly/Mono\"               : lambda x: midi._sysex([67,16,8,64,int(x)%1]),\n}\n\n\ndef tx7(algo, pattern: Union[int, str], iterator=None, \n        div:int = 1, rate:int = 1) -&gt; midi._sysex:\n    \"\"\"\n    Custom function for R\u00e9mi Georges. Allows the patterning of a Yamaha TX7.\n    A pattern can be written for each and every declared Sysex parameter.\n    \"\"\"\n    if isinstance(pattern, int):\n        return tx7_params[algo](pattern)\n    elif isinstance(pattern, str):\n        return tx7_params[algo](int(Pat(pattern, i=iterator, div=div, rate=rate)))\n\ndef E(step: int, maximum: int, index: int) -&gt; bool:\n    pattern = euclid(step, maximum)\n    return True if pattern[index % len(pattern)] == 1 else False\n\ndef print_param(): \n    print(tx7_params.keys())\n\ndef print_scales():\n    print(qualifiers.keys())\n\nPp &gt;&gt; tx7(\"Algorithme\", 12)\n\n\n####################################################\n####################################################\n####################################################\nHI Im Ralt144MI, :)\n################################################################\n################################################################\n################################################################\n################################################################\nsi soucis\ndirt ahead 0.3 ?\n\ndirt._ahead_amount = 0.20\n\nsilence()\n\nPo &gt;&gt; d(\"leCASIO:[0,2,1,2,0,2,1,3]\", #-8 #^[0~4]\n        speed =\"[1, 2, 3, 4, 5]/[2~3]\",\n        p=\"0.50!4\",\n        gain = 1.1,\n            #p = \"[1:8]\", #KIller\n            #span = 8, #Killer\n        span = 2,\n        legato = 1)\n\nPo &gt;&gt; None\n\n#MODEL ACID BASS RIGHT EAR\n\n\n@swim\ndef labass(p=0.5, i=0):\n    N(\n            \"bass(F3@maj7)^[1~2]\",\n            #\"adisco(F3@maj7)^[1~2]\",\n            #\"disco(F3@maj7)^[1~2]\",\n            #\"pal(F3@maj7)^[2~3]\",\n            vel = '[45~85]',\n            dur = 0.05,\n            chan = 2,\n            d=\"0.5!3,0.25!2\",\n            i=i,\n            r=0.25/2\n            )\n    again(labass,p=0.5,i=i+1)\n\n\n#GRUSIN  ENSUIT AUG\nPn &gt;&gt; n(note= \"euclid(&lt;F2@aug&gt;!8,5,8)\",\n        vel=70,\n        p=0.5,\n        span=1)\n\nPn &gt;&gt; None\n\n#mute CASIOTIME\n\nPo &gt;&gt; None\n\n################MEDLERS###############\n@die\ndef tempomedler(p=0.5, i = 0):\n    if clock.tempo &lt; 150 :\n        clock.tempo = clock.tempo*1.02\n    else :\n        clock.tempo = 60\n    again(tempomedler, p=0.5, i=i+1)\n\n@die\ndef algomedler(p=0.5, i=0):\n    tx7(\"Algorithme\",i)\n    again(algomedler, p=0.5, i=i+1)\n\n@die\ndef bouncer(p=0.5, i=0):\n    tx7('Retain/Follow', 1,i)\n    tx7('GlissandoOffOn', 1,i)\n    tx7('Time', 40,i) #descendre pour plus de fun\n    again(bouncer, p=0.5, i=i+1)\n\n\nPi &gt;&gt; None\nPo &gt;&gt; None\n\nPn &gt;&gt; None\n\nsilence()\n\nPb &gt;&gt; d(\"morgan:0\", begin =\"r*0.8\",\n        legato = 4, p = \"1,0.5\", span = 4,\n        bandf = 300, #300\n        ) \n\nPs &gt;&gt; d(\"morgan:0\", \n        scram = \"r\",\n        legato = 4, begin = 0.425, \n        room= .4, cutoff = 4500, shape = 0.25,\n        p=32\n        #p=\"8!2,16!4\"\n        )\n\nPf &gt;&gt; d(\".,morgan:1\", \n        scram = \"r\",\n        legato = 4.5, begin = 0.430, \n        cutoff = 4500, hcutoff = 250,\n        shape = 0.45,\n        p=9\n        #p=\"4.5\"\n        )\n\nPl &gt;&gt; d(\"long:[24~59]\", p=\"2,1\",\n        legato = 0.5, pan = \"r\",\n        scram = 0.2, gain = 0.9,\n        room = .4\n        )\n\n#reduire les cutoff de Morgan\nPs &gt;&gt; None\nPf &gt;&gt; None\n\n\n\nPi &gt;&gt; d(\"long:42\", p=4, \n        legato =2, gain = 0.8,\n        speed = \"2,1,0.5,0.25\",\n        room = .6\n        )\n\nPL &gt;&gt; d(\"long:45\", \n        room = .4,\n        p = 8,  \n        legato =1)\n\nPn &gt;&gt; None\n\nPM &gt;&gt; d(\"long:40\", p=0.25,\n        span = 2, #1\n        legato = 0.5)\n\nclock.tempo = 135\n\nPl &gt;&gt; None\nPL &gt;&gt; None\nPb &gt;&gt; None\n\nsilence()\n\ndirt._ahead_amount = 0.20\n\n\nPk &gt;&gt; d(\"leKICK:2\",\n        p=\"0.5!4\",\n        span=4\n        )\n\nPk &gt;&gt; None\n\n#                  [x|.]       .5 \nPs &gt;&gt; d('.,laSNARE:6', span = 1,gain= 0.9, p=1)\n\nPh &gt;&gt; d(\"leHIHAT:$%5\", cutoff = 6000, legato = 0.1, p=0.25)\n\n#C15 DISCO BASS\nPn &gt;&gt; n(note=\"pal(disco(E4@min7))^[1~3]\",\n        p=\"1,1,0.5,0.5,0.25,0.25,0.25,0.25\",\n        span = 4, dur = 0.1,\n        chan=\"1\"\n        )\n\nPn &gt;&gt; None\n#SYNELECPNO CMB18\nPt &gt;&gt; n(note=\"pal(adisco(E4@min7)),&lt;E4@min7&gt;\",\n        p = \"[1!3,0.5!2]\",\n        span = 2,\n        chan=0, dur = 0.1\n        )\n\nPt &gt;&gt; None\n\n\nsilence()\n\nPn &gt;&gt; d(\"laPERC:10!2, laSNARE:12, laPERC:2\",   \n        p = \"1,0.5\",\n        shape= 0.4 ,legato = 1, \n        span = 2, \n        #speed = \"0.84,0.13,1,1\" #\"0.84,0.43,1,1\"\n        )\n\n#mets le vocode\n\nPh &gt;&gt; d(\"leHIHAT:6\", p=0.25, pan = \"r\",\n        gain = .9)\n\nD(\"ralt144mi,.!7\", accelerate = \"1\",\n        gain = 1.2,enhance = .2, legato = 2)\n\nsilence()\n\nPi &gt;&gt; None\n\nPi &gt;&gt; n(note = \"[&lt;F'@maj&gt;!2,&lt;C'@maj&gt;!8]\", p=0.5,\n        span= 2,\n        chan = 1)\n\n\nPk &gt;&gt; d(\"leKICK:2!4\",\n        shape =0.4,\n        legato = 0.2,\n        #cutoff = 1000,\n        resonance = 0.2,\n        #p=8 #8\n        p = 8, span =1\n        )\n\nPc &gt;&gt; d(#\"[.,.,laSNARE:4!2]!4\",\n        \"[.,.,laSNARE:4!2]!3,[.,.,laSNARE:[r*16]!2]\",\n        p=1, accelerate= \"0!12,0.5,0.75,0.80,1\",\n        span = 1)\n\n\nPc &gt;&gt; None\n\n\n\nPi &gt;&gt; None\n\n\n\nsilence()\n###DOIT BIZAR\nPi &gt;&gt; d(\"son:[1]\",\n        speed = \"euclid(([[1,2,3,4,5,6,7,8]/7]^[0.5~-1]),7,1)\",\n        shape = 0.5, gain =0.8,\n        p=\"(0.125*r)!2\", pan = \"[1:7]\",\n        span = 1, \n        accelerate =1,\n        legato=0.7)\n\nclock.tempo = 152\n\n#VIBRATIME ORGANTIME VIDEOTIME\n\nPu &gt;&gt; n(\"euclid(&lt;C3,E3,C4,E4&gt;!8,5,8)\",\n        p = \"0.25\",\n        vel = 65, span  = 0.5,\n        chan = \"0\", dur = 0.25)\n\nPi &gt;&gt; None\n\nn(\"apal(disco(F2@maj7))^[(1)~5]\",\n        vel=65,p=\"0.5!7,0.25!2\",\n        span = 4,\n        #chan = \"15,0,1,2\",\n        chan=\"0\",\n        dur = 0.15)\n\nPa &gt;&gt; None\n\nPa &gt;&gt; n(\"euclid(&lt;E7&gt;!8,3,5,2)\",\n        p = \"0.125\",\n        vel = 85, span  = 0.5,\n        chan = \"0\", dur = 0.25)\n\nsilence()\n\n\nPk &gt;&gt; d(\"leKICK:2!4\",\n        shape =0.4,\n        legato = 0.2,\n        #cutoff = 1000,\n        resonance = 0.2,\n        #p=8 #8\n        p = 8, span =1\n        )\n\nPk &gt;&gt; None\n\nPk &gt;&gt; d(\"leKICK:2!4\",\n        shape =0.4,\n        legato = 0.2,\n        #cutoff = 1000,\n        resonance = 0.2,\n        #p=8 #8\n        p = 8, span =1\n        )\n</code></pre>"},{"location":"documentation/demos/zorba_in_belleville/","title":"Zorba in Belleville (11/11/2022)","text":""},{"location":"documentation/demos/zorba_in_belleville/#description","title":"Description","text":"<p>This code is taken from an algorave that took place at the Zorba (Belleville, Paris) in early november (2022). It is a very straightforward dance oriented performance that plays a lot with simple audio sample manipulations. As stated in the opening banner, this performance was meant to test the stability of Sardine after introducing new features and control mechanisms. Everything lives in the <code>baba</code> function, meaning that you only need to keep track one function during the whole performance.</p> <p>Sounds are extracted from a very heavy sound library, lazy-loaded when needed. This is how I like to make music, extracting a lof of raw audio files from my hard disk :) </p>"},{"location":"documentation/demos/zorba_in_belleville/#performance","title":"Performance","text":""},{"location":"documentation/demos/zorba_in_belleville/#source-code","title":"Source code","text":"<pre><code>#\u00a0\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n#\u00a0\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n#\u00a0\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2580\u2591\u2591\u2588\u2591\u2591\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2580\u2591\u2591\u2588\n#\u00a0\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n#\u00a0\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n# \u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2003\u2588\u2591\u2588\u2003 \u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2003\u2580\u2588\u2580\u2003 \u2003\u2588\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2003\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003 \u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2588\u2003\u2584\u2580\u2588\u2003 \u2003\u2588\u2580\u2588\u2003\u2591\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2584\u2588\n# \u2588\u2584\u2584\u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2588\u2003\u2584\u2588\u2003\u2588\u2580\u2588\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003\u2584\u2588\u2003\u2591\u2588\u2591\u2003 \u2003\u2580\u2584\u2580\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2584\u2588\u2003\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2591\u2580\u2588\u2003 \u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003 \u2003\u2588\u2584\u2588\u2003\u2584\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2591\u2588\n\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#\u00a0@@@@@@@@@@@@@@@@@....,.....,..,,,,,,,,,,,,,*(&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#\u00a0@@@@@@@@@@@@&amp;.,,,,/*//////////**,*.*,*..,***,,,,**********/(%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#\u00a0@@@@@@@@@@(..,*//**/***,,,,,(%((%%,/,%%%%(****,,.,,********,,,*/*/*****///(%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#\u00a0@@@@@@@@@ .,(/////*,,,,,,,/%%%(*.((,/%%(/.((/%/%//,//,/#%(*****************,,*****///////(&amp;@@@@@@@@@@@@@@@@@@@@@@@@\n#\u00a0@@@@@@@@ ./(//*,*,,**,,,,,,,,,,*,*,,**,*/#%%%%%,*#(*(,,(*%(,(*,/*(%(#,/%%/****************,*//*//****/&amp;@@@@@@@@@@@@\n#\u00a0@@@@@@@ .(##***,*,,,,,,,,,,,,,,,,,,,,,*,*,,****,*,****,*(%%%/##/(%,./*//(%(,(%(./((/,*%**************.,****%@@@@@@@\n#\u00a0@@@@@@.*///*********,*,**,,*,,,,,,,%%%%%((#%%%%%,,(%%%%%%%%%%%##%%#,,**/%&amp;%%(/,&amp;(,((/#%%%*,,,,,,,,,,,,,,,..***(@@@@\n#\u00a0@@@@@%/**/*****,,***,,,,,,,,,,,%%%%##/##%%%%%%%%%%%#((**###%%%%####%#####%#(,,********/#%***,,,,,,,,,,,,,,,,.,**/@@\n#\u00a0@@@@@,/**,**************,,,,,*%%%/.((*%*/,/((*#./*. .. ..*,/(##/*,,###*/#/(#%%%#(#,*,#%%%%%%%%%/,,*,,,,,,,,,,..***@\n#\u00a0@@@@ ,/**********,*******,,,,*,% #*,,//#%(.#*,,**#,(##(/**##%##%##/,/#%(//(//,.(#(#%#((,#%%##*##%%%,,,,,,,,,,,. ***\n#\u00a0@@@ .,///*******,*,*,**,,**,,*,,*./ /((..((/(%,,/#(/(/*,*#,.*#/###%%##/**/(/(/.(//%%%%%/###%##,,,%%%***,,,,,,.. .**\n#\u00a0@@@...////*************,***,,,/(((((*.(., #*(  *(..#/(/*(///(##(#(####(/#(*##%(/((%%%%%%%/((#%%%%%%%#***,,,**,   ,*\n#\u00a0@@,..../(//********,,***,,,***(((((( ((*((,,##,,,/###(//*(##((((((#(,       ,(%%#%%,.,(####%###,/%&amp;******,*,*,   .(\n#\u00a0@@*/.,..*(*/***********,*,,*,,,,,**(.((.(((((((((**,(%%%%%%%%###########(*//(#((//*/. *,/(#%##,.,******,**,*,,   ,%\n#\u00a0@@,/*,*.,..(***************,,*,,,*,#*&amp;(**(,* ((  .(((((..((((/********,,*,****/((((((,***********************,   *(\n#\u00a0@/,*/**,,*,,...,*,,*,*,..,,*,,,,,,*,*,**,(#&amp;(,*,/((./(( (( /(. ...(((*../( (#((((((((((**********************  .*#,\n#\u00a0@, *//********/.,,.........,,,,,,,,,,*,,..,,,**,,**##(%&amp;#*****/((#(((((((((((/*,***************************,...**%#\n#\u00a0@% ,*/******//////////**/****,.,,.........,,**/*,,,,,,,,,,,*,*******,************************************,.. **,#,@\n#\u00a0@@* .********/*///////////*/////////*********,,,,,,***//*//////***,*,,,,,,****************************,... ,***/#/@\n#\u00a0@@@#/..********///////////**/*,*,/#.//////////////**********,,.,,**********//*,,,,,,,.,***********,.....,*/*,*(#(&amp;@\n#\u00a0@@@@@&amp;(*,,******///////./,//**/.**//////,/***,/#,,//**,/.////////******/***,,..,,*,...,,**/*,,**,*//*/*****/((#%*@@\n#\u00a0@@@@@@@@%/(/,,,***///////*,,**/**////,**/*/,,**////**///***./*//.*/////////////*******/*,,******,,*//#/(//(((##*%@@\n#\u00a0@@@@@@@@@@@@@((/(((((/*,,,**//****///**,*//****///***.*//**////***////*(%%##%%/&amp;&amp;&amp;///////////////(((((((((((###*@@@\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@&amp;#/(#####(((//*,,,,**/***//******,,***///**./*/**%%&amp;&amp;&amp;###((&amp;&amp;%**//////////(((((((((((((/*@@@@\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;#/(####((((/**,,,,**/////****////****/%###%/%&amp;***////////(((((((((((((/,(@@@@@\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;#/#####(((/(/*,,,,***///****///****/////////(((((((((/**(&amp;@@@@@@\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;(/#####(((((/*,,,******///////((((//**#(%@@@@@@@@@\n#\u00a0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;((#####((((#%&amp;%%##%%#%@@@@@@@@@@@@@@\n\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n#\n#\u00a0\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2003 \u2003\u2580\u2588\u2580\u2003\u2588\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2588\u2003\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2591\u2588\u2591\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2580\u2003\u2580\u2588\u2003 \u2003\u2588  \u2588  \u2588\n#\u00a0\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2580\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2588\u2584\u2003 \u2003\u2580\u2584\u2580\u2584\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2588\u2584\u2003\u2588\u2584\u2003 \u2003\u2584  \u2584  \u2584\n#\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n# \u2588                                                                            \u2588\n# \u2588  \u2588\u2003 \u2003\u2584\u2584\u2003 \u2003\u2588\u2580\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003 \u2003\u2588\u2580\u2003\u2584\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2003 \u2003\u2588\u2580\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2580       \u2588\n# \u2588  \u2588\u2003 \u2003\u2591\u2591\u2003 \u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003 \u2003\u2584\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2584\u2588\u2003 \u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2588\u2584       \u2588\n# \u2588                                                                            \u2588\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n@swim \ndef baba(d=0.5, i=0): \n    S('juppad:3, juppad:4', cutoff=5000, begin=0.1, orbit=2, cut=0, legato=1.1).out(i, 8, 0.25)\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('juppad:3, juppad:4', cutoff=5000, begin=0.1, orbit=2, cut=0, legato=1.1).out(i, 8, 0.25) #\u00a0up\n    # S('bip:r*20', shape=0.4, midinote='quant([0,3,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    S('boop:r*40').out()\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('f', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    #\u00a0S('hhh:3', amp='[0:0.4,0.05]', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    # S('.., p:6, ., .., p:3, ..', legato=0.5, shape=0.7).out(i, 1)\n    S('juppad:3, juppad:4', begin=0.1, orbit=2, cut=0, legato=1.1).out(i, 8, 0.25)\n    #\u00a0S('bip:r*20', midinote='adisco((C|[C,F|Ab])!2)').out(i, 2) # petit surplus harmonique\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('f, f, ..', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    S('hhh:3', amp='[0:0.4, 0.05]', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('juppad:3, juppad:4', begin=0.1, orbit=2, cut=0, \n            legato=1.1, speed='1', \n            crush=4).out(i, 8, 0.25) # -&gt; ici il y a de la r\u00e9duction\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('f', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    S('hhh:3', amp='[0:0.4, 0.05]', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('laz:r*20', \n            speed=\"1, 2,4\",  hcutoff=6000,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    S('juppad:3, juppad:4', begin=0.1, orbit=2, cut=0, \n            legato=1.1, speed='1, 2', \n            crush=4).out(i, 8, 0.25) # -&gt; ici il y a de la r\u00e9duction\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('f', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    S('hhh:3', amp='[0:0.4, 0.05]', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('laz:r*20', \n            speed=\"1, 2,4\",  hcutoff=6000,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    S('juppad:3, juppad:4', begin=0.1, orbit=2, cut=0, \n            pan='r',\n            legato=1.1, speed='1|2|4', leslie=1, lesliespeed=8,\n            crush=12).out(i, 8, 0.25) # -&gt; ici il y a de la r\u00e9duction\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('., f', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    #\u00a0S('juppad:3, juppad:4', orbit=2, cut=0, legato=1.1).out(i, 8, 0.25)\n    S('laz:r*20', \n            speed=\"1, 2,4\",  hcutoff=3000, legato=1,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    S('juppad:3, juppad:4', \n            speed=0.75, squiz=2, \n            orbit=2, cut=0, \n            legato=1.1).out(i, 8, 0.25)\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('f', shape=0.7).out(i, 4) \n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('conga:r*20', speed=\"[1,2,4]/4\", hcutoff=2000, shape=0.7,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    S('juppad:3, juppad:4', \n            speed=0.75, squiz=2, \n            orbit=2, cut=0, \n            legato=1.1).out(i, 8, 0.25)\n    S('kit2:3', shape=0.5).out(i, 8)\n    S('., kit2:10, ., kit2:9!2', shape=0.5).out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('f', shape=0.7).out(i, 4) \n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('conga:r*20', speed=\"[1,2,4]/4\", hcutoff=2000, shape=0.7,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    S('conga:r*20', speed=\"[1,2,2]/2\", hcutoff=1000, shape=0.7,\n              room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.5)\n    # S('juppad:3, juppad:4', #\u00a0commenter ce bloc\n    #         speed=0.75, squiz=2, \n    #         orbit=2, cut=0, \n    #         legato=1.1).out(i, 8, 0.25)\n    S('kit2:3', shape=0.5).out(i, 8)\n    S('., kit2:10, ., kit2:9!2', shape=0.5).out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('f', shape=0.7).out(i, 4)\n    S('.., p:5, .', legato=0.5, shape=0.7).out(i, 1)\n    S('conga:r*20', speed=\"[1,2,4]/4\", hcutoff=2000, shape=0.7,\n            room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    # S('euclid(conga:r*20, 12,16)', speed=\"[1,2,4]/2\", hcutoff=1000, shape=0.7,\n    #         room=0.5, size=0.2, dry=0.1, orbit=3, amp=0.4).out(i, 1, 0.25)\n    # S('juppad:3, juppad:4', #\u00a0commenter ce bloc\n    #         speed=0.75, squiz=2, \n    #         orbit=2, cut=0, \n    #         legato=1.1).out(i, 8, 0.25)\n    S('kit2:3', shape=0.5).out(i, 8)\n    S('., kit2:10, ., kit2:9!2', shape=0.5).out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n# Remonter \u00e0 la ligne 167 pour plus de fun\n\n#############################################################################\n##\u00a0ICI RUPTURE VERS L'INCLUSION DES FOUND SOUNDS\n#############################################################################\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('f', shape=0.7, cutoff=100).out(i, 8)\n    S('hhh:3', amp='[0:0.2,0.01]', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:(5|10), .', legato=0.5).out(i, 1)\n    S('m|c:[4:9]', legato=0.2).out(i, P('4!12, 3!12', i))\n    S('lost:[1:100]', # -&gt; lost into jupfx\n            cutoff=9000, # -&gt;\n            shape=0.5,\n            pan='sin($/40)', #\u00a0-&gt; X\n            legato=0.3, #\u00a0-&gt;\n            begin='r').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\n#\u00a0Inclure\n@swim \ndef baba(d=0.5, i=0): \n    S('a', shape=0.7).out(i, 4) # -&gt; monter shape pour les harmoniques\n    S('c', shape=0.7).out(i, 3) # -&gt; monter shape pour les harmoniques\n    S('d:7', orbit=3, room=0.2, size=0.8, dry=0.2).out(i, 8)\n    S('hhh:3', amp='{0, 0.2, 0.01}', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('.., p:5, .', legato=0.5).out(i, 1) #\u00a0-&gt; refaire entrer \u00e7a\n    S('m|c:[4:9]', legato=0.2).out(i, P('4!12, 3!12', i))\n    S('lost:[1:100]', # -&gt; lost into jupfx\n            cutoff=9000, # -&gt;\n            shape=0.5,\n            pan='sin($/40)', #\u00a0-&gt; X\n            legato=0.9, #\u00a0-&gt;\n            begin='r').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): # potentiom\u00e8tre du r\u00e9el\n    S('a', shape=0.7).out(i, P('4!12, 5!12', i)) # -&gt; monter shape pour les harmoniques\n    S('c', shape=0.7).out(i, 3) # -&gt; monter shape pour les harmoniques\n    #\u00a0S('c', shape=0.7).out(i, P('3!12, 2!12, 5!12',i)) # -&gt; monter shape pour les harmoniques\n    #\u00a0S('hhh', amp='{0, 0.2, 0.01}', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    S('d:4, d:5, .', legato=0.5).out(i, 3)\n    S('m|g:[4:9]', legato=0.2).out(i, P('4!12, 1!24', i))\n    S('long|(lost:r*8)', # -&gt; lost into jupfx\n            midinote='C',\n            cutoff=4000, # -&gt;\n            pan='[0:0.5, 0.1], [0.5:1, 0.1]', #\u00a0-&gt; X\n            legato='0.1|0.2|0.7|0.1',\n            cut=1, orbit=2, room=0.5, size=0.2, dry=0.1,\n            begin='[0:1,0.01], [1:0,0.01]').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\n#\u00a0Ici on peut explorer des choses plus ambient et se perdre un peu\n\n@swim \ndef baba(d=0.5, i=0): # potentiom\u00e8tre du r\u00e9el\n    S('a', cutoff=200, shape=0.7).out(i, P('4!12, 5!12', i)) \n    #\u00a0S('c', cutoff=100, shape=0.7).out(i, 3) \n    #\u00a0S('c', shape=0.7).out(i, P('3!12, 2!12, 5!12',i)) \n    #\u00a0S('hhh', amp='{0, 0.2, 0.01}', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    #\u00a0S('d:4, d:5, .', legato=0.5).out(i, 3)\n    S('m|g:[4:9]', legato=0.2).out(i, P('4!12, 1!24', i))\n    S('long|(lost:r*8)', # -&gt; lost into jupfx\n            midinote='C',\n            cutoff=4000, # -&gt;\n            pan='[0:0.5, 0.1], [0.5:1, 0.1]', #\u00a0-&gt; X\n            legato='[0.1|0.2|0.7|0.1]+0.6', #\u00a0-&gt; facteur de fun\n            cut='1|0, 1|0, 1!4', orbit=2, room=0.5, size=0.2, dry=0.1,\n            begin='[0:1,0.01], [1:0,0.01]').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('f', shape=0.5).out(i, 4)\n    #\u00a0S('hhh', amp='{0, 0.2, 0.01}', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    #\u00a0S('d:4, d:5, .', legato=0.5).out(i, 3)\n    #\u00a0S('d:{4,9}', legato=0.5).out(i, 4)\n    #\u00a0S('z', shape=0.8).out(i, 4)\n    S('hhh:12', hcutoff=500, speed='[1:10]', shape=0.8).out(i, 1)\n    # S('kit5:[6!4,7!2,5!5,4]', shape=0.8).out(i, 3)\n    #\u00a0S('q:r*8', shape=0.4).out(i, P('1!12, 2!8', i))\n    S('long:1', # -&gt; lost into jupfx\n            midinote='C',\n            cutoff=4000, # -&gt;\n            pan='[0:0.5, 0.1], [0.5:1, 0.1]', #\u00a0-&gt; X\n            legato='0.1|0.2|0.3|0.1',\n            begin='[0:1,0.01], [1:0,0.01]').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('f', shape=0.5).out(i, 4)\n    #\u00a0S('hhh', amp='{0, 0.2, 0.01}', legato='0.1~0.5').out(i) #\u00a0-&gt; hhh ramp\n    #\u00a0S('d:4, d:5, .', legato=0.5).out(i, 3)\n    #\u00a0S('d:{4,9}', legato=0.5).out(i, 4)\n    #\u00a0S('z', shape=0.8).out(i, 4)\n    S('hhh:12', hcutoff=500, speed='[1:10]', shape=0.8).out(i, 1)\n    # S('kit5:[6!4,7!2,5!5,4]', shape=0.8).out(i, 3)\n    #\u00a0S('q:r*8', shape=0.4).out(i, P('1!12, 2!8', i))\n    S('long:1', # -&gt; lost into jupfx\n            midinote='C',\n            cutoff=4000, # -&gt;\n            pan='[0:0.5, 0.1], [0.5: 1, 0.1]', #\u00a0-&gt; X\n            legato='0.1|0.2|0.3|0.1',\n            begin='[0:1,0.01], [1:0,0.01]').out(i) #\u00a0-&gt; begin r ou {0, 1, 0.1}\n    a(baba, d=1/8, i=i+1)\n\npanic()\n\nS('lost').out()\n\nS('lost:2').out()\n\n#\u00a0F\u00eater Halloween \n\nS('lost:7', legato=7, speed=0.5, release=7).out()\n\nS('lost:0', legato=7, speed=0.5, release=7).out()\n\nS('lost:3', legato=7, speed=0.5, release=7).out()\n\npanic()\n\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n# \u2588                                                                            \u2588\n# \u2588     \u2588\u2003\u2588\u2003 \u2003\u2584\u2584\u2003 \u2003\u2588\u2591\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2584\u2580\u2588                              \u2588\n# \u2588     \u2588\u2003\u2588\u2003 \u2003\u2591\u2591\u2003 \u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2580\u2584\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2580\u2588                              \u2588\n# \u2588                                                                            \u2588\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\n@swim\ndef baba(d=0.5, i=0): \n    #\u00a0S('bip:r*20', shape=0.4, midinote='quant([0+12|24,3,6,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    #\u00a0S('bip:r*20+20', shape=0.4, midinote='quant([0+12|24,3,6,10]+62, C@minor), quant([0,3,10]+62|74, F@minor)').out(i, 3, 0.25)\n    S('boop:r*40').out()\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('bip:r*20', \n            orbit=2, room=0.7, size='r', dry='0.1',\n            shape=0.4, midinote='quant([0+12|24,3,6,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    S('bip:r*20+20', \n            orbit=2, room=0.5, size='r', dry='0.1',\n            shape=0.4, midinote='quant([0+12|24,3,6,10]+62, C@minor), quant([0,3,10]+62|74, F@minor)').out(i, 3, 0.25)\n    S('boop:r*40').out()\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('bip:r*20', \n            orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n            shape=0.4, midinote='quant([0+12|24,3,6,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    S('bip:r*20, boop:r*200', \n            orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+80, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 3, 1)\n    S('(ff):r*20', # ulh electrowave ff \n            orbit=2, room=0.7, size='r', dry='0.1', legato=0.2, hcutoff=500,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+50, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 2, 1)\n    a(baba, d=1/8, i=i+1)\n\n@swim \ndef baba(d=0.5, i=0): \n    S('ff', shape=0.5).out(i, 4)\n    S('ll', shape=0.5).out(i, 4)\n    S('gameboysnare', cutoff=800).out(i, 8)\n    S('., hhh:r*40', hcutoff=9000).out(i, 1)\n    S('., hhh:r*40', hcutoff=9000, speed='1~50').out(i, 1)\n    S('bip:r*20', \n            orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n            shape=0.4, midinote='quant([0+12|24,3,6,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    S('bip:r*20, boop:r*200', \n            orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+80, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 3, 1)\n    S('(ulh):r*20', # ulh electrowave ff \n            orbit=2, room=0.7, size='r', dry='0.1', legato=0.2, hcutoff=500,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+50, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 2, 1)\n    a(baba, d=1/8, i=i+1)\n\n#\u00a0&lt;-&gt; des allers retours\n\n@swim \ndef baba(d=0.5, i=0): \n    #\u00a0S('ff, gg:r*29', shape=0.8, leslie=1, leslierate=5, lesliespeed=2).out(i, 2)\n    #\u00a0S('ll', shape=0.8).out(i, 4)\n    S('gameboysnare', cutoff=800).out(i, 8)\n    #\u00a0S('., hhh:r*40', hcutoff=9000).out(i, 1)\n    S('., hhh:r*40', hcutoff=9000, speed='1~50').out(i, 1)\n    # S('bip:r*20', lesliespeed='2*8', leslierate='r*5', leslie=1,\n    #         orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n    #         shape=0.4, midinote='quant([0+12|24,3,6,10]+50, C@minor), quant([0,3,10]+50, F@minor)').out(i, 1, 0.25)\n    S('bip:r*20, boop:r*200', lesliespeed='2*8', leslierate='r*5', leslie=1,\n            orbit=2, room=0.7, size='r', dry='0.1', legato=1,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+80, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 3, 1)\n    S('(ulh):r*20', # ulh electrowave ff \n            orbit=2, room=0.7, size='r', dry='0.1', legato=0.2, hcutoff=500,\n            shape=0.4, midinote='quant([0+12|24,1~20,6,0~20]+50, C@minor), quant([0~20,3,10]+50, F@minor)').out(i, 2, 1)\n    a(baba, d=1/8, i=i+1)\n\n# --|--&gt; transition du coq \u00e0 l'\u00e2ne\n\n@swim\ndef baba(d=0.5, i=0):\n    S('m, ..., m, ...', shape=0.5).out(i, 2)\n    S('rev([s,a,l,u,t, z,o,r,b,a]:r*8)', \n            legato=0.1, pan='tan(r/100)', accelerate=0.2,\n            room=0.1, dry=0.1, size=0.1,\n    ).out(i, 2)\n    S('perca:[1:20], ..', \n            speed=2 if rarely() else 'r*4',\n    ).out(i, 2)\n    a(baba, d=1/16, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    S('m, ..., m, ...', shape=0.5).out(i, 2)\n    S('long:13', shape=0.5, \n            begin='0.5, 0.5, 0.42, 0.5!2, 0.6', orbit=3,\n            cut=1, legato=2).out(i, 8, 0.25) \n    S('perca:[1:20], ..', speed=2).out(i, 2)\n    a(baba, d=1/16, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    S('f, ..., f, ...').out(i, 2)\n    S('gg, ...', shape=0.5, orbit=4, room=0.2, size=0.2, dry=0.2).out(i, 2)\n    S('perca:[1: 20], ..', speed='1+r*4', cutoff='200+r*8000').out(i, 2)\n    S('perca:[20: 1], .', speed='0.1+sin($)', cutoff='200+r*8000').out(i, 3)\n    S('long:13', shape=0.7, \n            begin='0.1, 0.2, 0.3, 0.5', \n            orbit=3,\n            cut=1).out(i, 8, 0.25) #\u00a00.5 0.6\n    a(baba, d=1/16, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('m, ..., m, ...', shape=0.5).out(i, 2)\n    S('hhh:r*49', amp=0.3, hcutoff='sin(i.i/40)*7000').out(i, 2)\n    S('long:13', shape=0.5, \n            begin='0.6, 0.5, 0.42, 0.6, 0.7', orbit=3,\n            cut=1, legato=2).out(i, 8, 0.25) \n    S('q:[1:20], ..', speed=2).out(i, 2)\n    a(baba, d=1/16, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('m, ..., m, ...', shape=0.5).out(i, 2)\n    S('hhh:r*49', amp=0.3, hcutoff='sin(i.i/40)*7000').out(i, 2)\n    S('long:13', shape=0.5, \n            begin='0.5, 0.5, 0.42, 0.5!2, 0.6', orbit=3,\n            cut=1, legato=2).out(i, 8, 0.25) \n    S('q:[1:20], ..', speed=2).out(i, 2)\n    a(baba, d=1/16, i=i+1)\n\n#\u00a0une petite transition jsp\n\n@swim\ndef baba(d=0.5, i=0):\n    #\u00a0S('m, ..., m, ...', shape=0.5).out(i, 2)\n    # S('hhh:r*49', amp=0.3, hcutoff='sin(i.i/40)*7000').out(i, 2)\n    S('jupfx:r*20', shape=0.5, hcutoff='200 + r*8000',\n            begin='0.5, 0.5, 0.42, 0.5!2, 0.6', orbit=3,\n            cut=1, legato=2).out(i, 8, 0.25) \n    S('q:[1:20], ..', speed=2).out(i, 2)\n    a(baba, d=1/16, i=i+1)\n\n#\u00a0D\u00e9brouille toi\n\n\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n# \u2588                                                                            \u2588\n#\u00a0\u2588\u00a0\u2588\u2003\u2588\u2003\u2588\u2003 \u2003\u2584\u2584\u2003 \u2003\u2580\u2588\u2580\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2588\u2003 \u2003\u2580\u2588\u2580\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588            \u2588\n#\u00a0\u2588\u00a0\u2588\u2003\u2588\u2003\u2588\u2003 \u2003\u2591\u2591\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003 \u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2591\u2588\u2591\u2003\u2588\u2584\u2588\u2003 \u2003\u2591\u2588\u2591\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584            \u2588\n#\u00a0\u2588\u00a0                                                                           \u2588\n#\u00a0\u2588\u00a0\u2588\u2580\u2003\u2584\u2580\u2588\u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2580\u2588\u2580\u2003\u2584\u2584\u2003\u2588\u2580\u2580\u2003\u2580\u2588\u2580\u2003\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2580                           \u2588\n#\u00a0\u2588\u00a0\u2584\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2591\u2588\u2591\u2003\u2591\u2591\u2003\u2588\u2588\u2584\u2003\u2591\u2588\u2591\u2003\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2588\u2584                           \u2588\n# \u2588                                                                            \u2588\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n,*,,,,,,,,,,,,.,,,,..*****,,.  .. ,*,.   . ..        ........,,,.,,,,,,,,,,.,,.*\n*(**/**,/*(**,**///**,,*////*,,..,,//.. ..,       . ....,,,,,,,,**********(//(((\n*/***/***,/******/,. . ....,,,,..,,**.   ...     ..,.....,,.,,,,,*********(((//*\n*((*//**,,/,,,,,*,.  .. ....,,,.../#%%%%#(,..    .,,,....,...,,,,.,,,,**,,****(/\n*****/,,*,**,**,,,...,.,.,*/#%%%%%%%%%%%%%%%#(. .,,..,,...,...,..,..,,,,****/***\n*//,**//*****/**,.....%#%&amp;&amp;%%&amp;&amp;&amp;&amp;%&amp;%%%%%%%%%%%%##%#...... ,,..,..*.,,,,/**/*,,**\n*//*,,*,,******,,/,,.#%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%#%&amp;%%&amp;%%%%###%( .. ..,,..,,,..,,..,.****,**\n*//*,,,,****,,,,,,,,#%&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;%&amp;%%%%&amp;&amp;&amp;%&amp;&amp;&amp;%%%%%###(#*  ....,,,,.,........,,**,\n*//*****,***...... #%&amp;%&amp;&amp;&amp;%&amp;%%&amp;%%%%#%%%&amp;&amp;&amp;&amp;&amp;%%%%%%%%%%%#**,*,....,,.,*.......,,,\n*/*******,,,......#%%&amp;%&amp;%&amp;&amp;&amp;%%%&amp;&amp;%%%%%#%%%%%%%%%###%%#%%(,,,,*, ....   ,..,,,,./\n*/*****,,*,.....,(&amp;&amp;&amp;%&amp;&amp;&amp;%(***(&amp;**,****,,*((##%/#/#%%%#%%(////**,,......,,,,,.*,\n*/*,,,,,,.,*, ..#%%&amp;&amp;&amp;&amp;%#/***************,**,... .*#%%%%%#//*.,..........,*/*,.,\n*/****,,,...,.,.#%&amp;&amp;&amp;&amp;%(/********,,,****,***,...   ,/%%#(*.............,.,,,..,*\n*/**,,,,,,,,....,%%%&amp;&amp;&amp;/**/////***,**/***,,*,*,...  ./(#,...,..,.,,..,,,,...,,,*\n*/****,**,**,*,..*%&amp;&amp;&amp;/**#(///(//((/*/*,**/////***,..#%(, .....,.....,,. ....,*,\n*//**********,,,,//%%%**//(%#&amp;%#////(,,#/*(*###*/*.../#(/,.,.,,.. ... .   .,,..,\n*//*///**,,,,***,,//%%***/((((((//((,,,,((/(((//.*...,#/,...,,.,...,.. .,......,\n*///(**//*****/***,(%#****///**/****,,,,.,**,,,,,.,,,(#*..,,...,.. ............,\n*//*/*,,**,,,,**/***#%(**********/****,....,,,,,.....#(*,,......,.  .,,.,**,,,..\n*//*/*,*/**,*,,,,,,.,##//**********,**,,..,,,,....  ,((******//(*.....*,,.,....*\n*//*///**//,,.**,..,,,%#***********((/./(,*,,,,. ..,*((,,,....,,..,.,,,*,.,...,*\n/#/((***/,***,,,.,,,**(((***,*,****((#/*/,,,...   .,(#,,.......  ..,,,***,,,.,.*\n*((/(/***.*,,,..,.,*,//(#(//****//(((((/(///.*...,.//(/***,.,*..  ....,***,...,*\n*((//*,,,,,.......,,..,*(##(//***//((//(*(*,*,...,*/*,... ..    .  ......,..,.,,\n/((((/,,,,...........,,**/(#((/**/***/*,,,***,.,.////*******,,.,,.   .... ...,.,\n*(((/*,,,,,,,./, .......*,,/###(/********,,.,*(*,.,,.....,,,..     ..  ......,..\n*((//**,,.,,****,.,,,...*%(..(###%#((((((//(#(/.   ,.*,,,,..,..   ..... ......,.\n*((///*,.,*,****...,*/.&amp;&amp;&amp;%,.,,*(##%%%%%%%##(/.   .%#((,.,.., ...........,,,,,,.\n/(/(**,,,..,,,,,**/**/&amp;&amp;@&amp;&amp;&amp;/*,/.,*((((((((. ...,(%#%%%%%,,,,.......   ...,.,,,,\n*(//**,***,**,*****(%&amp;&amp;&amp;@&amp;&amp;@&amp;%*,.,,*//(((/,..,/%%%%%%%%%%##*,*,...............,.\n*(//***,,*/,*,,(&amp;&amp;&amp;&amp;@&amp;@@@&amp;&amp;&amp;&amp;(,,,,,,,*(#,,,,,,*#%%%%%%%%%%%%%#**.........,/*****\n*(///****,,(&amp;&amp;&amp;&amp;@@@@@@&amp;&amp;@&amp;&amp;&amp;&amp;##%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%##%%&amp;&amp;&amp;%%&amp;%%%%%%%#(%(/*....***,*,,,\n*((((((&amp;@&amp;&amp;&amp;&amp;@@@@&amp;&amp;@&amp;@&amp;&amp;&amp;&amp;&amp;%%&amp;&amp;&amp;&amp;&amp;@&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;%%%%%%%%%%%%%#%%#%%*,,...,,,*,,***,\n/%&amp;%&amp;@&amp;%&amp;@@@@@&amp;&amp;&amp;&amp;&amp;%%&amp;&amp;@&amp;&amp;&amp;@&amp;&amp;@@&amp;&amp;&amp;#,,,,,##&amp;%(%%&amp;%%%%#%%##%/.  /#/...,,..,,,,...\n/&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%#%&amp;&amp;&amp;&amp;%(.,,,,,,/&amp;&amp;&amp;&amp;%%%%%##**,. ,,/,.,.,.*,*,(#&amp;(..\n/&amp;&amp;%#%%%###%&amp;@&amp;&amp;&amp;&amp;&amp;%%%%%%%&amp;&amp;&amp;&amp;&amp;%&amp;%&amp;%*,.,,...%%%&amp;%%%(%#*,,.,,./,,.,,,./(#(*#(%(#(\n/&amp;&amp;@&amp;@&amp;%&amp;@@@&amp;@&amp;&amp;&amp;%(#%%%#%&amp;&amp;&amp;&amp;&amp;&amp;&amp;%%&amp;&amp;%#.... %%%%&amp;&amp;%#(*,,...(/,,,*,(%%###(####/*%(\n/&amp;@@@&amp;@&amp;&amp;#%##&amp;%(/*/(#%%%#%&amp;@&amp;&amp;%#%%&amp;&amp;%&amp;%,./&amp;&amp;&amp;%%%#***....**,*/*%%%%&amp;%(#%#####(/(*\n/#%&amp;@%%##&amp;&amp;&amp;%(/((,,(%&amp;%#%%%&amp;&amp;%%#%#%%&amp;%&amp;%&amp;&amp;&amp;&amp;%%(*.....(.*.,/#%%%&amp;%%%%###%#%%###(.\n/######/(%%&amp;%(%%#(((/#%&amp;@&amp;&amp;&amp;&amp;&amp;%&amp;&amp;%%&amp;&amp;%&amp;&amp;&amp;&amp;&amp;%/,,.. ,.,.,(#%&amp;%&amp;%%%&amp;%%%#%%%(((//%%(\n/%%%#(#%%%%%%%%#######(((%&amp;&amp;@&amp;&amp;%%%%%&amp;&amp;%%%(,,,,..,,,(%%&amp;&amp;%#%%%####((%#%(/(#%#(#**\n/%%%%%%%&amp;&amp;&amp;%&amp;&amp;%%%%#(((((((#*%&amp;@&amp;%%&amp;&amp;%%%/,*,,.*,//&amp;%%&amp;%%%%&amp;&amp;%####(/*#%(/(#%%#**,*\n/&amp;&amp;%&amp;%%%%%%%##%%###(#((#*#%((//(////***/*.**##%%%#%##%&amp;%#(##%%%%#*/#//*/#(/#(***\n#\u00a0C'EST PIERRE BONNARD, IL FAUT ALLER LE VOIR. \n\n\n@swim\ndef baba(d=0.5, i=0):\n    M(velocity='90~110', note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    M(velocity='90~110', dur=1, note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    M(velocity='90~110|70', dur='15~20', note=\"F', ..., G'', ..., [D, E, F, A]+12\").out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    M(velocity='90~110', dur=1, note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    M(velocity='90~110|90', dur='15~20', note=\"F., ..., F.., ...\").out(i, 2)\n    M(velocity='90~110|90', dur='15~20', note=\"F., A, .., F.., ...\").out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n#\u00a0&lt;-&gt; alterner\n\n@swim\ndef baba(d=0.5, i=0):\n    M(dur='2~5', note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    M(dur='2~5', note='disco(inrot(C@maj7, F@maj7))').out(i, 5)\n    M(dur='2~12', note='adisco(inrot(inrot(C@maj7, F@maj7), G@fifths))').out(i, 4)\n    a(baba, d=1/8, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    M(note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    if rarely():\n        M(note='disco(inrot(C@maj7, F@maj7))').out(i, 5)\n    if sometimes():\n        M(note='adisco(inrot(inrot(C@maj7, F@maj7), G@fifths))').out(i, 4)\n    a(baba, d=1/8, i=i+1)\n\n\nc._midi_nudge = 0.30\n\n@swim\ndef baba(d=0.5, i=0):\n    S('ff').out(i, 4)\n    M(velocity='90~110', dur=1, note='inrot(C@maj7, F@maj7)-12').out(i, 2)\n    M(velocity='90~110|90', dur='15~20', note=\"F., ..., F.., ...\").out(i, 2)\n    M(velocity='90~110|90', dur='15~20', note=\"F., A, .., F.., ...\").out(i, 2)\n    a(baba, d=1/8, i=i+1)\n\n\n\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n# \u2588                                                                            \u2588\n# \u2588  \u2588\u2003\u2588\u2591\u2588\u2003 \u2003\u2584\u2584\u2003 \u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2580\u2003 \u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2588\u2003 \u2003\u2584\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2588\u2003         \u2588\n# \u2588  \u2588\u2003\u2580\u2584\u2580\u2003 \u2003\u2591\u2591\u2003 \u2003\u2588\u2584\u2584\u2003\u2588\u2588\u2584\u2003 \u2003\u2588\u2580\u2580\u2003\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2584\u2588\u2003 \u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2588\u2003         \u2588\n# \u2588                                                                            \u2588\n# \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\npanic()\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[1,2,1,2,4,5,4,6]', legato=1).out(i, 8)\n    S('long:42', begin='r', cut=1).out(i, 8)\n    a(baba, d=1/32, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    if sometimes():\n        S('z:6' if random() &gt; 0.5 else 'z:7', shape=0.9, hcutoff=7000).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[1,2~10,1,2,4~10,5,4,6]', legato=1).out(i, 8)\n    S('long:42', begin='r', cut=1).out(i, 8)\n    a(baba, d=1/32, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    #\u00a0Ce truc est quand m\u00eame giga fade :'(((((((((((((\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    if sometimes():\n        S('z:6' if random() &gt; 0.5 else 'z:7', shape=0.9, hcutoff=7000).out(i, 4)\n    #\u00a0Du du du du dudududududu dudu du du dud udu dudu \n    a(baba, d=1/32, i=i+1)\n\n#\u00a0R\u00e9ponse : \n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[0, 1,2,1,2,4,5,4,6,7,8, 1, 0]', legato=1).out(i, 8)\n    S('long:42', begin='r', cut=1).out(i, 8)\n    S('long:42~46', begin='r', cut=1, speed=0.5).out(i, 8)\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    if sometimes():\n        S('z:6' if random() &gt; 0.1 else 'z:7', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    if sometimes():\n        S('dd:6|7|8' if random() &gt; 0.5 else 'j:0~7', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[1,2,1,2,4,5,4,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('long:20~33', begin='r', cut=1).out(i, 8)\n    S('long:42~46', begin='r', cut=1, speed=0.5).out(i, 8)\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    if sometimes():\n        S('z:6' if random() &gt; 0.1 else 'z:8~400', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    if sometimes():\n        S('dd:6|7|8' if random() &gt; 0.5 else 'z:7~200', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[1,2,1,2,4,5,4,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    #\u00a0S('long:42', begin='{0,2,0.4}', cut=1).out(i, 16)\n    S('long:42', begin='[0:1, 0.08]', cut=1).out(i, 16) #\u00a0-&gt; \u00e9plucher comme un oignon (solo de fichier .wav)\n    #\u00a0S('long:42~46', begin='r', cut=1, speed=0.5).out(i, 8)\n    # S('jupbass:28|44, jupbass:28', octave=4, \n    #     legato=1, cut=1, orbit=3).out(i, 24, 1)\n    if sometimes():\n        S('z:6' if random() &gt; 0.1 else 'z:8~400', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    if sometimes():\n        S('dd:6|7|8' if random() &gt; 0.5 else 'z:7~200', \n                pan='r',\n                legato=1, shape=0.9, hcutoff=7000).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit3:[1,2,1,2,4,5,4,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('long:10~33', begin='r', cut=1, speed=\"1~8\").out(i, 8)\n    S('long:20~46', begin='r', cut=1, speed=\"1~8\").out(i, 8)\n    a(baba, d=1/32, i=i+1)\n\n#\u00a0R\u00e9ponse : \n\n@swim\ndef baba(d=0.5, i=0):\n    S('kit2:[0, 1,2, 0, 1,2,4,5,4,0,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('kit3:[1,2,1,2,4,5,4,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('long:103', begin='0.1, 0.5', cut=1, speed=\"1~8\").out(i, 16)\n    S('long:20', begin='0.1, 0.5', cut=1, speed=\"1~8\").out(i, 8)\n    a(baba, d=1/32, i=i+1)\n\n\n@swim\ndef baba(d=0.5, i=0):\n    S('cc').out(i, 12)\n    S('kit2:[0, 1,2, 0, 1,2,4,5,4,0,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('kit3:[1,2,1,2,4,5,4,6,1,2,3,1,2,3,2,3,4,5~8!5]', legato=1).out(i, 8)\n    S('long:103', begin='0.1, 0.5', cut=1, speed=\"1~8\").out(i, 16)\n    S('long:20', begin='0.1, 0.5', cut=1, speed=\"1~8\").out(i, 8)\n    a(baba, d=1/32, i=i+1)\n\n@swim\ndef baba(d=0.5, i=0):\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    S('kit4:r*20', legato=0.4, begin=0.01).out(i, 12)\n    S('kit3:[1,2,1,2,4,5,4,6]').out(i, 8)\n    S('long:40', begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    S('long:40', speed=1.01, begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    if sometimes():\n        S('z:6', shape=0.9, hcutoff=5000).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\npanic()\n\n@swim\ndef baba(d=0.5, i=0):\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    S('kit4:r*20', legato=0.4, begin=0.01).out(i, 12)\n    S('kit3:[1,2,1,2,4,5,4,6]').out(i, 8)\n    S('long:26', amp=0.5, begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    S('long:26', speed=1.01, begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    if sometimes():\n        S('z:6', shape=0.9).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\n#\u00a0Variation 3\n@swim\ndef baba(d=0.5, i=0):\n    S('jupbass:28|44, jupbass:28', octave=4, \n        legato=1, cut=1, orbit=3).out(i, 24, 1)\n    S('kit4:r*20', legato=0.4, begin=0.01).out(i, 12)\n    S('kit3:[1,2,1,2,4,5,4,6]').out(i, 8)\n    S('long:40', begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    S('long:40', speed=1.01, begin='0.60!4, 0.555!2, 0.27!4, 0.25!2', orbit=2, cut=1).out(i, 32)\n    if sometimes():\n        S('z:6', shape=0.9).out(i, 4)\n    a(baba, d=1/32, i=i+1)\n\npanic()\n</code></pre>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/","title":"Timing and Scheduling","text":"<p>Sardine users refer to the functions they use as swimming functions. This section will teach you how to use them! Swimming functions must dance before your eyes like sardines in the ocean. You must fell comfortable writing them and manipulating them. These functions are the foundation of Sardine and nothing really makes sense without them.</p> <p>Joking aside, and for those of you who already know how to program, swimming functions are temporally recursive functions. These functions run and schedule themselves later in time instead of returning. This is a very primitive but very powerful mechanism that has been harnassed by live-coders in multiple programming environments since the inception of that type of computer music performance.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#i-swimming-functions","title":"I - Swimming Functions","text":""},{"location":"documentation/sardinopedia/basic_swimming_lessons/#out-of-time","title":"Out-of-time","text":"<pre><code>D('bd')\n</code></pre> <p>This command will play a single bassdrum with the SuperDirt sound engine. We are not currently using a swimming function, this event is atomic and non-repeating. It is a one-shot event, a single instruction sent to the Python interpreter. We haven't learned anything yet, you don't know anything about Senders, swimming functions, etc... Just note that these one-letter objects are constantly and repeatedly used to trigger different types of messages. We will need to pattern them and to arrange or compose them in time. You can use Sender objects outside of a recursive function. It will work, but you will be un-timed, or out-of-time, just like your regular Python script that doesn't really care about time or about when or how things happen.</p> <p>By using Python with Sardine, you will constantly run into things that either are timed or un-timed. It can help if you like manipulating only certain parts of your interactive programs with time constraints or if you like to store options and configuration in a part of your script, apart from your musical patterns.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#swimming","title":"Swimming","text":"<p><pre><code>@swim #\u00a0or @die\ndef basic():\n    print('I am swimming now!')\n    again(basic)\n\nsilence(basic) # or panic()\n</code></pre> This is the most basic and iconic swimming function you can write. We will surely make a sweatshirt out of it one day. It is just like your regular Python function to the exception of two little details: </p> <ul> <li> <p>the <code>@swim</code> or <code>@die</code> decorators.</p> </li> <li> <p>the <code>again</code>\u00a0final recursive call.</p> </li> </ul> <p>Behind the stage, the <code>@swim</code> decorator will provide all the necessary plumbing to properly handle time and repetition. The <code>again(...)</code> function is pretty much the same thing as <code>@swim</code>. It is how the recursion happens, where the function enters the infinite time loop defined by the clock. Updating the function with the <code>@die</code> decorator will stop the recursivity, ending the production of sound.</p> <p>Using <code>silence(function_name)</code> or just <code>silence()</code> will halt the function execution. There is also <code>panic()</code> which is a bit more extreme but needed in some cases where sound doesn't stop after running <code>silence()</code>. <code>silence()</code> will just stop the function / all functions while <code>panic()</code> will do the same but also violently stop every sound sample / synthesizer currently being used. This is useful if you feel that you are loosing control when playing with loud or very long samples.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#swimming-with-style","title":"Swimming with style","text":"<pre><code>@swim \ndef basic(p=0.5, i=0):\n    print('I am swimming now!')\n    again(basic, p=0.5, i=i+1)\n\nsilence(basic)\n</code></pre> <p>This is a swimming function with some minor improvements. The function is passed a period (<code>p</code>) and an iterator (<code>i</code>) as arguments. This is the function you will want/need to save as a snippet somewhere in your text editor. Sardine users write this skeleton constantly, mechanically, without even thinking about it.</p> <ul> <li> <p>The period (<code>p</code>) is the function's duration, the <code>0.5</code> value representing half of a beat.  </p> </li> <li> <p>The <code>i</code> parameter is an hand-crafted iterator progressively incremented by recursion. Don't be scared by all this jargon. It just means that the value increases by one each time the function is repeated.</p> </li> </ul>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#drowning-in-numbers","title":"Drowning in numbers","text":"<pre><code>@swim \ndef basic(p=0.5, i=0, j=0, k=0):\n    print(f'I am swimming with {i}, {j}, and {k}!')\n    again(basic, p=0.5, i=i+1, j=j+2, k=P('r*10', i))\n\nsilence(basic)\n</code></pre> <p>A function with three different iterators. Why not? Notice how the iterator values are evolving independently. <code>i</code> is a basic increment, while <code>j</code> walks through even numbers. And <code>k</code> is randomized using the notation <code>P('r*10', i)</code>. To learn more about this, please refer to the section about Patterns and about the pattern Language. You will sometimes encounter features you don't know about yet while scrolling through these examples. Don't worry, they are covered somewhere!</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#swimming-with-friends","title":"Swimming with friends","text":"<p><pre><code>def calling_you():\n    print('I hear you')\n\n@swim\ndef basic():\n    calling_you()\n    again(basic)\n\nsilence(basic)\n</code></pre> A swimming function can call a regular function (i.e. a function with no Sardine decorator). This example is boring as hell but it demonstrates one thing: Sardine is just regular Python with a twist. Be creative, import your favorite packages and make your computer crash in rhythm!</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#synchronized-swimming","title":"Synchronized Swimming","text":"<p><pre><code>@swim\ndef first():\n    print('first!')\n    again(second)\ndef second():\n    print('second!')\n    again(first)\n</code></pre> A swimming function calling another one, which will call back the first one in return. This is a loop of looping functions. You can make use of this to organise longer pieces if you'd like to.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#sardines-playing-waterpolo","title":"Sardines playing Waterpolo","text":"<p><pre><code>@swim\ndef first(p=0.5, rng=0):\n    print(f\"Received: {rng}\")\n    rng = randint(1,10)\n    print(f\"Sending: {rng}\")\n    again(second, p=0.5, rng=rng)\n\n#\u00a0evaluate me first\ndef second(p=0.5, rng=0):\n    print(f\"Received: {rng}\")\n    rng = randint(1,10)\n    print(f\"Sending: {rng}\")\n    again(first, p=0.5, rng=rng)\n</code></pre> Exchanging data between swimming functions just like sardines playing waterpolo. This is just an extension of some on the materials depicted above. There is no limit to the things you can do by recursion. It will only gradually cause more headaches as you go along.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#ii-surfing-with-surfboards-a-concise-syntax","title":"II - Surfing with surfboards: a concise syntax","text":"<p>Sardine features an alternative swimming function based mechanism called surfboards. Surfboards are inspired by FoxDot, another cool live-coding library for Python created by Ryan Kirkbride. Surfboards are great for quick improvisation or for jotting down ideas before composing something larger using swimming functions. They also have some features not to be found anywhere else in the system for working with proportional durations, etc... It uses the same syntax and the same philosophy of patterning but it relies on Sardine's temporal foundations. This mode of swimming is basically assigning Senders to an invisible swimming function that runs automatically behind your back. </p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#surfboards-players","title":"Surfboards (Players)","text":"<p>By default, there are 48 <code>Players</code> ready for surfing. This is more than you will ever need! Nobody can play with that many patterns live. They are named in a consistent way from <code>Pa</code>, to\u00a0<code>PZ</code>: <code>[Pa, Pb, Pc, Pd, Pe, Pf, ..., PA, PB, PC, ... PZ]</code>. These objects use a central method: <code>&gt;&gt;</code>. In the background, <code>Players</code> are just regular swimming functions. They are limited as they can only have one call to a <code>Sender</code> per instance but this is sometimes more than enough!</p> <pre><code># The sun is high, let's go surfing\nPa &gt;&gt; d('bd, ., hh')\n\n#\u00a0Ok, I'm done surfing for today.. Time to eat marshmallows..\nPa &gt;&gt; None #\u00a0use none to stop a player\n</code></pre> <p>Take note of the <code>d()</code> method used for assigning a Sender to Players. If you have already played with Sardine or watched some videos, you might recognize <code>d()</code> from its cousin, <code>D()</code>. By default, I have mirrored every basic\u00a0<code>Sender</code> with its own method usable by surfboards.</p> <ul> <li><code>d(*args, **kwargs)</code> (<code>D()</code>): the default SuperDirt (or D) Sender.</li> <li><code>n(*args, **kwargs)</code> (<code>N()</code>): the default MIDI Note (or N) Sender.</li> <li><code>cc(*args, **kwargs)</code> (<code>CC()</code>): the default MIDI Control Change (or CC) Sender.</li> <li><code>pc(*args, **kwargs)</code> (<code>PC()</code>): the default MIDI Program change (or PC) Sender.</li> <li>... any other sender that you will declare yourself!</li> </ul> <p>I repeat, these functions are basically senders with a different name! Uppercase letters versus lowercase letters. You need to learn how to use Senders to be truly efficient with the surfing mode. You can spend your life using Sardine this way or combine it with swimming functions, this is entirely up to you! This mode was initially designed in order to demonstrate the syntax of FoxDot. I find it to be a fun and efficient way to jam along with friends as well :) You can just fire up a Sardine session and write pretty fast.</p> <p>Note that it is very easy to define your own <code>Senders</code>. To do so, follow the following steps:</p> <p>1) Declare a new Sender. For demonstration purposes, we will open a new MIDI output.</p> <pre><code>my_super_midi_sender = MidiHandler(port_name=\"my_cool_midi_output\")\nbowl.add_handler(midi)\n</code></pre> <p>2) Reference the <code>send</code> function from that sender with a variable</p> <pre><code>cool_sender = my_super_midi_sender.send\n</code></pre> <p>3) Compose a partial function following this template: </p> <pre><code>def custom_sender(*args, **kwargs):\n    return play(my_super_midi_sender, cool_sender, *args, **kwargs)\n</code></pre> <p>4) You can now use surfboards and have fun:</p> <pre><code>Pa &gt;&gt; custom_sender(...)\n</code></pre>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#the-span-argument","title":"The span argument","text":"<p>Surfboard are featuring a special <code>span</code> argument that will extend or compress the time taken for a pattern to be read. It is actually quite similar to <code>p</code> (for <code>period</code>) but it will also transform every value you feed to <code>p</code>. It can be quite hard to understand how this mechanism works initially. This has to do with the way we think about time and rhythm.</p> <p>The <code>span</code> argument can receive any integer or floating point number. That number will determine how long a surfboard pattern is and this value is absolute. Once you set it, your pattern will always cover that specific timespan. If you have a pattern of durations (<code>p</code>), they will be compressed or extended to fit that timespan. Take a look at the following example:</p> <pre><code>Pa &gt;&gt; d('bd, hh', p='0.5!4, 0.25!4', span=2)\n# Change the span value and observe \n</code></pre> <p>You can mix surfboards with different spans, but you might not like what you hear depending on the rhythm you have previously specified.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#the-efficiency-of-surfing","title":"The efficiency of surfing","text":"<p><pre><code>PB &gt;&gt; d('jvbass:r*8, ..., pluck, ...')\nPA &gt;&gt; d('bd, ., hh, sn, hh', \n        amp=0.4,\n        legato='0.3~1', speed='1')\n</code></pre> By using the <code>d()</code> method and combining it with regular patterns, you can more quickly generate efficient drum patterns without having to type too much! Your drum patterns will only take a few lines, and more complex swimming functions can be reserved for more complex tasks.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#iii-fast-swimming-functions","title":"III - Fast swimming functions","text":"<p>This section requires a good understanding of general Sardine concepts. You need to understand patterns, senders, and a few other concepts. You need to have at least a very vague idea about the temporal system Sardine is using and how patterns are written/interpreted, etc... It will open up a very cool world of polyrythmic patterns, rhythmic divisions, etc...</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#swimming-really-fast","title":"Swimming really fast","text":"<p>The recursion you define in a swimming function is usually rather slow compared to how fast your computer is running the asynchronous loop. If you feel adventurous, you can speed up the recursion and enter the high speed zone. The faster you go, the better the rhythmic precision. The faster, the merrier! Fast swimming functions will allow you to have a finely grained control over time and events, making it easier to generate groovy or swinging code. It will also make your LFOs and signal-like patterns feel more natural as they will be sampled more frequently. </p> <pre><code>@swim \ndef fast(p=0.25, i=0):\n    D('bd', speed='0.5,2', legato=0.1, i=i, d=4, r=2)\n    D('hh, jvbass:(0|8|4)', \n            pan='[0:1,0.1]', legato=0.1,\n            i=i, r=2, d=8 if rarely() else 5)\n    D('cp', legato=0.1, i=i, d=8)\n    again(fast, p=1/8, i=i+1)\n</code></pre> <p>The recipe for fast swimming is the following:</p> <ul> <li> <p>Use a very fast recursion speed (<code>1/8</code>, <code>1/16</code>, <code>1/32</code>), usually a constant with no patterning involved.</p> </li> <li> <p>Play a lot with silences and with the iterator, division amount and rate factor. These special arguments will be detailed in this section!</p> </li> </ul>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#fast-swimming-template","title":"Fast swimming template","text":"<pre><code>@swim \ndef fast(p=0.5, i=0):\n    #\u00a0print(\"Damn, that's fast!\")\n    again(fast, p=1/32, i=i+1)\n</code></pre> <p>This is the template for a fast swimming function. You can skip the iterator if you don't need it or if you wish to use another iteration tool (such as amphibian variables). This function is really fast. Uncomment the <code>print</code> statement to notice how fast it is. To learn how to control it efficiently, take a look at the following paragraphs about divisors and the rate factor.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#fast-swimming-parameters","title":"Fast swimming parameters","text":"<p><pre><code>@swim \ndef fast(p=0.5, i=0):\n    D('bd', i=i, d=8)\n    again(fast, d=1/16, i=i+1)\n</code></pre> Every <code>Sender</code> can receive three additional arguments that will help you to control patterns:</p> <ul> <li> <p><code>i</code> (int): the iterator for patterning. Mandatory for the two other arguments to work properly. This iterator is the index of the values extracted from your linear list-like patterns. How this index will be interpreted will depend on the next two arguments.</p> </li> <li> <p><code>div</code> (int): a timing divisor. It is very much alike a modulo operation. If <code>div=4</code>, the event will hit once every 4 iterations. The default is <code>div=1</code> where every event is a hit! Be careful not to set a <code>div=1</code> on a very fast swimming function as it could result in catastrophic failure / horrible noises. Nobody is going to come to save you if you do that. Keep the volume knob close to your keyboard.</p> </li> <li> <p><code>rate</code> (float): a speed factor for iterating over pattern values. It will slow down or speed up the iteration speed, the speed at which the pattern values are indexed on. For the pattern <code>1, 2, 3</code> and a rate of <code>0.5</code>, the result will be perceptually similar to <code>1, 1, 2, 2, 3, 3</code>.</p> </li> </ul> <p>Let's illustrate. In the example below, we are playing with various divisors to generate an interesting rythmic pattern. Combine that with more interesting drumming and boom, you now have the secret recipe for an interesting algorave.</p> <pre><code>@swim \ndef fast(p=0.5, i=0):\n    D('bd', i=i, d=8)\n    D('hh', i=i, d=7)\n    D('sd', i=i, d=16)\n    again(fast, p=1/16, i=i+1)\n</code></pre>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#can-we-do-more","title":"Can we do more?","text":"<p>Of course we can. So far, we only used one patterning speed because every sender is iterating over all its patterns at the same speed. You could use the <code>P()</code> object for including different iteration speeds inside your main fast swimming rhythm. This is a bit jargon heavy but I hope that you will understand what I mean. If you don't, see for yourself:</p> <p><pre><code>clock.tempo = 125\n@swim \ndef there_is_a_light(p=0.5, i=0):\n    D('drum', legato=1, speed='1', i=i, d=8)\n    D('drum:[1,2,3,4]', legato=1, \n        speed=Pat('1,2,3,4,5,1!2,4!4', i+1, 2, 0.5), i=i, d=4)\n    again(there_is_a_light, p=1/8, i=i+1)\n</code></pre> Go slow, read line after line and you will eventually get it! Patterns can become abstract quite fast.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#conclusion-about-swimming","title":"Conclusion about swimming","text":"<p>The concept of temporal recursion is deep. There are many clever things you can do with it, and it might take some time to see and master different patterning techniques. Swimming functions are only the beginning to your temporal voyage with Sardine. You will notice that there are multiple ways to speak / think about time even in the context of this very specific framework. Let's go through some examples really quick to whet your appetite.</p>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#imperative-style","title":"Imperative style","text":"<p>Take a swimming function, make it long enough, use our special <code>sleep()</code> function (which is not the regular Python sleep) and you can write code \u00e0 la Sonic Pi:</p> <pre><code>@swim\ndef sonorous_cake(p=0.5, i=0):\n    D('bd')\n    sleep(0.5)\n    D('hh')\n    sleep(0.5)\n    D('bd')\n    sleep(0.5)\n    D('sn')\n    again(sonorous_cake, p=2, i=i+1)\n</code></pre>"},{"location":"documentation/sardinopedia/basic_swimming_lessons/#declarative-style","title":"Declarative style","text":"<p>Make your swimming functions very dense, write using a mostly declarative style. Spice it up with the patterning system if you'd like: <pre><code>@swim\ndef one_line(p=0.5, i=0):\n    D('bd, drum, sn, drum:2')\n    again(one_line, p=0.5, i=i+1)\n</code></pre></p>"},{"location":"documentation/sardinopedia/clock/","title":"Clock","text":""},{"location":"documentation/sardinopedia/clock/#i-modes","title":"I - Modes","text":"<p>Nothing would be happening without the Sardine clock. The clock is the central piece of the library. It is always running in the background and it manages function execution, recursion and timing. This is a complex and fragile mechanism. Python is particularly bad when you are trying to enforce timing guarantees. The clock is still a work in progress. If you are good at programming clocks or similar mechanisms, please come have a chat with me :)</p> <p>The clock works pretty well until the moment it doesn't work anymore. If you are trying to be extra precise, follow these instructions:</p> <ul> <li> <p>kill every other non-essential program or process. We are trying to minimise context switching between the Sardine clock mechanism and the outside world.</p> </li> <li> <p>start Sardine with <code>sudo</code> or administrator priviledges. This allows me to <code>nice</code> the process a fair bit. Sardine will have a higher priority among other processes.</p> </li> <li> <p>be gentle, don't try to go faster than time. There is a minimal time division that the clock can handle. You can find out about it by typing <code>c._get_tick_duration()</code> a few times to see what the minimal amount of time between recursions is at your given tempo.</p> </li> </ul> <p>Internally, the Clock instance, aliased as <code>c</code>, is managing a lot of things. It is involved in proper message handling, ensuring time guarantees and much more.</p>"},{"location":"documentation/sardinopedia/clock/#a-midi-mode","title":"A) MIDI Mode","text":""},{"location":"documentation/sardinopedia/clock/#a-active","title":"a) Active","text":"<p>By default, the clock is running in active mode. It means that Sardine will emit a MIDI Clock signal on the default MIDI port. A MIDI Clock works by <code>ticking</code> constantly and it usually relies on a pulses per quarter note division, that indicates how many pulses form a basic rhythmic division. Hardware equipment are usually working at 24 or 48 PPQN but you can go much higher. Sardine tries to work well at these values, but the rest is really grey area. You are on your own.</p>"},{"location":"documentation/sardinopedia/clock/#b-passive","title":"b) Passive","text":"<p>In passive mode, Sardine will await for a clock signal. If the signal never comes, nothing will happen and you will be stuck in time. Please make sure to have a steady clock signal before booting Sardine. This mode is experimental and has never been truly tested.</p>"},{"location":"documentation/sardinopedia/clock/#b-link-mode","title":"B) Link Mode","text":"<p>Sardine can synchronise with other audio software / equipment through the Ableton Link protocol. You can switch from the regular clock to the Link clock by running the <code>c.link()</code> or <code>c.unlink()</code> method. Note that it is better to do this at startup and to shut down every running pattern before doing so because Sardine will dramatically jump in time. Some of your patterns might lie somewhere in the future, or somewhere in the past.</p> <p>This synchronisation mode works reasonably well. Sardine has been tested live on stage multiple times with the Link synchronisation enabled and it was stable enough to run for several hours unmonitored :) Depending on your hardware, you might have to nudge some messages in time a fair bit but it has nothing to do with the synchronisation itself but more likely with how your system is handling messages (internal delay of some sort).</p>"},{"location":"documentation/sardinopedia/clock/#log-information","title":"Log information","text":"<p>For your own curiosity, you can turn on clock monitoring by switching a boolean: <code>c.debug = True</code>. Be careful, the information is very invasive and it can be very fast. You will see how the clock advances in time by ticking at a steady rate. Please turn this mode off before playing anything because printing is not innocent, it can have a temporal cost that will cause the clock to slow down a little.</p>"},{"location":"documentation/sardinopedia/clock/#ii-attributes-and-useful-information","title":"II - Attributes and useful information","text":"<ul> <li><code>c.beat</code>: current beat.</li> <li><code>c.phase</code>: current phase.</li> <li><code>c.ppqn</code>: current pulses per quarter note.</li> <li><code>c.tick</code>: current tick.</li> </ul>"},{"location":"documentation/sardinopedia/clock/#iii-shifting-latency","title":"III - Shifting / Latency","text":"<ul> <li><code>c._superdirt_nudge</code>: adding a delay the timestamp attached to each SuperDirt message.</li> <li><code>c._midi_nudge</code>: nudging MIDI in time.</li> <li><code>c.accel</code>: acceleration of the clock, between <code>0</code> and <code>100</code>%. Similar to a jog on a DJ controller.</li> <li><code>c.nudge</code>: nudging clock temporarily (for one cycle).</li> </ul>"},{"location":"documentation/sardinopedia/introduction/","title":"Introduction","text":"<p>The Sardinopedia is a growing and ordered collection of Sardine patterns. They are usually sorted in sections, showcasing various features of the system. Patterns worthy of inclusion in the Sardinopedia must at least have one of the following qualities:</p> <ul> <li> <p>they are demonstrative: they highlight a particular feature.</p> </li> <li> <p>they are didactic: they teach you how to use Sardine.</p> </li> <li> <p>they are musical: they have an interesting musical result.</p> </li> <li> <p>they are odd: they show something odd, unexpected, funny, etc...</p> </li> </ul> <p>Some sections can be really verbose. They will contain explanations about usage of the system. As such, the Sardinopedia is your main source of documentation concerning Sardine. This documentation is entirely written by the community. Feel free to contribute by altering what is found in the <code>docs/</code>\u00a0folder and to add whatever you see fit! There are some areas where the Sardinopedia is a bit lacking!</p>"},{"location":"documentation/sardinopedia/melody/","title":"Melody","text":""},{"location":"documentation/sardinopedia/melody/#pitch","title":"Pitch","text":""},{"location":"documentation/sardinopedia/melody/#playback-speed-s","title":"Playback speed (S)","text":"<p><pre><code>@swim\ndef hh(p=0.5, i=0):\n    D('hh', speep='[1:8]', i=i)\n    again(hh, p=0.5, i=i+1)\n</code></pre> Changing the speed of audio playback for a given audio sample. Cheap version of tuning.</p>"},{"location":"documentation/sardinopedia/melody/#sample-to-pitch-s","title":"Sample to pitch (S)","text":"<p><pre><code>@swim\ndef hh(p=0.5, i=0):\n    D('hh', midinote='C5!3, E5, G5', i=i)\n    again(hh, p=0.5, i=i+1)\n</code></pre> Pitching an audio sample relatively to a MIDI note.</p>"},{"location":"documentation/sardinopedia/melody/#sample-to-freq-s","title":"Sample to freq (S)","text":"<p><pre><code>@swim\ndef hh(p=0.5, i=0):\n    D('hh', freq='100 + (r*2000)', i=i)\n    again(hh, p=0.5, i=i+1)\n</code></pre> Pitching an audio sample relatively to a given frequency (in <code>hertz</code>).</p>"},{"location":"documentation/sardinopedia/pattern_language/","title":"Sardine Pattern Language","text":""},{"location":"documentation/sardinopedia/pattern_language/#i-the-sardine-pattern-language","title":"I - The Sardine Pattern Language","text":"<p>I have talked a fair bit about the internal programming language used by Sardine. Let's deep dive and learn more about it. This language is dedicated to creating patterns of notes, numbers, samples and addresses. It is an ongoing project and might be subject to change in upcoming versions but there is a subset of stable features that you can use without risking your code to break too fast :) The syntax, much like the syntax of a regular general-purpose programming languages is organised in primitive types and unary / binary operators or functions you can apply on/to them. It is very reminescent of Python but with a twist!</p> <p>I am not very skilled at developing custom programming languages but the plan.. you get it.. is to get better at it by practising and getting help from others. If you already know how to build things like this, the architecture for the Sardine language is rather sane and self-contained. The language can be developed and tested against unit tests. Go for it!</p>"},{"location":"documentation/sardinopedia/pattern_language/#ii-primitive-types","title":"II - Primitive types","text":""},{"location":"documentation/sardinopedia/pattern_language/#a-integers-and-floating-point-numbers","title":"A) Integers and floating-point numbers","text":"<pre><code>@swim\ndef number(p=0.5, i=0):\n    print(Pat('1, 1+1, 1*2, 1/3, 1%4, 1+(2+(5/2))', i))\n    again(number, p=0.5, i=i+1)\n</code></pre> <p>You can write numbers (both\u00a0integers and floating point numbers) and use common operators such as addition, substraction, division, multiplication, modulo, etc... For precision in your calculations, you can of course resort to using parentheses. By default, Sardine is made so that most arithmetic operators can be used on almost anything, expect if intuitively it doesn't make sense at all like multiplying a string against a string.</p> <p>Let's stop for a moment and try to remember the following: you can apply arithmetics to numbers but also to lists! You can for instance write an addition between a number and a list, between two lists, between a number and a note, between a chord and a list, etc.. All of this is supported by the language. Incidentally, it means that functions that work on lists can also work on single tokens. It also means that functions that are supposed to work for single numbers will work for lists, because the function will be mapped to every element in the list. It turns the act of composing patterns into a rather organic process.</p>"},{"location":"documentation/sardinopedia/pattern_language/#a1-time-dependant-numbers","title":"a1) Time-dependant numbers","text":"<pre><code>@swim\ndef number(p=0.5, i=0):\n    print(Pat('$, r, m, p', i))\n    again(number, p=0.5, i=i+1)\n</code></pre> <p>Some number tokens are clock-time dependant (based on Sardine clock time) and refer to a moment in time. Depending on the moment your recursion takes place, you might see some values recurring because you are not polling continuously but polling just a tiny and predictible moment in time.</p> <ul> <li><code>$</code>: tick, the tick number since the clock started.</li> <li><code>$.p</code>: phase, a number between <code>0</code> and your <code>c.ppqn</code>.</li> <li><code>$.m</code>: measure, the measure since the clock started.</li> </ul> <pre><code>@swim\ndef number(p=0.5, i=0):\n    print(Pat('$, $.m, $.p', i))\n    again(number, p=0.5, i=i+1)\n</code></pre> <p>Some other number tokens are absolute-time dependant. They are mostly used for long-running sequences and/or for introducing a random factor in the result of the expression. You will notice that they are prefixed by <code>$</code>.</p> <pre><code>@swim\ndef rand(p=0.5, i=0):\n    print(Pat('T.U, T.Y, T.M, T.D, T.h, T.m, T.s, T.\u00b5', i))\n    again(rand, p=0.5, i=i+1)\n</code></pre> <ul> <li><code>T.U</code>: Unix Time, the current Unix Time.</li> <li><code>T.Y</code>: year, the current year.</li> <li><code>T.M</code>: month, the current month.</li> <li><code>T.D</code>: day, the current day.</li> <li><code>T.h</code>: hour, the current hour.</li> <li><code>T.m</code>: minute, the current minute.</li> <li><code>T.s</code>: second, the current second.</li> <li><code>T.\u00b5</code>: microsecond, the current microsecond.</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#a2-random-numbers","title":"a2) Random numbers","text":"<p>You can write random numbers by using the letter <code>r</code>. By default, <code>r</code> will return a floating point number between <code>0.0</code>\u00a0and <code>1.0</code>\u00a0but it will be casted to integer if it makes more sense in that context (<code>e.g.</code> <code>sample:r*8</code>). This is not the only way to generate a random number. For instance,\u00a0<code>r</code> and <code>0.0~1.0</code> yield a similar result. Redundancy is good when working with a programming language!</p>"},{"location":"documentation/sardinopedia/pattern_language/#a3-patterns-out-of-time","title":"a3) Patterns out of time","text":"<pre><code>@swim\ndef outof(p=0.5, i=0):\n    D('cp', speed='$%20', i=i)\n    again(outof, p=0.5, i=i+1)\n</code></pre> <p>Timed tokens make good low frequency oscillators, ramps or oscillating patterns. Playing with time tokens using modulos or the <code>sin()</code>, <code>coD()</code>\u00a0or <code>tan()</code> functions is a great way to get generative results out of a predictible sequence. It is very important to practice doing this, especially if you are planning to use fast swimming functions. The faster you recurse, the better your timing resolution. You can start to enter into the realm of signal-like patterns that can be particularly good for generating fluid patterns.</p>"},{"location":"documentation/sardinopedia/pattern_language/#b-notes","title":"B) Notes","text":"<pre><code>@swim\ndef note(p=0.5, i=0):\n    D('pluck', midinote='C5,D5,E5,F5,G5', i=i)\n    again(notes, p=0.5, i=i+1)\n</code></pre> <p>Notes are one of the primitives you can use in patterns. Notes will always be converted to some MIDI value (an integer value between <code>0</code> and <code>127</code>). Notes will be converted to some MIDI value used by SuperDirt. If you need more precision, speak in hertzs (<code>freq=402.230239</code>). Notes are numbers too (!!). You can do math on them if you wish to. The syntax to write notes is the following:</p> <ul> <li>1) [MANDATORY] capital letter indicating the note name: <code>C</code>,<code>D</code>,<code>E</code>,<code>F</code>,<code>G</code>,<code>A</code>,<code>B</code>. Sardine also supports the french notation system, so you can write <code>Do, R\u00e9, Mi, Fa, Sol, La, Si</code>\u00a0if it feels more natural to you :)</li> <li>2) [FACULTATIVE] flat or sharp: <code>#</code>, <code>b</code>.</li> <li>3) [FACULTATIVE] octave number: <code>0</code>..<code>9</code>.</li> </ul> <p>Of course, if you are a robot, you might prefer to speak in numbers. Because notes are turned into numbers, you can do this and Sardine will not complain. It can be particularly useful to generate custom voicings or weirdly shaped chords that you want to transpose and invert around: <code>&lt;([0,4,7,9,10,11]+50)^1&gt;</code>.</p>"},{"location":"documentation/sardinopedia/pattern_language/#b1-note-qualifiers","title":"b1) Note qualifiers","text":"<pre><code>@swim\ndef note(p=0.5, i=0):\n    D('pluck', midinote='C5@penta', i=i)\n    again(notes, p=0.5, i=i+1)\n</code></pre> <p>You can use the <code>@</code> operator to qualify a note (or a number?). This will turn a note into  a collection of notes / structure based on the targetted note. <code>C@penta</code> will summon a major pentatonic scale based on the middle C note: <code>[60, 62, 64, 67, 69]</code>. Be careful while using them as they will instantly turn a single token into a list of <code>x</code>\u00a0tokens. You might want to filter part of a qualifiers note collection.</p> <p>You will soon find out that it can be cumbersome to summon a long list of notes from the realm of oblivion. You will have to learn techniques to get better at summoning the exact materials you want and some processing by using functions might be needed to get a better result. Writing your patterns by hand is also an option if you are able to think and write down precise harmonic / melodic materials. Check out functions like <code>filt()</code> or <code>quant()</code>.</p> <p>Take note that the following list is not always perfectly up to date. Moreover, it can be particularly tricky for you to remember how I named some of the structures:</p> <pre><code>qualifiers = {\n\n    ##########\n    # Chords #\n    ##########\n\n    \"dim\": [0, 3, 6, 12],\n    \"dim9\": [0, 3, 6, 9, 14],\n    \"hdim7\": [0, 3, 6, 10],\n    \"hdim9\": [0, 3, 6, 10, 14],\n    \"hdimb9\": [0, 3, 6, 10, 13],\n    \"dim7\": [0, 3, 6, 9],\n    \"aug\": [0, 4, 8, 12],\n    \"augMaj7\": [0, 4, 8, 11],\n    \"aug7\": [0, 4, 8, 10],\n    \"aug9\": [0, 4, 10, 14],\n    \"maj\": [0, 4, 7, 12],\n    \"maj7\": [0, 4, 7, 11],\n    \"maj9\": [0, 4, 11, 14],\n    \"minmaj7\": [0, 3, 7, 11],\n    \"five\": [0, 7, 12],\n    \"six\": [0, 4, 7, 9],\n    \"seven\": [0, 4, 7, 10],\n    \"nine\": [0, 4, 10, 14],\n    \"b9\": [0, 4, 10, 13],\n    \"mM9\": [0, 3, 11, 14],\n    \"min\": [0, 3, 7, 12],\n    \"min7\": [0, 3, 7, 10],\n    \"min9\": [0, 3, 10, 14],\n    \"sus4\": [0, 5, 7, 12],\n    \"sus2\": [0, 2, 7, 12],\n    \"b5\": [0, 4, 6, 12],\n    \"mb5\": [0, 3, 6, 12],\n\n    ##########\n    # Scales #\n    ##########\n\n    \"major\": [0, 2, 4, 5, 7, 9, 11],\n    \"minor\": [0, 2, 3, 5, 7, 8, 10],\n    \"hminor\": [0, 2, 3, 5, 7, 8, 11],\n    \"vminor\": [0, 2, 3, 5, 7, 8, 10],\n    \"penta\": [0, 2, 4, 7, 9],\n    \"acoustic\": [0, 2, 4, 6, 7, 9, 10],\n    \"aeolian\": [0, 2, 3, 5, 7, 8, 10],\n    \"algerian\": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 17],\n    \"superlocrian\": [0, 1, 3, 4, 6, 8, 10],\n    \"augmented\": [0, 3, 4, 7, 8, 11],\n    \"bebop\": [0, 2, 4, 5, 7, 9, 10, 11],\n    \"blues\": [0, 3, 5, 6, 7, 10],\n    \"chromatic\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    \"dorian\": [0, 2, 3, 5, 7, 9, 10],\n    \"doubleharmonic\": [0, 1, 4, 5, 8, 11],\n    \"enigmatic\": [0, 1, 4, 6, 8, 10, 11],\n    \"flamenco\": [0, 1, 4, 5, 7, 8, 11],\n    \"gypsy\": [0, 2, 3, 6, 7, 8, 10],\n    \"halfdim\": [0, 2, 3, 5, 6, 8, 10],\n    \"harmmajor\": [0, 2, 4, 5, 7, 8, 11],\n    \"harmminor\": [0, 2, 3, 5, 7, 8, 11],\n    \"hirajoshi\": [0, 4, 6, 7, 11],\n    \"hungarianminor\": [0, 2, 3, 6, 7, 8, 11],\n    \"hungarianmajor\": [0, 3, 4, 6, 7, 9, 10],\n    \"in\": [0, 1, 5, 7, 8],\n    \"insen\": [0, 1, 5, 7, 10],\n    \"ionian\": [0, 2, 4, 5, 7, 9, 11],\n    \"istrian\": [0, 1, 3, 4, 6, 7],\n    \"iwato\": [0, 1, 5, 6, 10],\n    \"locrian\": [0, 1, 3, 5, 6, 8, 10],\n    \"lydianaug\": [0, 2, 4, 6, 8, 9, 11],\n    \"lydian\": [0, 2, 4, 5, 7, 8, 9, 11],\n    \"majorlocrian\": [0, 2, 4, 5, 6, 8, 10],\n    \"majorpenta\": [0, 2, 4, 7, 9],\n    \"minorpenta\": [0, 3, 5, 7, 10],\n    \"melominup\": [0, 2, 3, 5, 7, 9, 11],\n    \"melomindown\": [0, 2, 3, 5, 7, 8, 10],\n    \"mixolydian\": [0, 2, 4, 5, 7, 9, 10],\n    \"neapolitan\": [0, 1, 3, 5, 7, 8, 11],\n    \"octatonic\": [0, 2, 3, 5, 6, 8, 9, 11],\n    \"octatonic2\": [0, 1, 3, 4, 6, 7, 9, 10],\n    \"persian\": [0, 1, 4, 5, 6, 8, 11],\n    \"phrygian\": [0, 1, 4, 5, 7, 8, 10],\n    \"prometheus\": [0, 2, 4, 6, 9, 10],\n    \"harmonics\": [0, 3, 4, 5, 7, 9],\n    \"tritone\": [0, 1, 4, 6, 7, 10],\n    \"ukrainian\": [0, 2, 3, 6, 7, 9, 10],\n    \"whole\": [0, 2, 4, 6, 8, 10],\n    \"yo\": [0, 3, 5, 7, 10],\n    \"symetrical\": [0, 1, 2, 6, 7, 10],\n    \"symetrical2\": [0, 2, 3, 6, 8, 10],\n    \"messiaen1\": [0, 2, 4, 6, 8, 10],\n    \"messiaen2\": [0, 1, 3, 4, 6, 7, 9, 10],\n    \"messiaen3\": [0, 2, 3, 4, 6, 7, 8, 10, 11],\n    \"messiaen4\": [0, 1, 2, 4, 6, 7, 8, 11],\n    \"messiaen5\": [0, 1, 5, 6, 7, 11],\n    \"messiaen6\": [0, 2, 4, 5, 6, 8],\n    \"messiaen7\": [0, 1, 2, 3, 5, 6, 7, 8, 9, 11],\n\n    ##############\n    # Structures #\n    ##############\n\n    \"fourths\": [0, 4, 10, 15, 20],\n    \"fifths\": [0, 7, 14, 21, 28],\n    \"sixths\": [0, 9, 17, 26, 35],\n    \"thirds\": [0, 4, 8, 12],\n    \"octaves\": [0, 12, 24, 36, 48],\n}\n</code></pre>"},{"location":"documentation/sardinopedia/pattern_language/#b2-note-modifiers","title":"b2) Note modifiers","text":"<pre><code>@swim\ndef note(p=0.5, i=0):\n    D('pluck', midinote='disco(C5@penta)', i=i)\n    again(notes, p=0.5, i=i+1)\n</code></pre> <p>Functions can be used to further refine the effect of a modifier. There is a long list of functions that you can apply, such as <code>disco()</code> or <code>adisco()</code> as shown in the preceding example. If you ever wonder about the list of possible functions, refer to the Sardinopedia or enter any function name. If the function name is wrong, the list of possible functions will be printed out in the terminal.</p>"},{"location":"documentation/sardinopedia/pattern_language/#b3-chord-collection-inversion","title":"b3) Chord / Collection inversion","text":"<pre><code>@swim\ndef note(p=0.5, i=0):\n    D('pluck', midinote='disco(C5@maj7^4)', i=i)\n    again(notes, p=0.5, i=i+1)\n</code></pre> <p>You can write chord inversions using the <code>^</code> syntax. It will accept any valid expression like <code>^1~5</code>. You can also feed negative numbers for inverting a chord downwards. Chord inversions are not only for chords but they also work on lists, which means that you can write custom chords and transpose them up or down :)</p>"},{"location":"documentation/sardinopedia/pattern_language/#b4-mathematics-on-notes","title":"b4) Mathematics on notes","text":"<p><pre><code>@swim\ndef note(p=0.5, i=0):\n    D('pluck', midinote='disco(braid(C5+0|4|8@penta')), i=i)\n    again(notes, p=0.5, i=i+1)\n</code></pre> You can use arithmetic operators on notes like if they were a regular number. That's because they are really just numbers! Random and time-dependant numbers are numbers too. Notes are numbers too so you can add a note to a note even if it doesn't really make sense. It will also not probably sound very good because notes are clamped in the range from <code>0</code> to <code>127</code>.</p>"},{"location":"documentation/sardinopedia/pattern_language/#b5-polyphony","title":"b5) Polyphony","text":""},{"location":"documentation/sardinopedia/pattern_language/#note-polyphony","title":"Note polyphony","text":"<pre><code>@swim \ndef poly(p=0.5, i=0):\n    D('&lt;[superpiano]&gt;', cutoff=500, midinote='&lt;D@maj9&gt;, &lt;G@maj7^0&gt;, &lt;D@maj9&gt;, &lt;G@dim7^1&gt;', i=i, d=2, r=0.25)\n    again(poly, p=Pat('0.5!4, 0.25!2', i), i=i+1)\n</code></pre> <p>You can use the <code>&lt;</code> and <code>&gt;</code> delimiters to make parts of your pattern polyphonic. You will soon notice that there are multiple types of polyphony available but the most notable of all, demonstrated in the example above, is the note polyphony. It allows you to superpose multiple note events in your patterns just like you expected. However, Sardine allows you to deal with polyphony in more unexpected ways. There a few rules to understand about polyphony and polyphonic messages. These rules can sound quite counter-intuitive if you think about it in a traditional way.</p> <p>The size of a polyphonic event -- meaning the number of messages sent for one occurence of an event -- is equal to the length of the largest polyphonic pattern you declared. In the first example, we have a 4-5 note polyphony. Every polyphonic element from our pattern is a major 9 or 7 chord (e.g <code>[62, 66, 69, 73, 76]</code>). It means that if you have a polyphony of <code>2</code> somewhere and a polyphony of <code>4</code> elsewhere, your first polyphony will be distributed over the second one:</p> <p><pre><code>1) [1,2,3,4]\n2) [0,1]\n\nRESULT:\n1) [1,2,3,4]\n2) [0,1,0,1]\n    | | | |\n   POLYPHONY\n</code></pre> <pre><code>@swim \ndef poly(p=0.5, i=0):\n    D('&lt;[bd, superpiano]&gt;', cutoff=500, midinote='&lt;D@maj9&gt;, &lt;G@maj7^0&gt;, &lt;D@maj9&gt;, &lt;G@dim7^1&gt;', i=i, d=2, r=0.25)\n    again(poly, p=Pat('0.5!4, 0.25!2', i), i=i+1)\n</code></pre></p> <p>To illustrate the preceding rule we just talked about, here is a truly bizarre example. Half of our chord is played by a tuned bassdrum, the other half by a piano. Even though this may look odd, this is fully compliant with how parameters are handled by Sardine. We have two clear alternations, one between the <code>superpiano</code> and <code>bd</code> sound sets, the other between the four or five values that form our chords. It is then natural that half of our polyphony will be composed from a tuned bassdrum and the remaining half from a tuned piano. Once you get use to this novel way of thinking about polyphonic patterns, you will see that it opens up some space for interesting polyphonic interactions between sounds :)</p> <p>It is currently not possible to limit the number of voices generated by an event. Be careful! It is quite easy to go from some easy and sparse chords to black MIDI!</p>"},{"location":"documentation/sardinopedia/pattern_language/#parametric-polyphony","title":"Parametric polyphony","text":"<p><pre><code>@swim \ndef poly(p=0.5, i=0):\n    D('drum:[1,6]', speed='&lt;[1,clamPat(r, 0.1, 1)]&gt;, &lt;[2,1.9]&gt;', i=i, d=3)\n    D('drum:2', cutoff='&lt;[500:2000,500]*sin($%r*80/40)*10&gt;', i=i, d=2)\n    D('bd', shape=0.5).out(i, 4)\n    again(poly, p=0.5/2, i=i+1)\n</code></pre> Everything can become polyphonic. Just wrap anything between <code>&lt;</code> and <code>&gt;</code> and you will return <code>x</code> events, one for each value. It allows you to be very creative with patterns.</p>"},{"location":"documentation/sardinopedia/pattern_language/#c-names","title":"C)\u00a0Names","text":"<pre><code>@swim\ndef name(p=0.5, i=0):\n    D('bd, pluck, bd, pluck:2+4', i=i)\n    again(names, p=0.5, i=i+1)\n</code></pre> <p>You are using name patterns since you first started to read the Sardinopedia! A single letter (if it's not already a note name) can be considered as a name. Be careful! There are a few hidden rules for names. Names can be one letter long but some letters are already taken by some parts of the language (such as <code>r</code>). Names cannot begin with a number. It is also forbidden to use any symbol inside your names.</p>"},{"location":"documentation/sardinopedia/pattern_language/#d-addresses","title":"D)\u00a0Addresses","text":"<pre><code>O(osc_client, \"an/address, another/address\", value=1, other_value=2)\n</code></pre> <p>Addresses are just like names except that they can contain a <code>/</code> separator just like any other typical OSC address out there. They are not really distinct from a name. The difference is only conceptual and in the usage of your strings.</p>"},{"location":"documentation/sardinopedia/pattern_language/#ii-lists-and-collections","title":"II - Lists and Collections","text":"<p>The Sardine pattern notation is built around the idea of having multiple ways to deal with linear lists and collections. The basic arithmetic syntax and most operators work on single tokens but will also work on lists. It means that you can write expressions such as :</p> <pre><code>[0,1,2,3]%8\n[0,2,4,5]*[4,5]\n[1:8,0.1]&amp;[2,9]\n[0,2,4,5,9,10,12,14]!2\n[0,2,4,5,9,10,12,14]!!4\n</code></pre> <p>There are a few special operators that are only available when you deal with lists. This is something you will get familiar with by trying. You will see that most things work while some will not yield the result you expect.</p>"},{"location":"documentation/sardinopedia/pattern_language/#a-slicing-and-indexing","title":"A) Slicing and indexing","text":"<pre><code>@swim \ndef test_slice(p=0.5, i=0):\n    D('pluck:19', \n            legato=0.2,\n            midinote='([60,63,67,69, 71]&amp;[i.i, i.i + 8])^(1~8)', i=i)\n    again(test_slice, p=0.125, i=i+1)\n</code></pre> <p>You can get a slice or just one value from a list by using the special <code>&amp;</code> operator. It will work with any list on the right side of the operator but it will only take the first and second value of it no matter what to compose a slice. The index value can be infinite because the index is looping on the list. You can feed a random number generator and get something out. On the down side, it can become quite complex to write very fast, so be careful with it:</p> <pre><code>@swim \ndef test_slice(p=0.5, i=0):\n    D('pluck:19', \n            legato=0.2,\n            midinote='[60,62, 63,67, 69, 71]^(1~5)&amp;[r, r*4]', i=i)\n    again(test_slice, p=0.125, i=i+1)\n</code></pre>"},{"location":"documentation/sardinopedia/pattern_language/#b-extend","title":"B) Extend","text":"<pre><code>@swim \ndef test_extend(p=0.5, i=0):\n    D('pluck:19', legato=0.2, midinote='[60,62]!2', i=i)\n    again(test_extend, p=0.125, i=i+1)\n</code></pre> <p>Just like with numbers, names and addresses, you can extend a list by calling the <code>!</code> operator on it. It will repeat the list <code>x</code> times.</p>"},{"location":"documentation/sardinopedia/pattern_language/#c-extend-repeat","title":"C) Extend-repeat","text":"<p><pre><code>@swim \ndef test_extend_repeat(p=0.5, i=0):\n    D('pluck:19', legato=0.2, midinote='[60,62,63]!!3', i=i) #note the repetition of values within the list\n    again(test_extend_repeat, p=0.125, i=i+1)\n</code></pre> The variant <code>!!</code> now makes sense. It allows you to repeat each individual value in a list <code>x</code> times.</p>"},{"location":"documentation/sardinopedia/pattern_language/#iii-operators","title":"III - Operators","text":""},{"location":"documentation/sardinopedia/pattern_language/#a-choice","title":"A) Choice","text":"<p><pre><code>@swim\ndef choosing_stuff(p=0.5, i=0):\n    D('bd|pluck', speed='1|2', i=i)\n    again(choosing_stuff, p=0.5, i=i+1)\n</code></pre> The pipe operator <code>|</code> can be used on anything to make a 50/50% choice between two tokens. You can also chain them: <code>1|2|3|4</code>. The behavior of chaining multiple choice operators has not been clearly defined. The distribution might not be the one you expect.</p>"},{"location":"documentation/sardinopedia/pattern_language/#b-ranges","title":"B) Ranges","text":"<pre><code>@swim\ndef rangeD(p=0.5, i=0):\n    D('pluck|jvbass', speed='1~5', i=i)\n    again(ranges, p=0.5, i=i+1)\n</code></pre> <p>If you want to generate a number in the range <code>x</code> to <code>y</code> included, you can use the <code>~</code> operator. It spits an integer if you are using integers as boundaries but it will spit out a floating point number if you are using floating point numbers as boundaries. If you use an integer on one side and a floating point number on the other side, a floating point number will be returned. It can be used as an alternative to the <code>r</code> token for generating random numbers.</p>"},{"location":"documentation/sardinopedia/pattern_language/#c-ramps","title":"C) Ramps","text":"<pre><code>@swim\ndef rampD(p=0.5, i=0):\n    D('amencutup:[0:10]', \n        room='[0:1,0.1]',\n        cutoff='[1:10]*100', i=i)\n    again(ramps, p=0.5, i=i+1)\n</code></pre> <p>You can generate ramps of integers using the <code>[1:10]</code> syntax. This works just like Python's range function. Well, almost... it's way better! You can generate descending ramps easily: <code>[10:1]</code>. You can also generate ascending ramps of floating point numbers by precising a step other than <code>1</code>: <code>[1:10,0.5]</code>. Of course, this also works the other way around :)</p>"},{"location":"documentation/sardinopedia/pattern_language/#d-repeat","title":"D) Repeat","text":"<pre><code>@swim\ndef repeat_stuff(p=0.5, i=0):\n    D('pluck|jvbass', speed='1:2', midinote='C4!4, E4!3, E5, G4!4', i=i)\n    again(repeat_stuff, p=0.5, i=i+1)\n</code></pre> <p>The <code>!</code> operator inspired by TidalCycles is used to denote the repetition of a value. You can also sometimes use the <code>!!</code> operator from the same family. This operator is a bit different, because it is supposed to be used on lists. You can do maths on lists as well with Sardine, but this will be detailed in a section later on.</p>"},{"location":"documentation/sardinopedia/pattern_language/#e-silence","title":"E) Silence","text":"<pre><code>@swim \ndef silence_demo(p=0.5, i=0):\n    D('bd,...', i=i, d=1)\n    D('hh,., hh,..', i=i, d=1)\n    again(silence_demo, p=1/8, i=i+1)\n</code></pre> <p>You can use a dot (<code>.</code>) inside any pattern to indicate a silence. Silence is a very important and complex topic. Adding silences is a great way to generate interesting patterns. Silences are different for each sender because silence doesn't have the same meaning for a sampler, a MIDI output or an OSC output (<code>D()</code>, <code>N()</code>, <code>O()</code>):</p> <ul> <li> <p><code>D()</code>: a silence is the absence of a sample. The event will be skipped.</p> </li> <li> <p><code>N()</code>: a silence is the absence of a note. The event will be skipped.</p> </li> <li> <p><code>O()</code> (any OSC based Sender): a silence is the absence of an address. The event will be skipped.</p> </li> </ul> <p>There is also the interesting case of what I like to call 'parametric silences'. Take a look at the following example:</p> <pre><code>@swim \ndef silence_demo(p=0.5, i=0):\n    D('sitar', legato='0.5', speed='[1:4], .!8', i=i, d=1)\n    again(silence_demo, p=1/8, i=i+1)\n</code></pre> <p>We always have a sample here. There is no real silence but we have still have some silences included in\u00a0the <code>speed</code> subpattern. It also has an effect. In the absence of a value for that silence, Sardine will backtrack and search the last value that could have been generated by the pattern. The result of the <code>speed</code> parameter will then be <code>[1,2,3,4,8,8,8,8,8,8,8,8]</code>. For people familiar with modular synthesis, this is pretty much equivalent to a sample &amp; hold mechanism.</p> <p>It is impossible to write a parametric silence composed only of silences. It doesn't mean anything to provide a value and actually not providing it.</p>"},{"location":"documentation/sardinopedia/pattern_language/#iv-amphibian-variables","title":"IV - Amphibian variables","text":""},{"location":"documentation/sardinopedia/pattern_language/#a-amphibian-variables","title":"A) Amphibian variables","text":"<pre><code>V.s = 60 # this is an amphibian variable\n\n@swim\ndef fun():\n    # Calling it and setting it to v.s + 5\n    N(note='v.s = v.s + 5')\n    if random() &gt; 0.8:\n        V.s = 60 #\u00a0resetting so it doesn't go too high\n    again(fun)\n</code></pre> <p>There is a group of variables called amphibian variables that are both valid inside and outside the pattern notation. They are defined by <code>v</code> followed by a letter from the alphabet (uppercase or lowercase) : <code>V.a</code>, <code>V.A</code>, <code>V.Z</code>, <code>V.j</code>. These variables can be freely manipulated from the Python side or from the pattern side. They are totally transparent.</p> <pre><code>@swim \ndef fun(p=0.25):\n    # Now having fun with it\n    N(note='v.s = v.s + 5|2') # more fun\n    if random() &gt; 0.8:\n        v.s = 50\n    again(fun, p=0.25)\n</code></pre> <p>You can use them to leverage Python or the pattern syntax for what they do best: patterning or dealing with complex algorithmic transformations. Having them both available makes the pattern syntax even more expressive.</p> <p>There is a finite list of actions you can perform on amphibian variables:</p> <ul> <li> <p>using them (just by calling them)</p> </li> <li> <p>setting them (<code>V.i = 5</code>)</p> </li> <li> <p>resetting them to 0 (<code>V.i.reset</code>)</p> </li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#b-amphibian-iterators","title":"B) Amphibian iterators","text":"<pre><code>@swim\ndef amphi_iter(p=0.25):\n    D('amencutup:[1:10]', i=i.i)\n    if random() &gt; 0.8:\n        i.i = 0\n    again(amphi_iter, p=0.25)\n</code></pre> <p>Similarly to amphibian variables, there is a thing called amphibian iterators that are valid on both sides. They are defined by <code>I</code> followed by a letter from the alphabet (uppercase or lowercase) : <code>I.a</code>, <code>I.A</code>, <code>I.Z</code>, <code>I.j</code>. They can be use as substitutes for your regular manual recursive iterators. In the example above, I am using an amphibian iterator to summon a breakbeat.</p> <pre><code>@swim\ndef amphi_iter(p=0.25):\n    D('amencutup:[1:10]', speed='1|2|i.i=0', i=i.i)\n    again(amphi_iter, p=0.25)\n</code></pre> <p>These iterators can be reset or set on the pattern side!</p> <p><pre><code>@swim\ndef amphi_iter(p=0.25):\n    if random() &gt; 0.8:\n        I.i = [1, 5]\n    else:\n        i.i = [1, 2]\n    D('amencutup:[1:10]', speed='i.v|i.v=[1,2]', i=i.i)\n    again(amphi_iter, p=0.25)\n</code></pre> Similarly, you can define the step value between each value by providing a list of two numbers. This is valid on both sides.</p>"},{"location":"documentation/sardinopedia/pattern_language/#v-the-function-library","title":"V - The Function Library","text":"<p>Sardine pattern notation now comes with a function library. These are functions that should be used directly in the pattern notation to alter a list or a pattern you are working on. They can take basically any input but you will soon figure that some are more specialised than others. This is the part of the language that is the more subject to changes in upcoming versions. That's why I am only talking about it now, at the bottom of a fairly long page.</p> <p>I want to explore how far you can go by introducing functional concepts to handle linear sequences. So far, only functions are available. The next step will be to introduce high-order functions and to build a small set of functional operations to pattern functions themselves. Only then will I be happy. I will base myself on that work to write a decent and complex function library.</p>"},{"location":"documentation/sardinopedia/pattern_language/#a-sinus-cosinus-tangent","title":"A) Sinus, Cosinus, Tangent","text":"<ul> <li> <p><code>sin(x)</code>: sinus of input (single tokens or lists). Classic mathematical sinus function.</p> </li> <li> <p><code>cos(x)</code>: cosinus of input (single tokens or lists). Classic mathematical cosinus function.</p> </li> <li> <p><code>tan(x)</code>: tangent of input (single tokens or lists). Classic mathematical tangent function.</p> </li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#b-scaling-measuring","title":"B) Scaling, measuring","text":"<ul> <li><code>abs(x)</code>: Absolute value.</li> <li><code>max(x)</code>: Maximum value of list or token itself.</li> <li><code>min(x)</code>: Minimum value of list or token itself.</li> <li><code>mean(x)</code>: Mean of list or token itself.</li> <li><code>scale(z, x, y, x', y')</code>: Bring a value <code>z</code> from range <code>x-y</code> to range <code>x'-y'</code>.</li> <li><code>clamPat(x, y, z)</code>: Clamp function, limit a value <code>x</code> to the minimum <code>y</code>\u00a0to the maximum <code>z</code>.</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#c-reversal-shuffling","title":"C) Reversal, shuffling","text":"<ul> <li><code>rev(x)</code>: Reverse a list.</li> <li><code>shuf(x)</code>: Shuffle a list.</li> <li><code>pal(x)</code>: palindrome of list.</li> <li><code>apal(x)</code>: palindrome of list without repetition of last value.</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#d-musical-functions","title":"D) Musical functions","text":"<ul> <li><code>disco(x)</code>: Disco function. Every pair note down an octave.</li> <li><code>adisco(x)</code>: Anti-disco function. Every pair note up an octave.</li> <li><code>bass(x)</code>: The first note of list is down an octave (not very useful).</li> <li><code>sopr(x)</code>: The last note of list is up an octave (not very useful).</li> <li><code>quant(x, y)</code>: The last note of list is up an octave (not very useful).</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#e-voice-leading","title":"E) Voice Leading","text":"<p>These are two voice leading algorithms. These are only temporary until I figure out a better solution. They usually take a list of four note chords and arrange the voice to minimise movement. They work great but they are not the funniest thing you've ever seen. I'll work on them to make it better!</p> <ul> <li><code>voice(x)</code>: four-note voice leading algorithm. Naive implementation.</li> <li><code>dmitri(x)</code>: four-note voice leading algorithm. Algorithm inspired by Dmitri Tymoczko's work.</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#f-probabilities","title":"F) Probabilities","text":"<ul> <li><code>vanish(x, y)</code>: Takes a list <code>x</code>, output only <code>y</code>% of values from it.</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#g-booleans","title":"G) Booleans","text":"<ul> <li> <p><code>euclid(a, b, c, d)</code>: Euclidian rhythm function applied to patterns. Takes a pattern <code>a</code>, a number of pulses <code>b</code>, a number of steps <code>c</code> and a rotation amount <code>d</code>. Outputs a pattern where the absence of a pulse is a silence and where pulses are values from the pattern.</p> </li> <li> <p><code>mask(x, y)</code>: Generalisation of the euclidian rhythm algorithm. Works for any pattern and list of booleans.</p> </li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#h-insertion-and-rotation","title":"H) Insertion and rotation","text":"<p>To be documented:</p> <ul> <li><code>in(x, y)</code>:</li> <li><code>inPat(x, y)</code>:</li> <li><code>inrot(x, y)</code>:</li> <li><code>inprot(x, y)</code>:</li> </ul>"},{"location":"documentation/sardinopedia/pattern_language/#i-filtering","title":"I) Filtering","text":"<ul> <li><code>filt(x, y)</code>:</li> </ul>"},{"location":"documentation/sardinopedia/patterning/","title":"The pattern system","text":""},{"location":"documentation/sardinopedia/patterning/#the-importance-of-patterning","title":"The importance of patterning","text":"<p>By nature, swimming functions are repetitive. Almost everything you play with is falling into a time loop. Strict repetition can be come pretty boring after a while, and you need to find a way to define events that will gradually change in time, whether it is because they are sequence of events, random events, mutating events, etc... Sequencing and patterning is the big deal for live-coders. That's how they think about composition / improvisation, that's how they write interesting music by patterning synthesizers, audio samples, custom events and much more. If you go down the rabbit hole, you can also pattern your patterns. You can also pattern the functions altering your patterns. There is no limit to it, only what you are trying to define and play with.</p> <p>Thinking about music being composed with patterns, recursion and time loops is a deparature from the timeline / score model we are used to when thinking about music being written on scores or being recorded on tape. By patterning and thinking about loops, we enter into a different relationship with sound materials and the management of musical information.</p> <p>It would have been weird to design Sardine without taking into account the fact that patterning is as much needed as control over the temporal execution of code. Sardine is taking some inspiration from ORCA (Devine Lu Linvega), FoxDot (Ryan Kirkbride) and TidalCycles (Alex McLean and colaborators). These systems, among others, have been designed just like Sardine around the idea of patterning values in musical time. They all choose a different route to do so, and come up in exchange with interesting concepts about what an event or even what time is in a musical improvisation system. Sardine is proposing its own flavor of patterning that you will soon discover :)</p>"},{"location":"documentation/sardinopedia/patterning/#i-what-are-patterns","title":"I - What are patterns?","text":"<p>Sardine was designed with its own internal pattern language. This pattern language is not Python but a very specialised subset of it written from scratch. It basically came into existence because of my frustration with the inability to define custom operators and to really override the behavior of primitive data types. This language is interpreted on-the-fly when you play music with Sardine. Some objects such as senders are really good at interpreting patterns naturally. Some can be forced to take patterns as arguments. You don't really have to care about it and the syntax is so close to Python that it never feels like speaking multiple languages.</p> <p>Patterns are lists. Everything you write in a pattern form will eventually output a list. Just like lists, you can extract values by using an iterator. With Sardine, patterns are usually written as strings (<code>\"1,2,3,4\"</code>, <code>\"$.p%20+10\"</code>, <code>\"C@min7^1\"</code>, etc...). Remember these few facts, all the rest is just the consequence of other mechanisms built around this behavior. There are multiple ways to extract values from a list:</p> <ul> <li> <p>in order, by reading every element of the list one after the other.</p> </li> <li> <p>in reverse order, the same thing the other way around.</p> </li> <li> <p>randomly, by taking arbitrary values out of the list.</p> </li> <li> <p>sometimes in one direction, sometimes randomly, sometimes in reverse order?</p> </li> </ul> <p>There are other things to take into consideration when time enters the game. How often should we extract values? Should we skip some elements if a time condition is met? What if the index is manipulated? What if you pattern all of this? As you can see, there is no end to this game and patterns can be sometimes boring, sometimes wonderful, sometimes totally chaotic to the point where it would be better not to have one, etc... It is a never-ending game of exploring them and finding the best techniques to create interesting variations.</p>"},{"location":"documentation/sardinopedia/patterning/#ii-observing-patterns","title":"II - Observing patterns","text":"<p>You can use the <code>Pat()</code> object to get a generic interface to Sardine patterns. This object can be used just anywhere you would like to see a pattern. It means that you can contaminate your Python functions or anything in your text buffer with them and see what comes out of it. As you will soon learn, the inverse is true. Python data can enter in the pattern realm as well.</p> <pre><code>@swim\ndef free(p=0.5, i=0):\n    print(Pat('1,2,3,4', i))\n    again(free, p=0.5, i=i+1)\n</code></pre> <p>In the example above, we are just using a swimming function to print the result of a pattern. It just goes through each element in sequence. That is because we are feeding an iterator to the <code>Pat(pattern, iterator)</code> function. Try to change that iterator. It'll already produce a variation on the pattern without even touching the pattern itself:</p> <pre><code>@swim\ndef free(p=0.5, i=0):\n    print(Pat('1,2,3,4', i if random() &gt; 0.5 else i+2))\n    again(free, p=0.5, i=i+1)\n</code></pre> <p>The good thing with writing your own language is that you can write it to make some things more easy to accomplish. Why counting to 4 by writing down each number? We already have something to do it for us:</p> <pre><code>@swim\ndef free(p=0.5, i=0):\n    print(Pat('[1:4]', i if random() &gt; 0.5 else i+2))\n    again(free, p=0.5, i=i+1)\n</code></pre> <p>Ok but now what if we would like to combine this pattern with the same one in the opposite direction? We can use functions from the <code>FuncLibrary</code> to do so:</p> <pre><code>@swim\ndef free(p=0.5, i=0):\n    print(Pat('pal([1:4])', i if random() &gt; 0.5 else i+2))\n    again(free, p=0.5, i=i+1)\n</code></pre> <p>You might sometimes feel a bit lost when writing complex patterns. As you'll soon discover, there are many features to the language. Always remember that you can print out patterns! You can observe them without making sound and you can even use them to do other tasks if you prefer. Sardine is cool for music playing but you can do much more with it. </p>"},{"location":"documentation/sardinopedia/patterning/#iii-patterns-and-senders","title":"III - Patterns and senders","text":"<p>It now all falls into place! We saw swimming functions, senders, and now patterns. These three features form the core of Sardine and you are now ready to understand all of it. String keyword arguments feeded to senders are patterns! These strings will be interpreted and replaced by lists internally to form the final message. Ok, but where is the iterator? You can see it in the tail of your sender, the <code>i</code>\u00a0letter in the example below.</p> <pre><code>@swim\ndef boom(p=0.5, i=0):\n    D('bd', \n        cutoff='r*2000',\n        speed='1,2,3,4', i=i)\n    again(boom, p=0.5, i=i+1)\n</code></pre> <p>Conceptually, senders are pattern sandwiches. It is a collection of lists sharing a common iterator. They all form a common event by merging together in a final message. The easiest way to deal with this is to have one and only one iterator but of course, if you don't like it that way, you can have multiple iterators in a single sender.</p> <pre><code>@swim\ndef boom(p=0.5, i=0):\n    D('bd', \n        cutoff=P('2000!4, 4000!2, 8000!3, 200~5000', i+2),\n        speed='1,2,3,4', i=i)\n    again(boom, p=0.5, i=i+1)\n</code></pre> <p>It can even be more extreme than this but it all depends on what you are trying to achieve! You already saw that the tail method of your sender also have additional parameters that you can use to further refine the message composition.</p>"},{"location":"documentation/sardinopedia/patterning/#iv-iterators-are-cool","title":"IV - Iterators are cool","text":"<pre><code>@swim\ndef boom(p=0.5, i=0):\n    D('bd', \n        cutoff=P('r*2000, 500, 1000', i%2),\n        speed='1, 2, 3, 4', i=randint(1,4))\n    again(boom, p=0.5, i=i+1)\n</code></pre> <p>You can be creative with iterators and easily generate semi-random sequences, drunk walks, reversed sequences, etc... Be sure to always have a few different iterators close by to morph your sequences really fast. I know that writing complex patterns is nice but they are nothing without good iterators.</p>"},{"location":"documentation/sardinopedia/rhythm/","title":"Rhythm","text":""},{"location":"documentation/sardinopedia/rhythm/#rhythm","title":"Rhythm","text":""},{"location":"documentation/sardinopedia/rhythm/#probability-rhythm","title":"Probability rhythm","text":"<pre><code>@swim\ndef bd(p=0.5):\n    if often():\n        D('bd')\n    if sometimes():\n        D('hh')\n    else:\n        D('pluck')\n    #\u00a0condensed\n    D('sd', trig=1 if sometimes() else 0)\n    again(bd, p=0.5)\n</code></pre> <p>Building rhythms based on chance that an event will happen. Rolling a dice. These small functions are borrowed from TidalCycles that is using them intensively in its very thorough patterning system.</p>"},{"location":"documentation/sardinopedia/rhythm/#binary-rhythm","title":"Binary rhythm","text":"<p><pre><code>@swim\ndef bd(p=0.5, i=0):\n    D('bd', trig=bin(20103), i=i)\n    again(bd, p=0.5, i=i+1)\n</code></pre> Using the binary representation of a number to build a rhythm. You don't need to know what the representation is to get an interesting rhythm out of it. Feed anything to the <code>bin</code> function and get something out!</p>"},{"location":"documentation/sardinopedia/rhythm/#euclidian-rhythm","title":"Euclidian rhythm","text":"<p><pre><code>@swim\ndef bd(p=0.5, i=0):\n    D('bd:r*20', trig=euclid(1,4), i=i)\n    D('hh:r*20', trig=euclid(6,8), i=i)\n    D('sd:r*20', trig=euclid(2,4), i=i)\n    again(bd, p=0.5, i=i+1)\n</code></pre> Building euclidian rhythms by using the <code>trig</code> argument. Note that this is not really an euclidian rhythm but it sure does look and feel like it. Trig allows you to skip an event.</p>"},{"location":"documentation/sardinopedia/rhythm/#shifting-rhythm","title":"Shifting rhythm","text":"<p><pre><code>@swim\ndef bd(p=0.5, i=0):\n    D('bd:r*20', trig=euclid(1,4), i=i)\n    D('hh:0~5', trig=euclid(6,8), i=i)\n    D('sd:$%20', trig=euclid(2,4), i=i)\n    again(bd, p=P('0.5!8, 0.25!4', i), i=i+1)\n</code></pre> Pattern the recursion delay to get free rhythms! You can even skip playing with <code>trig</code> and just play with the recursion <code>delay</code>\u00a0if you feel like it!</p>"},{"location":"documentation/sardinopedia/rhythm/#imperative-rhythm","title":"Imperative rhythm","text":"<p><pre><code>@swim\ndef zoom(p=0.5, i=0):\n    D('bd:r*20', i=i)\n    sleep(0.25)\n    D('hh:r*20', trig=euclid(6,8), i=i)\n    sleep(0.125)\n    D('sd:r*20', trig=euclid(2,4), i=i)\n    again(zoom, p=0.5, i=i+1)\n</code></pre> Create rhythm using the <code>sleep()</code> function. Fully compatible with everything else! It is usually a good idea to use <code>sleep()</code>\u00a0after having composed something complex to slice time even more.</p>"},{"location":"documentation/sardinopedia/rhythm/#silence-rhythms","title":"Silence rhythms","text":"<pre><code>@swim\ndef silence_rhythm(p=0.5, i=0):\n    D('bd', i=i, d=4)\n    D('hh:2', i=i, d=2)\n    D('drum:2+r*5', i=i, d=3)\n    a(silence_rhythm, p=1/8, i=i+1)\n</code></pre> <p>Play with the <code>divisor</code> amount to generate interesting rhythms.</p>"},{"location":"documentation/sardinopedia/sampling/","title":"Sampling","text":"<p>Sampling is taken care of by SuperDirt but I don't think that an official documentation of the API exists outside of the documentation provided by libraries using it. So be it, here are some basics for you to get started :)</p>"},{"location":"documentation/sardinopedia/sampling/#sampler-basics","title":"Sampler basics","text":"<p><pre><code>@swim\ndef hh(p=0.5):\n    D('hh', i=i=\n    again(hh, p=0.5)\n</code></pre> This will play the first file in the <code>hh</code> folder, loaded via SuperDirt.</p> <p><pre><code>@swim\ndef hh(p=0.5):\n    D('hh:1', i=i)\n    again(hh, p=0.5)\n</code></pre> This will play the second file, etc... Numbers wrap around, so you can't overflow and play a file that doesn't exist. It means that you can iterate freely on the sample number without fear.</p>"},{"location":"documentation/sardinopedia/sampling/#sample-playback-speed","title":"Sample playback speed","text":"<p><pre><code>@swim\ndef hh(p=0.5):\n    D('jvbass:0', speed='1,2,3,4', i=I.i)\n    again(hh, p=0.5)\n</code></pre> You can pitch samples up or down by changing the playback speed. <code>1</code>\u00a0is the normal playback speed, <code>2</code> twice as fast and\u00a0<code>0</code> will not play anything at all. You can play a file in reverse speed by inputting negative values such as <code>-1</code> for backwards normal speed, etc... Beware of very low numbers close to <code>0</code> as they will be sometimes harder to hear but will still take memory to be played, especially if there is nothing to stop them.</p>"},{"location":"documentation/sardinopedia/sampling/#sample-playback-volume","title":"Sample playback volume","text":"<p><pre><code>@swim\ndef loud(p=0.5):\n    D('bd', speed='1', amp=1, i=I.i)\n    again(hh, p=0.5)\n</code></pre> This bassdrum will be played very loud. The <code>amp</code> parameter will determine the volume of audio playback for a given sample. <code>0</code>\u00a0equals to silence. <code>1</code> corresponds to full volume, with distortion of the audio signal being allowed for larger values.</p> <p><pre><code>@swim\ndef loud(p=0.5):\n    D('bd', speed='1', gain=1, i=I.i)\n    again(hh, p=0.5)\n</code></pre> Gain is slightly similar to <code>amp</code>. The difference lies in the scaling. While <code>amp</code> is defined as a value on a linear scale, <code>gain</code>\u00a0is defined on an exponential scale. The higher you go, the more subtle the change. Folks from the TidalCycles documentation recommend a value between <code>0</code> and <code>1.5</code> for better use.</p>"},{"location":"documentation/sardinopedia/sampling/#cuttingstopping-samples","title":"Cutting/Stopping samples","text":"<p><pre><code>@swim\ndef cutting(p=0.5):\n    D('jvbass:0', legato=0.1, i=I.i)\n    again(cutting, p=0.5)\n</code></pre> The <code>legato</code> parameter can be used to cut a sample hard after a given amount of time. It is a very useful parameter not to overlap sounds too much if you ever needed it. It can also be used a safety parameter for playing back long samples without loosing control over the stop time.</p> <p><pre><code>@swim\ndef cutting(p=0.5):\n    D('jvbass:0', cut=1, i=I.i)\n    again(cutting, p=0.5)\n</code></pre> The <code>cut</code> parameter will cut the previously playing sample if trigerred on the same orbit. This is just like <code>legato</code> except that the duration of the <code>legato</code> will depend on the time spent between two sounds.</p> <p><pre><code>@swim\ndef cutting(p=0.5):\n    D('jvbass:0', sustain=0.01, i=I.i)\n    again(cutting, p=0.5)\n</code></pre> The <code>sustain</code> value will determine the length of audio playback (in seconds).</p>"},{"location":"documentation/sardinopedia/sampling/#sample-position","title":"Sample position","text":"<p><pre><code>@swim\ndef position(p=0.5):\n    D('fire', speed='1', begin=0.1, end=0.5, amp=0.5, i=I.i)\n    again(position, p=2)\n</code></pre> When playing long audio samples, you might want to scroll through the file, moving the playhead accross the file. You can use the <code>begin</code>\u00a0and <code>end</code> parameters (from <code>0</code> to <code>1</code>) to set the begin playback point and the end playback point. You can pattern the <code>begin</code> parameter with great expressive effect.</p>"},{"location":"documentation/sardinopedia/sampling/#sample-stretching","title":"Sample stretching","text":"<pre><code>@swim\ndef streeeetch(p=0.5):\n    D('fire',\n            begin='r/2',\n            legato=1,\n            amp=0.5,\n            timescale=2.7)\n    a(streeeetch)\n</code></pre> <p>You can get some interesting effects by using the <code>timescale</code> parameter (between <code>0</code> and <code>3</code> recommended) for stretching a sample over a given amount of time. This will result in a more grainy sound. This is some sort of timestretching for audio samples. Higher values ( &gt;3 ) for timescale work with more distortion to the sound. This can yield interesting results for more experimental sound.</p>"},{"location":"documentation/sardinopedia/senders/","title":"Handler and Senders: Sardine environment","text":"<p>Sardine is a modular live-coding library. You can add and substract modular components to the system. Each component is responsible of one thing and one thing only such as sending MIDI notes or receiving incoming OSC messages. These components are referred to as <code>Handlers</code>. Among these handlers, some are specialised in sending messages and communicating with the outside world. These are called <code>Senders</code>. There is one piece of software holding everything together: the <code>FishBowl</code>. As you might expect from the name, a <code>FishBowl</code> is gathering all the components of the Sardine system.</p>"},{"location":"documentation/sardinopedia/senders/#the-fishbowl","title":"The FishBowl","text":"<p>The <code>FishBowl</code> is central to the Sardine system. It is composed of hard dependencies and soft dependencies. Hard dependencies are things like the Clock or the Parser. They are needed pretty much everywhere. As such, you can't really remove them or everything would fall apart. Soft dependencies are the various inputs or outputs you need to perform or to make anything meaningful with Sardine. By default, some of them will be added depending on what you have specified in your configuration file. This is just for convenience and to help newcomers.</p>"},{"location":"documentation/sardinopedia/senders/#hard-dependencies","title":"Hard dependencies","text":"<p>Core components cannot be removed from the <code>FishBowl</code>. However, they can be swapped! It means that you can all of the sudden rip off the current clock and switch to a new one. The system might hiccup a bit but it will recover! To do so, note that you can use two important methods: </p> <ul> <li> <p><code>bowl.swap_clock(clock: \"BaseClock\")</code>: there are currently two clocks available: <code>InternalClock()</code> and <code>LinkClock()</code>. The latter is used for synchronisation with every device capable of using the <code>Link</code> protocol.</p> </li> <li> <p><code>bowl.swap_parser(parser: \"BaseParser\")</code>: switch from a parser to another parser. There is no reason to do that because there is only one parser for the moment but it might be useful in the future.</p> </li> </ul>"},{"location":"documentation/sardinopedia/senders/#soft-dependencies","title":"Soft dependencies","text":"<p>This is where the fun begins. Pretty much everything in the Sardine system is a modular component that can be added or removed. Take a look at the <code>run.py</code> file if you want to see how the system is first initialized. By default, Sardine is proposing a small collection of <code>Handlers</code> that will allow you to send or receive <code>MIDI</code>, <code>OSC</code> or <code>SuperDirt</code> messages. Some other <code>Handlers</code> are used for various internal functions that you might not care about. Take a look at the following code detailing how to add modular components:</p> <pre><code># Adding a MIDI Out handler: sending MIDI notes\n#\u00a0control changes, program changes, etc...\nmidi = MidiHandler(port_name=str(config.midi)) #\u00a0new instance of the Handler\nbowl.add_handler(midi) # adding the handler to the FishBowl\n\n# OSC Loop: internal component used for handling OSC messages\nosc_loop = OSCLoop() #\u00a0new instance of the Handler\nbowl.add_handler(osc_loop)  # adding the handler to the FishBowl\n\n# OSC Handler: dummy OSC handler\ndummy_osc = OSCHandler(\n    ip=\"127.0.0.1\",\n    port=12345,\n    name=\"My OSC sender\",\n    ahead_amount=0.0,\n    loop=osc_loop,\n)\n\n#\u00a0Aliasing some methods from the handlers for later :)\nM = midi.send\nCC = midi.send_control_changes\nPC = midi.send_program_changes\nO = dummy_osc.send\n</code></pre> <p>Please take note of the <code>bowl.add_handler</code> method. If you don't add your component to the <code>FishBowl</code>, your component will inevitably crash! This is a fairly common mistake, especially if you are working in a hurry. </p>"},{"location":"documentation/sardinopedia/senders/#messaging-system","title":"Messaging system","text":"<p>You might wonder what the <code>FishBowl</code> is actually doing behind the scene. Factually, it allows component to talk with each other by sharing a reference to the <code>bowl</code>. It means that any component can send a message to any other component. It also means that this same component can promptly react to any event dispatched through the <code>FishBowl</code>. Internal messages are sent using the <code>bowl.dispatch(message_type: str, *args)</code> method. This is how messages such as <code>bowl.('pause')</code>, <code>bowl.('resume')</code>, <code>bowl.('stop')</code> and <code>bowl.('play')</code> are able to stop and resume everything when needed. They are messages dispatched to the <code>FishBowl</code> making everyone aware that a major event occured.</p>"},{"location":"documentation/sardinopedia/senders/#default-senders-where-music-is-made","title":"Default senders: Where Music is Made","text":"<p>When you install Sardine, you also install a set of default Senders that will allow you to:</p> <ul> <li> <p>SuperDirt Sender: play sounds/synths using SuperCollider and the SuperDirt engine.</p> </li> <li> <p>MIDI Sender: trigger/control MIDI capable software / hardware.</p> </li> <li> <p>OSC Sender: send or receive Open Sound Control messages.</p> </li> </ul> <p>Naturally, Sardine users are thinking about adding more and more senders. Some are planned, some have never seen the light, and the best ones will be surely be added to the base library in the future. For now, these three I/O tools cover most of the messages used by live-coders and algoravers. Python packages can be imported to deal with other things that Sardine is not yet covering. You can turn the software into an ASCII art patterner or hack your way around to deal with DMX-controlled lights. </p> <p>You will soon figure out that learning how to swim was kind of the big deal. The rest is much easier to learn because you will now play with code quite a lot! Senders and swimming functions are enough to already make pretty interesting music. The rest is just me sprinkling goodies all around :)</p>"},{"location":"documentation/sardinopedia/senders/#i-anatomy-of-senders","title":"I - Anatomy of Senders","text":"<p>A Sender is an event generator. It is a method call describing an event. This event can mutate based on multiple factors such as patterns, randomness, chance operations, clever Python string formatting, etc... A single sender call can be arbitrarily long depending on the precision you want to give to each event. It can sometimes happen that a sender will receive ten arguments or more.  </p> <pre><code>       /`-._                          /`-._\n     _/,.._/                        _/,.._/\n  ,-'   ,  `-:,.-')        _     ,-'   ,  `-:,.-')        _\n : S(...):';  _  {              : M(...):';  _  {               ... and more\n  `-.  `' _,.-\\`-.)        +     `-.  `' _,.-\\`-.)        +\n     `\\\\``\\,.-'                     `\\\\``\\,.-'\n</code></pre>"},{"location":"documentation/sardinopedia/senders/#args-and-kwargs-arguments","title":"Args and kwargs arguments","text":"<p>Every sender (<code>D()</code>,\u00a0<code>CC()</code>, <code>PC()</code>) is an object taking arguments and keyword arguments. Arguments are mandatory, and keyword arguments are optional. These arguments will help to define your event:</p> <pre><code>D('bd', speed='[1:2,0.5]', legato=1, shape=0.5) #\u00a0Heavy drumbass\nN(note='&lt;C@min7^1&gt;', dur=2, channel=0)          # Short MIDI chord\n</code></pre> <p>You will have to learn what arguments each sender can receive. They all have their specialty. Despite the fact that they look and behave similarly, the event they describe is often different in nature. If you are interested in the default SuperDirt output, take a look at the Reference section in the menubar.</p>"},{"location":"documentation/sardinopedia/senders/#patterning-the-body","title":"Patterning the body","text":"<p>When using a sender, you usually describe a static event composed of multiple parameters. Live-coders tend to avoid using static events as they get repetitive very quickly. You will gradually seek ways to avoid strict repetition by varying some if not all of the parameters involved in a sender. The best way to bring some variation to a pattern is to rely on the pattern mechanisms allowing you to modify how your string keyword arguments are parsed:</p> <ul> <li> <p><code>iterator (i for short)</code> (int): the iterator for patterning. Mandatory for the two other arguments to work properly. This iterator is the index of the values extracted from your linear list-like patterns (your arguments and keyword arguments). How this index will be interpreted will depend on the next two arguments.</p> </li> <li> <p><code>div</code> (int): a timing divisor, that can be aliased to <code>d</code>. It is very much alike a modulo operation. If <code>div=4</code>, the event will be emitted once every 4 iterations. The default is <code>div=1</code>, where every event is a hit! Be careful not to set a <code>div=1</code> on a very fast swimming function as it could result in catastrophic failure / horrible noises. There is no parachute out in the open sea.</p> </li> <li> <p><code>rate</code> (float): a speed factor for iterating over pattern values. It can be aliased by <code>r</code>. It will slow down or speed up the iteration speed, the speed at which the pattern values are indexed on. For the pattern <code>1, 2, 3</code> and a rate of <code>0.5</code>, the result will be perceptually similar to <code>1, 1, 2, 2, 3, 3</code>.</p> </li> </ul> <p>It is quite tricky to understand, and I am not sure that all Sardine users are actually able to grasp what these arguments do. That's something you have to see represented differently. Take a look at the three arguments on the right in the following diagram. Note how different values will produce different iteration speeds:</p>  <p>Now, try exploring this idea using this dummy pattern: <pre><code>@swim\ndef ocean_periodicity(p=0.5, i=0):\n    D('bd, hhh, sn, hhh', speed='1,2', freq='r*800', i=i, d=2, r=0.5)\n    again(ocean_periodicity, p=0.5, i=i+1)\n</code></pre> Don't touch to the pattern itself, just change <code>i</code>,\u00a0<code>r</code> or <code>d</code>. Try to get more familiar with this system. You can change the recursion speed to notice more clearly how the pattern will evolve with time.</p>"},{"location":"documentation/sardinopedia/senders/#tips-for-writing-senders","title":"Tips for writing Senders","text":"<p>Python is an extremely flexible and expressive programming language. It is actually a breeze to compose arguments and keyword arguments in very fun and creative ways. Let's take some examples of some things you might want to do in the future! You can for instance store parameters common to multiple messages in a list/dictionary before sticking them to your patterns using the <code>*</code> and <code>**</code> idiom:</p> <pre><code>params = {'loud': {'amp': 2, 'shape': 0.9}, 'soft': {'amp': 0.1, 'legato': 0.1}}\nD('bd', **params['loud'])\n</code></pre>"},{"location":"documentation/sardinopedia/senders/#ii-the-dirt-sender-d","title":"II - The Dirt Sender (D)","text":"<p>The Dirt or SuperDirt sender is a sender specialised in talking with SuperCollider and more specifically with SuperDirt, a great sound engine made for live-coding. This piece of software was initially written by Julian Rohrhuber for TidalCycles but many people also use it as is. It is very stable, very flexible and highly-configurable. </p> <p>This sender is the most complex you will have to interact with and it is entirely optional if you wish to use Sardine only to sequence MIDI and OSC messages. This sender is actually not so different from a specialised OSC sender that talks exclusively with SuperDirt using special timestamped messages. The sender is always used like so:</p> <pre><code>D('sound', keyword=value_or_pattern, keyword2=value_or_pattern, i=iterator, d=div, r=rate)\n</code></pre> <p>The first argument defines the sound or synthesizer you want to trigger and it is not optional. Without it, you can be sure that the sender will crash because it cannot apply parameters to a sound that is undefined. The keyword parameters are the names of your SuperDirt parameters. It can be standard parameters, orbit parameters (audio bus) or parameters related to the synthesizer you are using. You will find more about this in the Reference section that is listing pretty much all of them! It takes some experience to know what meaningful parameters are but you will get it after practicing for a while! You will feel a bit lost at first but this is a case where you learn a lot by experimenting. Take a look at the following examples.</p>"},{"location":"documentation/sardinopedia/senders/#simple-bassdrum","title":"Simple Bassdrum","text":"<p><pre><code>@swim\ndef bd(p=0.5):\n    D('bd')\n    again(bd, p=0.5)\n</code></pre> A simple bassdrum playing on every half-beat. This is the most basic sound-making function you can write.</p>"},{"location":"documentation/sardinopedia/senders/#complex-bassdrum","title":"Complex Bassdrum","text":"<p><pre><code>@swim\ndef bd(p=0.5):\n    D('bd', speed='r*4', legato='r', cutoff='100+0~4000')\n    again(bd, p=0.25)\n</code></pre> A simple bassdrum but some parameters have been tweaked to add some randomness to the result. See how patterns can be used to make your keyword arguments more dynamic. The additional parameters are :</p> <ul> <li><code>speed</code> will reverse (&lt;0), slow (0-1), or accelerate the sample (&gt;1) by altering the playback speed. The <code>r</code> token provides randomization between <code>0.0</code> and <code>1.0</code> (float).</li> <li><code>legato</code> defines the maximum duration of the sample before cutting it, here randomized in the <code>0</code> to <code>1</code> range.</li> <li><code>cutoff</code> will attenuate some frequencies. This is the cutoff frequency of a lowpass filter that shuts down frequencies higher to the frequency cutoff. The cutoff frequency is guaranteed to be at least <code>100</code> plus a certain amount between <code>0</code> and <code>4000</code>.</li> </ul>"},{"location":"documentation/sardinopedia/senders/#simple-breakbeat","title":"Simple Breakbeat","text":"<p><pre><code>@swim\ndef bd(p=0.5, i=0):\n    D('amencutup:0~20', i=i)\n    again(bd, p=0.25, i=i+1)\n</code></pre> Picking a random sample in a folder containing slices of the classic amen break. You could have a successful career doing this in front of audiences. Once again, the magic happens with the <code>sample:r*X</code> notation, which randomizes which sample is read on each execution, making it unpredictable. Note the use of an iterator. Without it, you would actually play the first sample again and again.</p>"},{"location":"documentation/sardinopedia/senders/#sample-sequencing","title":"Sample sequencing","text":"<p><pre><code>@swim\ndef bd(p=0.5, i=0):\n    D('bd,hh,sn,hh', i=i)\n    again(bd, p=0.5, i=i+1)\n</code></pre> Your classic four-on-the-floor. </p>"},{"location":"documentation/sardinopedia/senders/#piling-up-polyphony","title":"Piling up / Polyphony","text":"<pre><code>@swim\ndef pluck(p=0.5, i=0):\n    D('pluck')\n    D('pluck:1')\n    D('pluck:2').out(i)\n    D('pluck:3').out(i)\n    again(pluck, p=0.5, i=i+1)\n</code></pre> <p>You can stack events easily by just calling <code>D()</code> multiple times. In the above example, it happens that <code>pluck</code> samples are nicely order and are generating a chord if you struck them at the same time. How cool! But wait, there is more to it:</p> <pre><code>@swim\ndef pluck(p=0.5, i=0):\n    D('&lt;pluck:[0:4]&gt;', octave=6)\n    again(pluck, p=0.5, i=i+1)\n</code></pre> <p>You can also stack sounds by using polyphony. With Sardine, polyphony is not a concept reserved to notes. Every pattern can be polyphonic (sample names, speeds, adresses, etc...).</p>"},{"location":"documentation/sardinopedia/senders/#ii-midi-senders","title":"II - MIDI Senders","text":"<p>MIDI is supported by the default <code>MidiHandler</code>. This handler is a bit special because it is defining multiple ways to send out MIDI information and not just notes or whatever. Every MIDI message can theorically be supported but the most important only are defined as of now. Send me a message if you would like to see support for other messages. This default MIDI sender works by defining a bunch of different <code>send</code> methods: </p> <ul> <li> <p><code>midi.send</code>: sending MIDI notes. Aliased as <code>N()</code> in the default setup.</p> </li> <li> <p><code>midi.send_control</code>: sending control changes (CC Messages), aliased as <code>CC()</code> in the default setup.</p> </li> <li> <p><code>midi.send_program</code>: sending program changes, aliased as <code>PC()</code> in the default setup.</p> </li> </ul>"},{"location":"documentation/sardinopedia/senders/#note-sender","title":"Note Sender","text":"<p>The Note or N sender is a sender specialised for emitting MIDI note-on and note-off messages just like on a music tracker or DAW. It does not have a lot of arguments, and if you have some degree of familiarity with the MIDI protocol, you will feel at home pretty quickly:</p> <ul> <li> <p>note (argument): your note number, between <code>0</code> and <code>127</code>. You can of course use patterns, and patterns can be patterns of notes (special syntax for writing chords, scales, notes, etc...). Values are clamped. If you enter an incredibly big number, it will be clamped to <code>127</code>. The same thing goes for small or negative numbers that will be brought back to <code>0</code>.</p> </li> <li> <p>channel or chan: your MIDI channel from <code>0</code> to <code>15</code> (<code>1</code> to\u00a0<code>16</code> in human parlance).</p> </li> <li> <p>velocity or vel: amplitude of your note, between <code>0</code> and <code>127</code>.</p> </li> <li> <p>duration or dur: duration of your note. Time between the note-on and note-off messages. This time is calculated in seconds. <code>dur=0.4</code> means that your note will be a little bit less than half a second.</p> </li> </ul>"},{"location":"documentation/sardinopedia/senders/#control-change-and-program-change-sender","title":"Control change and Program Change Sender","text":"<p>Study the preceding example. The Control Change and Program Change senders are rather similar. They only take some other keyword arguments to properly function:</p> <ul> <li><code>control</code> (between <code>0</code>\u00a0and <code>127</code>): the MIDI control number you would like to target.</li> <li><code>value</code> (between <code>0</code>\u00a0and <code>127</code>): the MIDI value for that control.</li> <li><code>program</code> (between <code>0</code>\u00a0and <code>127</code>): the MIDI program to select.</li> </ul>"},{"location":"documentation/sardinopedia/senders/#sending-a-note","title":"Sending a note","text":"<p><pre><code>@swim\ndef midi(p=0.5, i=0):\n    N().out()\n    again(midi, p=0.5, i=i+1)\n</code></pre> No argument required to send a MIDI Note (<code>60</code>) at full velocity (<code>127</code>) on the first default MIDI channel. Arguments are only used to specify further or to override default values.</p>"},{"location":"documentation/sardinopedia/senders/#playing-a-tune","title":"Playing a tune","text":"<p><pre><code>@swim\ndef midi(p=0.5, i=0):\n    N(note='C5,D5,E5,G5,E5,D5,G5,C5', i=i)\n    again(midi, p=0.5, i=i+1)\n</code></pre> Playing a little melody by tweaking the <code>note</code> argument.</p>"},{"location":"documentation/sardinopedia/senders/#a-bit-better","title":"A bit better","text":"<p><pre><code>@swim\ndef midi(p=0.5, i=0):\n    N(chan='0,1,2,3',\n      vel='20 + (r*80)',\n      dur=0.4, i=i,\n      note='C5,D5,E5,G5,E5,D5,G5,C5')\n    again(midi, p=0.5, i=i+1)\n</code></pre> The same melody spreaded out on three MIDI channels (one per note) with random velocity.</p>"},{"location":"documentation/sardinopedia/senders/#other-messages","title":"Other messages","text":"<p><pre><code>@swim\ndef midi(p=0.5, i=0):\n    D(channel='0,1,2,3',\n      velocity='20 + (r*80)',\n      dur=0.4, i=i,\n      note='C5,D5,E5,G5,E5,D5,G5,C5')\n    PC(program='1,2,3,4', i=i)\n    CC(chan=0, control=20, val=50, i=i)\n    again(midi, p=0.5, i=i+1)\n</code></pre> Switching between program <code>1</code>, <code>2</code>, <code>3</code> and <code>4</code> on your MIDI Synth. Sending a control change on channel <code>0</code>, number <code>20</code> for a value of <code>50</code>.</p>"},{"location":"documentation/sardinopedia/senders/#iii-osc-sender","title":"III - OSC Sender","text":"<p>The OSC Sender is the most complex and generic of all. It is a sender specialised for the Open Sound Control protocol. It is not complex because there are a lot of arguments and keyword arguments to learn but because using it relies on instanciating the sender and adding it to the bowl before being able to do anything:</p> <pre><code>output_one = OSCHandler(\n    ip=\"127.0.0.1\", port=12345,\n    name=\"A first test connexion\",\n    ahead_amount=0.0, loop=osc_loop, #\u00a0The default OSC loop, don't ask why! \n)\nbowl.add_handler(output_one)\n\noutput_two = OSCHandler(\n    ip=\"127.0.0.1\", port=12346,\n    name=\"A second test connexion\",\n    ahead_amount=0.0, loop=osc_loop,\n)\nbowl.add_handler(output_two)\n\n#\u00a0Look who's here, the send functions as usual\none = output_one.send\ntwo = output_two.send\n</code></pre> <p>You can now use the methods <code>one</code> and <code>two</code> as OSC senders just like <code>D()</code>\u00a0or <code>N()</code>.  </p> <pre><code>@swim\ndef one_two_test(p=0.5, i=0):\n    \"\"\"This is a dummy swimming function sending OSC.\"\"\"\n    one('random/address', value='1,2,3')\n    again(one_two_test, p=0.5, i=i+1)\n</code></pre> <p>If you'd like, you can also make a Player (see surfboards in the preceding section) out of it by using the following technique:</p> <pre><code>def osc_player(*args, **kwargs):\n    \"\"\"Partial function to add a new OSC player :)\"\"\"\n    return play(\n        output_one, \n        output_one.send, \n        *args, **kwargs\n    )\n\nPa &gt;&gt; osc_player('random/address', value='1,2,3')\n</code></pre>"},{"location":"documentation/sardinopedia/senders/#receiving-osc","title":"Receiving OSC","text":"<p>You can also receive and track incoming OSC values. In fact, you can even attach callbacks to incoming OSC messages and turn Sardine into a soundbox so let's do it!</p> <pre><code># Making a new OSC-In Handler\nlistener = OSCInHandler(\n    ip=\"127.0.0.1\", \n    port=44444, \n    name=\"Listener\", \n    loop=osc_loop\n)\n\n# Adding the listener to the bowl\nbowl.add_handler(listener)\n\ndef funny_sound():\n    D('bip', shape=0.9, room=0.9)\n\nlistener.attach('/bip/', funny_sound)\n</code></pre> <p>That's everything you need! In the above example, we are declaring a new <code>OSCInHandler</code> object that maps to a given port on the given IP address (with <code>127.0.0.1</code> being <code>localhost</code>). All we have to do next is to map a function to every message being received at that address and poof. We now have a working soundbox. Let's break this down and take a look at all the features you can do when receiving OSC.</p> <p>There are three methods you can call on your <code>OSCInHandler</code> object:</p> <ul> <li> <p><code>.attach(address: str, function: Callable, watch: bool)</code> : attach a callback to a given address. It must be a function. Additionally, you can set <code>watch</code> to <code>True</code> (<code>False</code> by default) to also run the <code>.watch</code> method automatically afterhands.</p> </li> <li> <p><code>.watch(address: str)</code> : give an address. The object will track the last received value on that address. If nothing has been received yet, it will return <code>None</code> instead of crashing \\o/.</p> </li> <li> <p><code>.get(address)</code> : retrieve the last received value to that address. You must have used <code>.watch()</code> before to register this address to be watched. Otherwise, you will get nothing.</p> </li> </ul>"},{"location":"documentation/sardinopedia/senders/#blending-osc","title":"Blending OSC","text":"<p>If you are receiving something, you can now use it in your patterns to map a captor, a sensor or a controller to a Sardine pattern. If you combo this with amphibian-variables, you can now contaminate your patterns with values coming from your incoming data:</p> <pre><code>listener.watch('/sitar/speed/')\n\n@swim \ndef contamination(p=0.5, i=0):\n    v.a = listener.get('/sitar/speed/')['args'][0]\n    D('sitar', speed='v.a')\n    again(contamination, p=0.5, i=i+1)\n</code></pre> <p>This opens up the way for environmental reactive patterns that can be modified on-the-fly and that will blend code and human interaction. Handling data received from OSC can be a bit tricky at first:</p> <ul> <li> <p>if you wish to carefully take care of the data you receive, please use the <code>.attach()</code> method to attach a callback to every message received and properly handle the data yourself. Use the form <code>callback(*args, **kwargs)</code> and examine what data you receive in the args and kwargs. Map this to global variables, etc...</p> </li> <li> <p>if you don't care and just want to watch values as they go, please use the <code>.watch()</code> value but you will have to resort to using dictionnary  key access just like I do in the example above. You will have to handle cases where no data is received or cases where the received value is not of the right type. There is no memory of old messages, only the most recent one is kept in memory!</p> </li> </ul> <p>This is not ideal for some of you who do a lot of things with OSC. Please provide suggestions, open issues, etc... We will sort this out together!</p>"},{"location":"documentation/sardinopedia/supercollider/","title":"SuperCollider & SuperDirt","text":""},{"location":"documentation/sardinopedia/supercollider/#i-sardine-architecture","title":"I - Sardine architecture","text":""},{"location":"documentation/sardinopedia/supercollider/#a-general-concept","title":"A) General concept","text":"<p>If you have installed Sardine alongside SuperCollider and SuperDirt, you know that Sardine can boot its own SuperDirt session, etc.. If you haven't been live coding for several years, all of this might seem a little bit shady. We assume that things are working properly but we never detail the underlying infrastructure. Let's break it down:</p> <ul> <li> <p>Sardine is doing the patterning and the scheduling. It is your top-level control and playing library.</p> </li> <li> <p>SuperCollider is the almighty audio engine.</p> </li> <li> <p>SuperDirt makes it easy to talk with SuperCollider in a live-coding context. It was originally designed to work hands-in-hands with TidalCycles but of course you can hijack it which is what Sardine is doing.</p> </li> </ul> <p>Sardine is an independant piece of software. By design, it doesn't need SuperCollider to work. You can live an happy life by just sending OSC and MIDI using Sardine and never bridging with SC. However, if you do so, you will have to manage the connexion, to know how to deal with SuperCollider, etc... Sardine is not capable of emitting sound, it is more akin to a general sequencing brain that simplifies input and output communication for you during the improvisation process.</p>"},{"location":"documentation/sardinopedia/supercollider/#b-limitations","title":"B) Limitations","text":"<p>Sardine is not designed to handle the digital signal processing or the reality of scheduling / generating / controlling audio signals. Python is not an efficient or particularly optimised language (although things are changing a little bit nowadays..). Sardine is already performing a lot of weird tricks to stay afloat in an almost real-time context. It is not perfect but hopefully it will evolve and reach perfect stability.</p> <p>Sardine was initially conceived in a music studio on a small laptop surrounded by audio equipment waiting for instructions. The idea was to delegate the audio processing to external hardware / softwares and to fully focus on live control / live sequencing. I would love to keep it that way because there is a lof of exciting solutions to explore for sound / audio design such as Faust, SuperCollider, CSound, and the list goes on and on. You can emulate part of the signal logic with patterns but it will never be as good compared to what a DSP language can offer.</p>"},{"location":"documentation/sardinopedia/supercollider/#ii-talking-to-superdirt-supercollider","title":"II - Talking to SuperDirt / SuperCollider","text":"<p>If you choose to boot SuperCollider and SuperDirt alongside Sardine in your <code>sardine-config</code>, everything should fall in place. You have one main Python process handling everything for you so you don't have to start things manually. If you don't, you can always start SuperCollider yourself and manage two separate applications that will happily collaborate through the network.</p>"},{"location":"documentation/sardinopedia/supercollider/#a-interesting-goodies","title":"A) Interesting goodies","text":"<p>Let's assume that SuperDirt has started, and that you received the message saying that the audio engine is ready. You can now interact with the <code>SC()</code> object that represents your SC subprocess. Let's open up a VUMeter of our session:</p> <pre><code>SC.meter()\n</code></pre> <p>All good, let's open some other windows as well.</p> <p><pre><code>SC.meter()\nSC.scope()\nSC.freqscope()\n</code></pre> You can open sound visualisation tools from the active SuperCollider session by running any of the commands above. Here is a short explanation of what each function do:</p> <ul> <li><code>SC.meter()</code>: open a window showing VUMeters for each and every physical sound output.</li> <li><code>SC.scope()</code>: open an oscilloscope to visualise every audio bus currently declared.</li> <li><code>SC.freqscope()</code>: open a frequency spectrum visualizer of the global audio output.</li> </ul>"},{"location":"documentation/sardinopedia/supercollider/#b-sending-code-to-supercollider","title":"B) Sending code to SuperCollider","text":"<p>You can pipe code from your Sardine session to SuperCollider. Of course, this is not the best interface ever, but it can surely help to run short commands or to open an article from the SuperCollider documentation. To see SuperDirt documentation, you can type the following:</p> <pre><code>SC.send('SuperDirt.help')\n</code></pre> <p>You will have to work without syntax highlighting. Copying and pasting short and useful commands is probably better if you are not an experienced SuperCollider user. There are no bindings for the SuperCollider server implemented into Sardine. Be sure that I am monitoring packages that are proposing solutions for this but I am not ready to write my own bindings for now. There is too much work to handle with Sardine itself before thinking about branching out.</p> <p>If that's your thing, you can integrate small SC snippets in your patterns and sequence them with a decent enough time precision:</p> <pre><code>#\u00a0Generating a sinewave oscillating at 200hz.\nSC.send('a={SinOsc.ar(200) * 0.1}; b = a.play;')\n\n#\u00a0Freing the synth\nSC.send('b.free')\n</code></pre>"},{"location":"technical/configuration/","title":"Configuration tools","text":"<p>This page will help you to learn how to configure Sardine. You will soon figure out that Sardine is modular in nature. You can toggle on and off certain features, you can pre-configure many things and fine-tune to be up and ready for your next sessions, etc...</p>"},{"location":"technical/configuration/#i-code-editors","title":"I - Code Editors","text":"<p>You can use <code>Sardine</code> directly from the Python interpreter, typing lines of code one by one in the interpreter. There is nothing wrong about it but you will be pretty limited in what you can do. This is a very infuriating experience! You might also dislike the fact that popups will be printed pretty frequently if you make mistakes. It is sometimes enough to run quick sound/MIDI tests but not much more. TLDR: you need a text editor to truly enjoy Sardine!</p> <p>Sardine code can become quite verbose when dealing with complex swimming functions. As you might have guessed already, there is no <code>Sardine</code> plugin for VSCode, Atom or any popular code editor yet. However, Sardine is just Python and there are great plugins to deal with interactive Python code already. Here are a few things you can try.</p>"},{"location":"technical/configuration/#vim-neovim","title":"Vim / Neovim","text":"<p>Neovim (and by extension Vim) is the editor I currently use on stage but the target audience is mostly developers, old Unix gurus and command-line users. Vim is a modal text editor with multiple modes for editing and jumping around in the source code. It can be extended using plugins and tweaked to your liking. Quite powerful, but it requires some learning to be proficient. The process for working with Sardine from Neovim is pretty straightforward:</p> <ul> <li>1) install the slime plugin.</li> <li>2) split your workspace in two vertical (<code>:vs</code>) or horizontal (<code>:sp</code>) panes.</li> <li>3) open up a <code>:terminal</code> in one of them and run <code>python3 -m fishery</code>.</li> <li>4) work in the other one and use <code>C-cC-c</code> to send code from one side to the other.</li> </ul>"},{"location":"technical/configuration/#vscode","title":"VSCode","text":"<p>VSCode is a powerful and all-devouring code editor developed by Microsoft. It is the most widely spread code editor out there with millions of users, thousands of plugins and corporate support. VSCode is more than capable of handling Sardine sessions and there are multiple ways to configure everything for it.</p>"},{"location":"technical/configuration/#the-best-technique","title":"The best technique","text":"<ul> <li>1) install the <code>Python</code> support for VSCode (usually proposed whenever you open a Python file).</li> <li>2) open the configuration menu and search for <code>Python launch args</code>. Click on <code>Modify in settings.json</code></li> <li>3) write the following: <pre><code>    \"python.terminal.launchArgs\": [\n        \"-m\",\n        \"asyncio\"\n    ],\n</code></pre></li> <li>4) You are done!</li> </ul> <p>To start a new Sardine session, open any <code>.py</code> file and type: <pre><code>from sardine import *\n</code></pre></p> <p>Press <code>Shift+Enter</code> and wait for the new Python terminal to show up. You can now start typing Sardine code, you are good to go! You will need to select the code you want to run before sending it to the console.</p> <p>Note that simply opening <code>fishery</code> in an integrated terminal might be enough since <code>v.0.2.1</code>!</p>"},{"location":"technical/configuration/#the-jupyter-route","title":"The Jupyter route","text":"<p>If you like it, you can also use the Jupyter extension for working with Python notebooks. Maybe it'll remind you about your daily job or your research at the lab. Whatever!</p> <ul> <li>install VSCode and the Jupyter Notebook plugin. To do so, open the Extensions pane on the left (it looks like crates) and search for the extension name. Click install and wait a moment.</li> <li>Create a new <code>.ipynb</code> notebook either by yourself or by using the plugin-backed command.</li> <li>Make sure that you are using the right Python version as your kernel (3.10).</li> <li>run:     <pre><code>  import sys;\n  !{sys.executable} -m pip install \"/path/to/sardine\"\n</code></pre></li> <li>restart the kernel and run:     <pre><code>import sys\nsys.path.insert(0, '/path/to/sardine')\nfrom sardine import *\n</code></pre> From now on, Sardine is installed in the notebook you just created. You can write cells containing your Sardine code, which makes it easy to work with. Some plugins allow you to write and manage cells directly using source code, using symbols akin to comment strings. More on this later!</li> </ul>"},{"location":"technical/configuration/#emacs","title":"Emacs","text":"<p>The venerable Emacs is of course able to manage Sardine! Please use the python.el plugin. This mode will allow you to pipe easily your code from a text buffer to a running interpeter. The plugin is adding quality-of-life features for working with Python in general but also makes working with a REPL much easier and much more convenient. If you are new to the vast world of Emacs, it is probably worthwhile to take a look at Doom Emacs or Spacemacs, both being really great distributions of plugins. I will not dive into more details, as Emacs users are generally able to figure out their prefered way of working by themselves :)</p>"},{"location":"technical/configuration/#ii-configuration-options","title":"II - Configuration options","text":"<p>Sardine is relying on a configuration folder that will be silently created the first time you open it. The path leading to the configuration folder can be printed out by typing <code>print_config()</code>. This command will also print out the content of your main configuration file. How practical! </p> <p>There are three files you can tweak to configure Sardine:</p> <ul> <li><code>config.json</code>: main Sardine configuration file.</li> <li><code>default_superdirt.scd</code>: SuperDirt configuration file.</li> <li><code>user_configuration.py</code>: Python code runned everytime you boot Sardine (facultative).</li> </ul> <p>There is also a <code>synths</code> folder made to store synthesis definitions (synthesizers, effects).</p> <ul> <li><code>synths</code> folder: store new synthesizers written with SuperCollider, usually one synth per <code>.scd file</code>.</li> </ul>"},{"location":"technical/configuration/#a-sardine","title":"A - Sardine","text":"<p>The <code>config.json</code> file will allow you to finetune Sardine by choosing a default MIDI port, a default PPQN (pulses per quarter note, used for the MIDI Clock), and BPM (beats per minute), etc... You can edit it manually but you don't have too. There is a tool made for that, installed by default on your <code>$PATH</code>. Access it by typing <code>sardine-config</code>.</p>  <p>Sardine can generate its own MIDI port which is very convenient if you don't have any virtual MIDI port ready to be hijacked. This feature however is limited to MacOS/Linux.</p> <p>Here is a rundown of what each option is doing in the config file:</p>    Syntax Description     <code>beats</code> Number of beats per bar   <code>boot_supercollider</code> Booting SuperCollider subprocess or not   <code>bpm</code> Default beats per minute (tempo) when starting a session   <code>debug</code> Used by devs   <code>deferred_scheduling</code> Important option for the scheduling mechanism   <code>link_clock</code> Should Sardine start a Link clock for synchronisation?   <code>midi</code> Default MIDI output used by Sardine   <code>parser</code> For future versions, choosing a parser version   <code>sardine_boot_file</code> Where the boot file is currently located   <code>superdirt_config_path</code> Where the internal SuperDirt configuration is located   <code>superdirt_handler</code> Should Sardine add an option to trigger SuperDirt?   <code>user_config_path</code> Configuration path for running arbitrary code   <code>verbose_superdirt</code> Mirroring SuperCollider output in the terminal"},{"location":"technical/configuration/#b-superdirt","title":"B - SuperDirt","text":"<p>The <code>default_superdirt.scd</code> is... your default <code>SuperDirt</code> configuration. You must edit it manually if you are willing to load more audio samples, change your audio outputs or add anything that you need on the SuperCollider side. The <code>synths</code> folder is a repository for your <code>SynthDefs</code> file. Each synthesizer should be saved in its own file and will be loaded automatically at boot time. </p>  <p>How to tweak the SuperDirt file</p> <p>The SuperDirt repository is a good place to start, especially the <code>hacks/</code> folder that will teach you how to edit and configure SuperDirt to your liking. SuperDirt was initially conceived for TidalCycles, and there is more documentation about Tidal and its usage than documentation about anything Sardine.</p>   <p>Editing the SuperDirt file directly from the terminal</p> <p>If you know how to work with text files from the terminal using <code>vim</code> or <code>nano</code>, there is a command available to open the default SuperDirt configuration file: <code>sardine-config-superdirt</code>. It will open up the file using <code>$EDITOR</code>. Be sure to configure it beforehand!</p>  <p>Here is an example showing of how to load more audio samples to play with:</p> <pre><code>(\ns.reboot {\n    s.options.numBuffers = 1024 * 256;\n    s.options.memSize = 8192 * 32;\n    s.options.numWireBufs = 128;\n    s.options.maxNodes = 1024 * 32;\n    s.options.numOutputBusChannels = 2;\n    s.options.numInputBusChannels = 2;\n    s.waitForBoot {\n        ~dirt = SuperDirt(2, s);\n        ~dirt.loadSoundFiles;\n        ~dirt.loadSoundFiles(\"/Users/bubo/Dropbox/MUSIQUE/LIVE_SMC/DRUMS/*\");\n        s.sync;\n        ~dirt.start(57120, 0 ! 12);\n        (\n            ~d1 = ~dirt.orbits[0]; ~d2 = ~dirt.orbits[1]; ~d3 = ~dirt.orbits[2];\n            ~d4 = ~dirt.orbits[3]; ~d5 = ~dirt.orbits[4]; ~d6 = ~dirt.orbits[5];\n            ~d7 = ~dirt.orbits[6]; ~d8 = ~dirt.orbits[7]; ~d9 = ~dirt.orbits[8];\n            ~d10 = ~dirt.orbits[9]; ~d11 = ~dirt.orbits[10]; ~d12 = ~dirt.orbits[11];\n        );\n    };\n    s.latency = 0.3;\n};\n)\n</code></pre>  <p>How to include a new sample folder</p> <p>SuperDirt treats a wildcard (<code>*</code>) at the end of the path to mean that there are named subdirectories. If you want to load just one sample directory, omit the wildcard.</p>  <p>Many people already use the SuperDirt audio backend for live-coding, more specifically people working with TidalCycles. You will find a lot of configuration tips, tools and extensions by searching in the TOPLAP / Tidal communities forums and chats.</p>"},{"location":"technical/configuration/#c-python","title":"C - Python","text":"<p>The last configuration file is named <code>user_configuration.py</code>. It is not created by default. It must be added manually if you wish to use this feature. All the code placed in this file will be imported by default everytime you boot Sardine. It is an incredibely useful feature to automate some things:</p> <ul> <li>functions, aliases, classes, OSC and MIDI connexions.</li> <li>Starting some musical code, aka 'art installation' mode for museums, openings, etc... You will be able to manually take over after init if you ever wished to change parameters.</li> </ul>  <p>Do not break Sardine</p> <p>Make sure not to override any of the defaults. This file will run after init, and can override basic Sardine functionalities if you are not careful enough.</p>"},{"location":"technical/installation/","title":"Installation","text":"<p>The installation of Sardine is done in two separate steps that you can go through in any order:</p> <ul> <li> <p>[MANDATORY] Installing / configuring of the Sardine library and your text editor.</p> </li> <li> <p>[RECOMMENDED]\u00a0Installing / configuring the audio backend (SuperDirt).</p> </li> </ul> <p>Sardine by itself is just a program that does I/O (Input/Output) of various musical information. It is up to you to configure the rest so that it can make sound! The better part is that you can configure it however you like for whatever musical purpose you have in mind :) By installing everything correctly, you will be able to integrate Sardine with almost any musical application.</p>  <p>Sardine is a multi-layered 'lasagna-style' software</p>"},{"location":"technical/installation/#i-library","title":"I - Library","text":"<p>Sardine can be installed like any other Python package using <code>pip</code>, the official package manager. It is now also hosted on <code>Pypi</code>, the Python package manager. You don't have to download anything manually!</p>  <p>Installing and updating Python</p> <p>1) Install Python for your operating system (&gt;=3.10).    Update if needed!</p> <p>2) Open a terminal and type <code>python</code> or <code>python3</code> for extra safety.    A prompt will open telling you what version you currently default to.    Please make sure that you are running at least Python 3.10.</p>  <p>Being aware of your installed Python versions is of tremendous importance. You can have multiple versions of Python running on your system, some being required by your operating system, some being installed by other applications. They sometimes end up piling up. Find the command that will summon your Python 3.10 or Python 3.11 installation (can be <code>python</code>, <code>python3</code>, <code>python3.10</code>, <code>python3.11</code> depending on the system you are currently using)..</p> <p>You can now safely proceed to download and install Sardine:</p> <pre><code>pip install sardine-system --find-links https://thegamecracks.github.io/python-rtmidi-wheels/\n</code></pre> <p>This will install the sardine-system package from PyPI with an external index providing prebuilt wheels for the <code>python-rtmidi</code> dependency. Right now, python-rtmidi does not have prebuilt wheels for 3.10 and 3.11. Installing sardine without the external index will require C++ build tools in order to compile the RtMidi library.</p> <p>Alternatively, if you want to install the development version, follow the steps below:</p> <p>1) Download the repository from GitHub:</p> <p>If you are planning to contribute, you should clone the repository    using Git:</p> <pre><code>git clone https://github.com/Bubobubobubobubo/sardine\n</code></pre> <p>Otherwise if you don't have Git installed, you can click    the green Code button instead, download it as a zip, and unpack it.</p> <p>2) Using a <code>shell</code> or <code>cmd</code>, go to the <code>sardine</code> folder you downloaded    and run the command:</p> <pre><code>pip install --editable . --find-links https://thegamecracks.github.io/python-rtmidi-wheels/\n</code></pre> <p>The period denotes the current directory of your shell, which should be    where you've downloaded your package.</p> <p>The <code>-e/--editable</code>    flag allows you to make changes to the source code after you've already installed the package.</p> <p>If you are using Linux or MacOS, use <code>sudo</code> to install with the highest    privileges. This is usually not recommended but it can help with the    installation of other Sardine components.</p> <p>The above commands can take quite some time depending on your internet connection, your computer specifications, etc... It will install Sardine as well as all the packages and libraries needed to get it running. This is likely the step where you will start noticing crashes, errors and sometimes some truly cryptic messages. Please watch carefully, and do not let an error pass without notice. This might result in a broken / incomplete installation of Sardine.</p> <p>Wait until the end of the process. To test if Sardine is installed properly, execute the following commands in your terminal:</p> <pre><code>fishery\n# or alternatively:\npython -m fishery\n</code></pre> <p>You should now see a big bright <code>SARDINE</code> written on your screen. Congratulations! This is the indication that Sardine was able to start!</p>"},{"location":"technical/installation/#ii-audio-engine","title":"II - Audio engine","text":""},{"location":"technical/installation/#installation_1","title":"Installation","text":"<p>Installing SuperCollider and SuperDirt</p> <ul> <li>Refer to the SuperDirt   installation guide for your platform. It will guide you through the   installation of SuperCollider and   SuperDirt. It is usually a three step process:<ul> <li>install SuperCollider.</li> <li>run <code>Quarks.install(\"SuperDirt\")</code> in the SCIDE window.</li> <li>run <code>SuperDirt.start</code> to start the engine.</li> </ul> </li> </ul>   <p>SC3-plugins</p> <p>You might want to check out SC3-plugins. These plugins will dramatically increase the possibilities if you are planning to use sampling or the internal synthesis engine a lot!</p>  <p>SuperDirt is the optional but very much recommended synthesis engine for Sardine. As a matter of fact, Sardine was initially built as an alternative client for SuperDirt. It is a well-known free and open source piece of software used by live coders. SuperDirt is mostly developed by Julian Rohrhuber, and intended to be used initially for TidalCycles, a truly great live coding library. SuperDirt is triggered by simple OSC messages converted into SuperDirt instructions that will start audio amples, synthesizers and do many other things, taking care of the finicky details. Note that it also means that your Sardine configuration will be valid and portable to TidalCycles.</p>"},{"location":"technical/installation/#iii-configuration","title":"III - Configuration","text":"<p>SuperDirt is not enabled by default</p> <p>Sardine is perfectly capable of booting both SuperCollider and SuperDirt by itself. However, this mechanism is disabled by default because I can't assume that you will have it installed and configured properly! You can turn on the SuperDirt autoboot feature by tweaking the configuration.</p>  <p>Open up the configuration tool by typing: <pre><code>sardine-config\n</code></pre></p>  <p>Follow the menus to configure Sardine to your liking but remember to turn on SuperDirt and SuperCollider if you need it. Explore the menus a bit to understand all the things you can configure, we will come back to it later on. Sardine is very modular, you can enable or disable features very easily. If the <code>sardine-config</code> utility tool is missing, try reinstalling Sardine in admnistrator mode (<code>sudo</code> on Unix systems). If Python returns a message such as: <pre><code>\"WARNING: The scripts sardine-config, sardine-config-python and sardine-config-superdirt are installed in '/opt/local/Library/Frameworks/Python.framework/Versions/3.10/bin' which is not on PATH.\"\n</code></pre> Please add the given location on your <code>PATH</code>.</p>"},{"location":"technical/installation/#words-of-caution","title":"Words of caution","text":"<p>About the autoboot feature</p> <p>Sardine will assume that <code>SuperCollider</code> (and more specifically <code>sclang</code>) is accessible on your <code>$PATH</code>. Everything should run just fine if you install it in the default folder for your platform. On some specific systems, you might need to locate the <code>sclang</code> executable and to add it to <code>$PATH</code>.</p>  <p>Since Sardine <code>v.0.2.1</code>, some error messages from SuperCollider are also mirrored in Sardine to help you keep track of things going wrong on both sides :)</p>"},{"location":"technical/installation/#iv-code-editor","title":"IV - Code Editor","text":"<p>Pick the editor you prefer from the following list. All of them have been tested with Sardine! It's only a matter of preference.</p>  <p>Text editors compatible with Sardine</p> <ul> <li>VSCode: great for everyone, from newcomers to exprienced users.</li> <li>Vim: fast, powerful, ubiquitous. Modal editor that requires some learning.</li> <li>Neovim: the modernized version of Vim, configurable using Lua.</li> <li>Emacs: Emacs is everything and can do anything.</li> <li>Jupyter Notebook: A data-science oriented tool that can support Sardine.</li> </ul>  <p>Working and making music with Sardine is usually done following the same method for all editors:</p> <ul> <li> <p>1) Opening a new blank\u00a0<code>.py</code> file (no need to save).</p> </li> <li> <p>2) Launching a terminal in the same coding environment</p> </li> <li> <p>3) Sending lines of code from the code buffer to the terminal buffer.</p> </li> </ul> <p>If you already know how to do that for you, great! If you don't, please head to the configuration section where additional help concerning your editor of choice will be written.</p>"},{"location":"technical/installation/#conclusion","title":"Conclusion","text":"<p>You should now have Sardine (and possibly SuperDirt) installed. You can fine-tune your Sardine installation by running the configuration client:</p> <pre><code>sardine-config\n</code></pre> <p>This is the main configuration tool for Sardine. We will come back to it later. If the command is not found or if nothing happens, Sardine might not be installed correctly. Please worry and review the preceding steps!</p> <p>You might get a message saying that you have no configuration file. Take for a guarantee that Sardine is installed! This is perfectly normal. By default, there is no configuration file until it is created the first time you start Sardine.</p> <p>Open a new interactive Sardine session by running <code>python3 -m fishery</code>. If everything is alright, some popup messages will be printed and you will be left on a prompt (<code>&gt;&gt;&gt;</code>) waiting for your input:</p>  <p>If you have opted to use the SuperDirt audio backend, you can start checking if everything is fine by playing a clap or a kickdrum:</p> <pre><code>D('cp')\n</code></pre> <p>If you want to play a note on your MIDI Synth, use this command instead:</p> <pre><code>N()\n</code></pre> <p>If you hear the clap or the note you were expecting, you are good to go! Have fun!</p>"},{"location":"technical/installation/#trivia","title":"Trivia","text":""},{"location":"technical/installation/#alternative-boot-methods","title":"Alternative boot methods","text":"<p>So far, we've used the fast boot method for Sardine:</p> <pre><code>python3 -m fishery\n#\u00a0alternatively\nfishery\n</code></pre> <p>Note that you can boot Sardine manually in a two-step process:</p> <p>1) <code>python3 -m asyncio</code>: start the asyncio REPL</p> <p>2) <code>from sardine import **</code>: import Sardine library</p>"},{"location":"technical/troubleshot/","title":"Troubleshot","text":"<p>This page will guide you along if you need to debug Sardine. It can be anything ranging from problems while installing it to problems encountered during performance. If you encounter an issue that is currently not documented here, please forward it by using the issue tracker on GitHub or by directly sending a mail out to me :)</p>"},{"location":"technical/troubleshot/#broken-sardines","title":"Broken Sardines","text":"<p>Some bugs and issues are related to Sardine itself. I try to document the errors encountered by users as much as I can but I still lack feedback on the installation process for different systems, etc.. You might also have different use cases that I might not have anticipated.</p>  <p><code>python3 -m fishery</code>: no module named ...</p> <p>[ALL]: This is likely the sign of an incomplete Sardine installation. Please make sure that you have <code>MSVC</code> (Windows), <code>gcc</code> (Linux) or <code>clang</code> (MacOS) installed and that you have also installed <code>CMake</code>. The installation failed because some libraries couldn't compile. By failing more or less silently, some other dependencies have not been installed. This is the mythical broken sardine.</p>   <p><code>python-rtmidi</code> fails on install</p> <p>[LINUX/MACOS]: Installation fails on <code>python-rtmidi build</code>. Its probably because you missed libjack development files (<code>libjack-dev</code> or <code>libjack-jack2-dev</code>). You can install it with <code>sudo apt-get install libjack-dev</code> on Debian based systems, with <code>brew</code> for MacOS, and with <code>pacman</code> for any other Arch-based system.</p>   <p><code>jack.h</code> missing on install</p> <p>[MACOS]: Install fails on <code>python-rtmidi build</code>. You might have JackOSX installed. Remove it entirely from your system and rely on CoreAudio. Nothing personal against Jack, it just confuses the compilation process of <code>python-rtmidi</code>!</p>   <p>uvloop warning or errors</p> <p>[WINDOWS ONLY]: <code>uvloop</code> does not work on Windows. Fortunately, you can still run Sardine but you might have some issues targetting blindly a specific tempo. You will sometimes (?) have to drastically slow down the clock for it to work (~20bpm is a safe value)! This might be linked to a different implementation of <code>asyncio</code> on Windows. This issue is currently being investigated and is not fairly common.</p>"},{"location":"technical/troubleshot/#superdirt-related","title":"SuperDirt related","text":"<p>I don't hear any sound at all!</p> <p>Check that <code>--boot_superdirt</code>\u00a0is <code>True</code> in your <code>sardine-config</code>:  <pre><code>sardine-config --boot_superdirt True\n</code></pre> Check that your audio output and microphone are running at the sample rate:</p> <ul> <li>44100 or 48000hz on both sides (audio output / input). </li> </ul> <p>You can check this using your operating system usual configuration tools. Note that pluging in and out a microphone can change the sampling rate automatically.</p>   <p>I still can't hear anything!</p> <p>Sometimes, when you play around with booting and quiting Sardine repeatedly, your computer might start to get confused about who is using some of the network connections or not. You now have zombie connexions blocking the I/O process from happening (Sardine can't match with SuperCollider, etc...). This can also happen simply by opening multiple instances of Sardine.</p> <p>If that is to happen, please make sure to:</p> <ul> <li> <p>kill every instance of Sardine and SuperCollider and the code editors that hosted them.</p> </li> <li> <p>run <code>Server.killAll</code> in a brand-new SuperCollider window.</p> </li> </ul> <p>You can now start again.</p>"}]}